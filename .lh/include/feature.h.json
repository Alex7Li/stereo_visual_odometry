{
    "sourceFile": "include/feature.h",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1648673157626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1648673167034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     }\n  };\n \n // how many of the top rows of buckets to ignore of the image\n-const int BUCKET_START_ROW = 3; \n+const int BUCKET_START_ROW = 2; \n \n // number of buckets to divide image to. # buckets = BUCKET_DIVISOR*BUCKET_DIVISOR \n const int BUCKET_DIVISOR = 15;\n \n"
                }
            ],
            "date": 1648673157626,
            "name": "Commit-0",
            "content": "#ifndef FEATURE_H\n#define FEATURE_H\n\n#include \"opencv2/video/tracking.hpp\"\n#include \"opencv2/imgproc/imgproc.hpp\"\n#include \"opencv2/highgui/highgui.hpp\"\n#include \"opencv2/features2d/features2d.hpp\"\n#include \"opencv2/xfeatures2d.hpp\"\n#include \"opencv2/calib3d/calib3d.hpp\"\n\n#if USE_CUDA\n  #include <opencv2/cudaoptflow.hpp>\n  #include <opencv2/cudaimgproc.hpp>\n  #include <opencv2/cudaarithm.hpp>\n  #include <opencv2/cudalegacy.hpp>\n#endif\n\n#include <iostream>\n#include <ctype.h>\n#include <algorithm>\n#include <iterator>\n#include <vector>\n#include <ctime>\n#include <sstream>\n#include <fstream>\n#include <string>\n\n#include <utils.h>\n\nstruct FeatureSet {\n    std::vector<cv::Point2f>  points;\n    std::vector<int>  ages;\n    std::vector<int>  strengths;\n\n    int size(){\n        return points.size();\n    }\n    void clear(){\n        points.clear();\n        ages.clear();\n        strengths.clear();\n    }\n };\n\n// how many of the top rows of buckets to ignore of the image\nconst int BUCKET_START_ROW = 3; \n\n// number of buckets to divide image to. # buckets = BUCKET_DIVISOR*BUCKET_DIVISOR \nconst int BUCKET_DIVISOR = 15;\n\n// maximum number of features inside a bucket \nconst int FEATURES_PER_BUCKET = 4; // TODO PARAM\n\n// fast feature corner threshold\nconst int FAST_THRESHOLD = 20;\n\n// feature age threshold\nconst int AGE_THRESHOLD = 10;\n\nvoid featureDetectionFast(cv::Mat image, std::vector<cv::Point2f>& points, std::vector<float>& response_strengths);\n\nvoid featureDetectionGoodFeaturesToTrack(cv::Mat image, std::vector<cv::Point2f>& points);\n\nvoid featureTracking(cv::Mat img_1, cv::Mat img_2, std::vector<cv::Point2f>& points1, std::vector<cv::Point2f>& points2, std::vector<uchar>& status);\n\nvoid deleteUnmatchFeaturesCircle(std::vector<cv::Point2f>& points0, std::vector<cv::Point2f>& points1,\n                          std::vector<cv::Point2f>& points2, std::vector<cv::Point2f>& points3,\n                          std::vector<cv::Point2f>& points0_return,\n                          std::vector<uchar>& status0, std::vector<uchar>& status1,\n                          std::vector<uchar>& status2, std::vector<uchar>& status3,\n                          FeatureSet & current_features);\n\nvoid circularMatching(cv::Mat img_l_0, cv::Mat img_r_0, cv::Mat img_l_1, cv::Mat img_r_1,\n                      std::vector<cv::Point2f>& points_l_0, std::vector<cv::Point2f>& points_r_0,\n                      std::vector<cv::Point2f>& points_l_1, std::vector<cv::Point2f>& points_r_1,\n                      std::vector<cv::Point2f>& points_l_0_return,\n                      FeatureSet& current_features);\n\n#if USE_CUDA\n  void circularMatching_gpu(cv::Mat img_l_0, cv::Mat img_r_0, cv::Mat img_l_1, cv::Mat img_r_1,\n                        std::vector<cv::Point2f>& points_l_0, std::vector<cv::Point2f>& points_r_0,\n                        std::vector<cv::Point2f>& points_l_1, std::vector<cv::Point2f>& points_r_1,\n                        std::vector<cv::Point2f>& points_l_0_return,\n                        FeatureSet& current_features);\n#endif\n\nvoid bucketingFeatures(const cv::Mat& image, FeatureSet& current_features, int bucket_size, int features_per_bucket);\n\nvoid appendNewFeatures(const cv::Mat& image, FeatureSet& current_features);\n\nvoid appendNewFeatures(std::vector<cv::Point2f> points_new, FeatureSet& current_features);\n\nvoid displayTracking(const cv::Mat& imageLeft_t1, \n                     const std::vector<cv::Point2f>&  pointsLeft_t0,\n                     const std::vector<cv::Point2f>&  pointsLeft_t1);\n\nvoid displayPoints(const cv::Mat& image, const std::vector<cv::Point2f>&  points); \n\nvoid displayTwoImages(const cv::Mat& image1, const cv::Mat& image2);\n\n#endif\n"
        }
    ]
}
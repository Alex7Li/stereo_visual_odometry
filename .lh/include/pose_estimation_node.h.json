{
    "sourceFile": "include/pose_estimation_node.h",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1648603065687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1648603071273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,13 +34,13 @@\n #include \"vo.h\"\n #include <math.h>\n \n // How much the wheel encoder model translated\n-Eigen::Matrix<double,3,1> encoders_translation(3);\n-Eigen::Matrix<double,3,1> vo_translation(3);\n-Eigen::Matrix<double,3,1> global_pos(3);\n-Eigen::Quaternion<double> vo_rot;\n-Eigen::Quaternion<double> current_rot;\n+// Eigen::Matrix<double,3,1> encoders_translation(3);\n+// Eigen::Matrix<double,3,1> vo_translation(3);\n+// Eigen::Matrix<double,3,1> global_pos(3);\n+// Eigen::Quaternion<double> vo_rot;\n+// Eigen::Quaternion<double> current_rot;\n \n // camera to imu frame, wxyz\n \n // Note: eigen is w x y z and tf is x y z w\n"
                },
                {
                    "date": 1648603097888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,18 +49,18 @@\n \tpublic:\n \n \t\tPoseEstimator(cv::Mat projMatrl_, cv::Mat projMatrr_);\n \n-\t\tcv::Mat rosImage2CvMat(const sensor_msgs::ImageConstPtr img);\n+\t\t// cv::Mat rosImage2CvMat(const sensor_msgs::ImageConstPtr img);\n \n \t\t// stereo pair callback\n-\t\tvoid stereo_callback(const sensor_msgs::ImageConstPtr& image_left, const sensor_msgs::ImageConstPtr& image_right);\n+\t\tvoid stereo_callback(const cv::Mat& image_left, const cv::Mat& image_right);\n \n \t\t// orientation callback\n-\t\tvoid quat_callback(const::geometry_msgs::Quaternion::ConstPtr& msg);\n+\t\t// void quat_callback(const::geometry_msgs::Quaternion::ConstPtr& msg);\n \n \t\t// wheel encoding callback\n-\t\tvoid encoders_callback(const std_msgs::Int32MultiArray::ConstPtr& msg);\n+\t\t// void encoders_callback(const std_msgs::Int32MultiArray::ConstPtr& msg);\n \n \t\t// greyscale conversion\n \t\tvoid to_greyscale(const cv::Mat &img_color, cv::Mat &img_grey);\n \n@@ -74,9 +74,9 @@\n \t\t// mode of operation\n \t\tbool use_vo;\n \n \t\t// ros node handle pointer\n-\t\tros::Publisher * pub_ptr;\t\t\t\n+\t\t// ros::Publisher * pub_ptr;\t\t\t\n \n \tprivate:\n \n \t\tint frame_id = 0;\n"
                },
                {
                    "date": 1648604372979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n \t\tcv::Mat imageRight_t0,  imageLeft_t0;\n \t\tcv::Mat imageRight_t1,  imageLeft_t1;\n \n \t\t// number of features sufficient for VO\n-\t\tconst int features_threshold = 60;\n+\t\tconst int features_threshold = 30;\n \n \t\t// set of features currently tracked\n \t\tFeatureSet currentVOFeatures;\n \n@@ -112,7 +112,7 @@\n \t\tconst double R = 0.1016;\n \t\tconst double ticks_per_m = 1316/(M_PI*2*R);\n \n \t\t// Camera body transformation\n-\t\tconst Eigen::Quaternion<double> q_bc = {0.3995,-0.5834,0.5834,-0.3995};\n+\t\t// const Eigen::Quaternion<double> q_bc = {0.3995,-0.5834,0.5834,-0.3995};\n \n };\n"
                },
                {
                    "date": 1648604518328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n \n \t\t// cv::Mat rosImage2CvMat(const sensor_msgs::ImageConstPtr img);\n \n \t\t// stereo pair callback\n-\t\tvoid stereo_callback(const cv::Mat& image_left, const cv::Mat& image_right);\n+\t\tstd::pair<double, double> stereo_callback(const cv::Mat& image_left, const cv::Mat& image_right);\n \n \t\t// orientation callback\n \t\t// void quat_callback(const::geometry_msgs::Quaternion::ConstPtr& msg);\n \n"
                },
                {
                    "date": 1648604528109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n \t\t// greyscale conversion\n \t\tvoid to_greyscale(const cv::Mat &img_color, cv::Mat &img_grey);\n \n \t\t// runs the pipeline\n-\t\tvoid run();\n+\t\tstd::pair<double, double> run();\n \n \t\t// logging \n \t\tbool logging_path;\n \t\tstd::ofstream output_file;\n"
                },
                {
                    "date": 1648686230407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n \n \t\t// cv::Mat rosImage2CvMat(const sensor_msgs::ImageConstPtr img);\n \n \t\t// stereo pair callback\n-\t\tstd::pair<double, double> stereo_callback(const cv::Mat& image_left, const cv::Mat& image_right);\n+\t\tstd::pair<cv::Mat, cv::Mat> stereo_callback(const cv::Mat& image_left, const cv::Mat& image_right);\n \n \t\t// orientation callback\n \t\t// void quat_callback(const::geometry_msgs::Quaternion::ConstPtr& msg);\n \n@@ -64,9 +64,9 @@\n \t\t// greyscale conversion\n \t\tvoid to_greyscale(const cv::Mat &img_color, cv::Mat &img_grey);\n \n \t\t// runs the pipeline\n-\t\tstd::pair<double, double> run();\n+\t\tstd::pair<cv::Mat, cv::Mat> run();\n \n \t\t// logging \n \t\tbool logging_path;\n \t\tstd::ofstream output_file;\n"
                }
            ],
            "date": 1648603065687,
            "name": "Commit-0",
            "content": "// #include \"ros/ros.h\"\n// #include \"sensor_msgs/Image.h\"\n// #include \"std_msgs/Int32MultiArray.h\"\n// #include \"nav_msgs/Odometry.h\"\n// #include \"geometry_msgs/Quaternion.h\"\n// #include <tf/transform_broadcaster.h>\n// #include <message_filters/subscriber.h>\n// #include <message_filters/synchronizer.h>\n// #include <message_filters/sync_policies/approximate_time.h>\n// #include <cv_bridge/cv_bridge.h>\n#include \"opencv2/video/tracking.hpp\"\n#include \"opencv2/imgproc/imgproc.hpp\"\n#include \"opencv2/highgui/highgui.hpp\"\n#include \"opencv2/features2d/features2d.hpp\"\n#include \"opencv2/calib3d/calib3d.hpp\"\n\n// #include <eigen3/Eigen/Dense>\n// #include <eigen3/Eigen/Core>\n// #include <eigen3/Eigen/Geometry> \n\n#include <iostream>\n#include <ctype.h>\n#include <algorithm>\n#include <iterator>\n#include <vector>\n#include <ctime>\n#include <sstream>\n#include <fstream>\n#include <string>\n#include <chrono>\n\n#include \"feature.h\"\n#include \"utils.h\"\n#include \"vo.h\"\n#include <math.h>\n\n// How much the wheel encoder model translated\nEigen::Matrix<double,3,1> encoders_translation(3);\nEigen::Matrix<double,3,1> vo_translation(3);\nEigen::Matrix<double,3,1> global_pos(3);\nEigen::Quaternion<double> vo_rot;\nEigen::Quaternion<double> current_rot;\n\n// camera to imu frame, wxyz\n\n// Note: eigen is w x y z and tf is x y z w\nclass PoseEstimator\n{\n\tpublic:\n\n\t\tPoseEstimator(cv::Mat projMatrl_, cv::Mat projMatrr_);\n\n\t\tcv::Mat rosImage2CvMat(const sensor_msgs::ImageConstPtr img);\n\n\t\t// stereo pair callback\n\t\tvoid stereo_callback(const sensor_msgs::ImageConstPtr& image_left, const sensor_msgs::ImageConstPtr& image_right);\n\n\t\t// orientation callback\n\t\tvoid quat_callback(const::geometry_msgs::Quaternion::ConstPtr& msg);\n\n\t\t// wheel encoding callback\n\t\tvoid encoders_callback(const std_msgs::Int32MultiArray::ConstPtr& msg);\n\n\t\t// greyscale conversion\n\t\tvoid to_greyscale(const cv::Mat &img_color, cv::Mat &img_grey);\n\n\t\t// runs the pipeline\n\t\tvoid run();\n\n\t\t// logging \n\t\tbool logging_path;\n\t\tstd::ofstream output_file;\n\n\t\t// mode of operation\n\t\tbool use_vo;\n\n\t\t// ros node handle pointer\n\t\tros::Publisher * pub_ptr;\t\t\t\n\n\tprivate:\n\n\t\tint frame_id = 0;\n\n\t\t// projection matrices for camera\n\t\tcv::Mat projMatrl, projMatrr;\n\n\t\t// images of current and next time step\n\t\tcv::Mat imageRight_t0,  imageLeft_t0;\n\t\tcv::Mat imageRight_t1,  imageLeft_t1;\n\n\t\t// number of features sufficient for VO\n\t\tconst int features_threshold = 60;\n\n\t\t// set of features currently tracked\n\t\tFeatureSet currentVOFeatures;\n\n\t\t// initial pose variables\n\t\tcv::Mat rotation = cv::Mat::eye(3, 3, CV_64F);\n\t\tcv::Mat translation = cv::Mat::zeros(3, 1, CV_64F);\n\t\tcv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n\t\tcv::Mat rotation_rodrigues = cv::Mat::zeros(3, 1, CV_64F);\n\n\t\t// for post processing\n\t\t// cv::Mat trajectory = cv::Mat::zeros(600, 1200, CV_8UC3);\n\n\t\t// wheel encoders\n\t\tbool first_time_enc = true;\n\t\tbool orientation_init = false;\n\t\tint ticks_l_prev = 0;\n\t\tint ticks_r_prev = 0;\n\t\tconst double L = 0.5842;\n\t\tconst double R = 0.1016;\n\t\tconst double ticks_per_m = 1316/(M_PI*2*R);\n\n\t\t// Camera body transformation\n\t\tconst Eigen::Quaternion<double> q_bc = {0.3995,-0.5834,0.5834,-0.3995};\n\n};\n"
        }
    ]
}
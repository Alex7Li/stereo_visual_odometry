{
    "sourceFile": "src/feature_set.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 42,
            "patches": [
                {
                    "date": 1645284029134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1645284035039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,48 +1,48 @@\n #include \"stereo_visual_odometry/vo.h\"\n \n-  void bucketingFeatures(cv::Mat & image, FeatureSet & current_features,\n-                         int bucket_size, int features_per_bucket) {\n-    int image_height = image.rows;\n-    int image_width = image.cols;\n-    int buckets_nums_height = image_height / bucket_size;\n-    int buckets_nums_width = image_width / bucket_size;\n-    int buckets_number = buckets_nums_height * buckets_nums_width;\n+void bucketingFeatures(cv::Mat & image, FeatureSet & current_features,\n+                        int bucket_size, int features_per_bucket) {\n+  int image_height = image.rows;\n+  int image_width = image.cols;\n+  int buckets_nums_height = image_height / bucket_size;\n+  int buckets_nums_width = image_width / bucket_size;\n+  int buckets_number = buckets_nums_height * buckets_nums_width;\n \n-    std::vector<Bucket> Buckets;\n+  std::vector<Bucket> Buckets;\n \n-    // initialize all the buckets\n-    for (int buckets_idx_height = 0; buckets_idx_height <= buckets_nums_height;\n-         buckets_idx_height++) {\n-      for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width;\n-           buckets_idx_width++) {\n-        Buckets.push_back(Bucket(features_per_bucket));\n-      }\n+  // initialize all the buckets\n+  for (int buckets_idx_height = 0; buckets_idx_height <= buckets_nums_height;\n+        buckets_idx_height++) {\n+    for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width;\n+          buckets_idx_width++) {\n+      Buckets.push_back(Bucket(features_per_bucket));\n     }\n+  }\n \n-    // bucket all current features into buckets by their location\n-    int buckets_nums_height_idx, buckets_nums_width_idx, buckets_idx;\n-    for (int i = 0; i < current_features.points.size(); ++i) {\n-      buckets_nums_height_idx = current_features.points[i].y / bucket_size;\n-      buckets_nums_width_idx = current_features.points[i].x / bucket_size;\n+  // bucket all current features into buckets by their location\n+  int buckets_nums_height_idx, buckets_nums_width_idx, buckets_idx;\n+  for (int i = 0; i < current_features.points.size(); ++i) {\n+    buckets_nums_height_idx = current_features.points[i].y / bucket_size;\n+    buckets_nums_width_idx = current_features.points[i].x / bucket_size;\n+    buckets_idx =\n+        buckets_nums_height_idx * buckets_nums_width + buckets_nums_width_idx;\n+    Buckets[buckets_idx].add_feature(current_features.points[i],\n+                                      current_features.ages[i]);\n+  }\n+\n+  // get features back from buckets\n+  current_features.clear();\n+  for (int buckets_idx_height = 0; buckets_idx_height <= buckets_nums_height;\n+        buckets_idx_height++) {\n+    for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width;\n+          buckets_idx_width++) {\n       buckets_idx =\n-          buckets_nums_height_idx * buckets_nums_width + buckets_nums_width_idx;\n-      Buckets[buckets_idx].add_feature(current_features.points[i],\n-                                       current_features.ages[i]);\n+          buckets_idx_height * buckets_nums_width + buckets_idx_width;\n+      Buckets[buckets_idx].get_features(current_features);\n     }\n-\n-    // get features back from buckets\n-    current_features.clear();\n-    for (int buckets_idx_height = 0; buckets_idx_height <= buckets_nums_height;\n-         buckets_idx_height++) {\n-      for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width;\n-           buckets_idx_width++) {\n-        buckets_idx =\n-            buckets_idx_height * buckets_nums_width + buckets_idx_width;\n-        Buckets[buckets_idx].get_features(current_features);\n-      }\n-    }\n   }\n+}\n Bucket::Bucket(int size) { max_size = size; }\n \n int Bucket::size() { return features.points.size(); }\n \n"
                },
                {
                    "date": 1645284045766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n #include \"stereo_visual_odometry/vo.h\"\n \n-void bucketingFeatures(cv::Mat & image, FeatureSet & current_features,\n+void FeatureSet::bucketingFeatures(cv::Mat & image, FeatureSet & current_features,\n                         int bucket_size, int features_per_bucket) {\n   int image_height = image.rows;\n   int image_width = image.cols;\n   int buckets_nums_height = image_height / bucket_size;\n"
                },
                {
                    "date": 1645284062612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n #include \"stereo_visual_odometry/vo.h\"\n \n-void FeatureSet::bucketingFeatures(cv::Mat & image, FeatureSet & current_features,\n+void FeatureSet::bucketingFeatures(cv::Mat & image,\n                         int bucket_size, int features_per_bucket) {\n   int image_height = image.rows;\n   int image_width = image.cols;\n   int buckets_nums_height = image_height / bucket_size;\n@@ -21,10 +21,10 @@\n \n   // bucket all current features into buckets by their location\n   int buckets_nums_height_idx, buckets_nums_width_idx, buckets_idx;\n   for (int i = 0; i < current_features.points.size(); ++i) {\n-    buckets_nums_height_idx = current_features.points[i].y / bucket_size;\n-    buckets_nums_width_idx = current_features.points[i].x / bucket_size;\n+    buckets_nums_height_idx = points[i].y / bucket_size;\n+    buckets_nums_width_idx = points[i].x / bucket_size;\n     buckets_idx =\n         buckets_nums_height_idx * buckets_nums_width + buckets_nums_width_idx;\n     Buckets[buckets_idx].add_feature(current_features.points[i],\n                                       current_features.ages[i]);\n"
                },
                {
                    "date": 1645284138568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,10 @@\n                                       current_features.ages[i]);\n   }\n \n   // get features back from buckets\n-  current_features.clear();\n+  points.clear();\n+  ages.clear();\n   for (int buckets_idx_height = 0; buckets_idx_height <= buckets_nums_height;\n         buckets_idx_height++) {\n     for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width;\n           buckets_idx_width++) {\n"
                },
                {
                    "date": 1645284144867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,11 +29,12 @@\n     Buckets[buckets_idx].add_feature(current_features.points[i],\n                                       current_features.ages[i]);\n   }\n \n-  // get features back from buckets\n   points.clear();\n   ages.clear();\n+\n+  \n   for (int buckets_idx_height = 0; buckets_idx_height <= buckets_nums_height;\n         buckets_idx_height++) {\n     for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width;\n           buckets_idx_width++) {\n"
                },
                {
                    "date": 1645284189977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,13 @@\n #include \"stereo_visual_odometry/vo.h\"\n \n+void FeatureSet::insert_all(FeatureSet &current_features) {\n+  current_features.points.insert(current_features.points.end(),\n+                                 features.points.begin(),\n+                                 features.points.end());\n+  current_features.ages.insert(current_features.ages.end(),\n+                               features.ages.begin(), features.ages.end());\n+}\n void FeatureSet::bucketingFeatures(cv::Mat & image,\n                         int bucket_size, int features_per_bucket) {\n   int image_height = image.rows;\n   int image_width = image.cols;\n@@ -32,9 +39,9 @@\n \n   points.clear();\n   ages.clear();\n \n-  \n+\n   for (int buckets_idx_height = 0; buckets_idx_height <= buckets_nums_height;\n         buckets_idx_height++) {\n     for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width;\n           buckets_idx_width++) {\n@@ -73,13 +80,6 @@\n     }\n   }\n }\n \n-void Bucket::get_features(FeatureSet &current_features) {\n-  current_features.points.insert(current_features.points.end(),\n-                                 features.points.begin(),\n-                                 features.points.end());\n-  current_features.ages.insert(current_features.ages.end(),\n-                               features.ages.begin(), features.ages.end());\n-}\n \n Bucket::~Bucket() {}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1645284195968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n #include \"stereo_visual_odometry/vo.h\"\n \n-void FeatureSet::insert_all(FeatureSet &current_features) {\n+void FeatureSet::insert_features(FeatureSet &current_features) {\n   current_features.points.insert(current_features.points.end(),\n                                  features.points.begin(),\n                                  features.points.end());\n   current_features.ages.insert(current_features.ages.end(),\n"
                },
                {
                    "date": 1645284214603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n #include \"stereo_visual_odometry/vo.h\"\n-\n-void FeatureSet::insert_features(FeatureSet &current_features) {\n+// TODO\n+void FeatureSet::insert_features(FeatureSet &features) {\n   current_features.points.insert(current_features.points.end(),\n                                  features.points.begin(),\n                                  features.points.end());\n   current_features.ages.insert(current_features.ages.end(),\n"
                },
                {
                    "date": 1645288164464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,47 @@\n #include \"stereo_visual_odometry/vo.h\"\n+\n+Bucket::Bucket(int size) { max_size = size; }\n+\n+int Bucket::size() { return features.points.size(); }\n+\n+void Bucket::add_feature(cv::Point2f point, int age) {\n+  // Don't add sufficently old Features\n+  if (age < Bucket::AGE_THRESHOLD) {\n+    // Insert any feature before bucket is full.\n+    if (size() < max_size) {\n+      features.points.push_back(point);\n+      features.ages.push_back(age);\n+    } else {\n+      // TODO: Isn't this backwards? Don't we want to remove the\n+      // oldest feature? ~ Alex\n+      // Insert feature with old age and remove youngest one.\n+      int age_min = features.ages[0];\n+      int age_min_idx = 0;\n+\n+      for (int i = 0; i < size(); i++) {\n+        if (age < age_min) {\n+          age_min = age;\n+          age_min_idx = i;\n+        }\n+      }\n+      features.points[age_min_idx] = point;\n+      features.ages[age_min_idx] = age;\n+    }\n+  }\n+}\n+\n+\n+Bucket::~Bucket() {}\n // TODO\n void FeatureSet::insert_features(FeatureSet &features) {\n   current_features.points.insert(current_features.points.end(),\n                                  features.points.begin(),\n                                  features.points.end());\n   current_features.ages.insert(current_features.ages.end(),\n                                features.ages.begin(), features.ages.end());\n }\n+\n void FeatureSet::bucketingFeatures(cv::Mat & image,\n                         int bucket_size, int features_per_bucket) {\n   int image_height = image.rows;\n   int image_width = image.cols;\n@@ -49,37 +83,5 @@\n           buckets_idx_height * buckets_nums_width + buckets_idx_width;\n       Buckets[buckets_idx].get_features(current_features);\n     }\n   }\n-}\n-Bucket::Bucket(int size) { max_size = size; }\n-\n-int Bucket::size() { return features.points.size(); }\n-\n-void Bucket::add_feature(cv::Point2f point, int age) {\n-  // Don't add sufficently old Features\n-  if (age < Bucket::AGE_THRESHOLD) {\n-    // Insert any feature before bucket is full.\n-    if (size() < max_size) {\n-      features.points.push_back(point);\n-      features.ages.push_back(age);\n-    } else {\n-      // TODO: Isn't this backwards? Don't we want to remove the\n-      // oldest feature? ~ Alex\n-      // Insert feature with old age and remove youngest one.\n-      int age_min = features.ages[0];\n-      int age_min_idx = 0;\n-\n-      for (int i = 0; i < size(); i++) {\n-        if (age < age_min) {\n-          age_min = age;\n-          age_min_idx = i;\n-        }\n-      }\n-      features.points[age_min_idx] = point;\n-      features.ages[age_min_idx] = age;\n-    }\n-  }\n-}\n-\n-\n-Bucket::~Bucket() {}\n\\ No newline at end of file\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1645288178665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n #include \"stereo_visual_odometry/vo.h\"\n \n Bucket::Bucket(int size) { max_size = size; }\n \n+Bucket::~Bucket() {}\n+\n int Bucket::size() { return features.points.size(); }\n \n void Bucket::add_feature(cv::Point2f point, int age) {\n   // Don't add sufficently old Features\n@@ -30,10 +32,8 @@\n   }\n }\n \n \n-Bucket::~Bucket() {}\n-// TODO\n void FeatureSet::insert_features(FeatureSet &features) {\n   current_features.points.insert(current_features.points.end(),\n                                  features.points.begin(),\n                                  features.points.end());\n"
                },
                {
                    "date": 1645288253708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,8 @@\n     }\n   }\n }\n \n-\n void FeatureSet::insert_features(FeatureSet &features) {\n   current_features.points.insert(current_features.points.end(),\n                                  features.points.begin(),\n                                  features.points.end());\n"
                },
                {
                    "date": 1645288434221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,8 +79,8 @@\n     for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width;\n           buckets_idx_width++) {\n       buckets_idx =\n           buckets_idx_height * buckets_nums_width + buckets_idx_width;\n-      Buckets[buckets_idx].get_features(current_features);\n+      current_features.get_features(Bucket[bucket_idx].features);\n     }\n   }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1645288452413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,17 +30,8 @@\n       features.ages[age_min_idx] = age;\n     }\n   }\n }\n-\n-void FeatureSet::insert_features(FeatureSet &features) {\n-  current_features.points.insert(current_features.points.end(),\n-                                 features.points.begin(),\n-                                 features.points.end());\n-  current_features.ages.insert(current_features.ages.end(),\n-                               features.ages.begin(), features.ages.end());\n-}\n-\n void FeatureSet::bucketingFeatures(cv::Mat & image,\n                         int bucket_size, int features_per_bucket) {\n   int image_height = image.rows;\n   int image_width = image.cols;\n"
                },
                {
                    "date": 1645288473799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n       features.ages[age_min_idx] = age;\n     }\n   }\n }\n+\n void FeatureSet::bucketingFeatures(cv::Mat & image,\n                         int bucket_size, int features_per_bucket) {\n   int image_height = image.rows;\n   int image_width = image.cols;\n@@ -51,15 +52,14 @@\n   }\n \n   // bucket all current features into buckets by their location\n   int buckets_nums_height_idx, buckets_nums_width_idx, buckets_idx;\n-  for (int i = 0; i < current_features.points.size(); ++i) {\n+  for (int i = 0; i < points.size(); ++i) {\n     buckets_nums_height_idx = points[i].y / bucket_size;\n     buckets_nums_width_idx = points[i].x / bucket_size;\n     buckets_idx =\n         buckets_nums_height_idx * buckets_nums_width + buckets_nums_width_idx;\n-    Buckets[buckets_idx].add_feature(current_features.points[i],\n-                                      current_features.ages[i]);\n+    Buckets[buckets_idx].add_feature(points[i], ages[i]);\n   }\n \n   points.clear();\n   ages.clear();\n"
                },
                {
                    "date": 1645288539492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,8 +70,12 @@\n     for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width;\n           buckets_idx_width++) {\n       buckets_idx =\n           buckets_idx_height * buckets_nums_width + buckets_idx_width;\n-      current_features.get_features(Bucket[bucket_idx].features);\n+      points.insert(points.end(),\n+                                 features.points.begin(),\n+                                 features.points.end());\n+      ages.insert(ages.end(),\n+                               features.ages.begin(), features.ages.end());\n     }\n   }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1645288547726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,12 +70,9 @@\n     for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width;\n           buckets_idx_width++) {\n       buckets_idx =\n           buckets_idx_height * buckets_nums_width + buckets_idx_width;\n-      points.insert(points.end(),\n-                                 features.points.begin(),\n-                                 features.points.end());\n-      ages.insert(ages.end(),\n-                               features.ages.begin(), features.ages.end());\n-    }\n+      points.insert(points.end(), features.points.begin(), features.points.end());\n+      ages.insert(ages.end(), features.ages.begin(), features.ages.end());\n+      }\n   }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1645288574952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,8 +70,9 @@\n     for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width;\n           buckets_idx_width++) {\n       buckets_idx =\n           buckets_idx_height * buckets_nums_width + buckets_idx_width;\n+      bucket = buckets[buckets_idx];\n       points.insert(points.end(), features.points.begin(), features.points.end());\n       ages.insert(ages.end(), features.ages.begin(), features.ages.end());\n       }\n   }\n"
                },
                {
                    "date": 1645288587749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n   int buckets_nums_height = image_height / bucket_size;\n   int buckets_nums_width = image_width / bucket_size;\n   int buckets_number = buckets_nums_height * buckets_nums_width;\n \n-  std::vector<Bucket> Buckets;\n+  std::vector<Bucket> buckets;\n \n   // initialize all the buckets\n   for (int buckets_idx_height = 0; buckets_idx_height <= buckets_nums_height;\n         buckets_idx_height++) {\n"
                },
                {
                    "date": 1645288622345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n   for (int buckets_idx_height = 0; buckets_idx_height <= buckets_nums_height;\n         buckets_idx_height++) {\n     for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width;\n           buckets_idx_width++) {\n-      Buckets.push_back(Bucket(features_per_bucket));\n+      buckets.push_back(Bucket(features_per_bucket));\n     }\n   }\n \n   // bucket all current features into buckets by their location\n@@ -57,9 +57,9 @@\n     buckets_nums_height_idx = points[i].y / bucket_size;\n     buckets_nums_width_idx = points[i].x / bucket_size;\n     buckets_idx =\n         buckets_nums_height_idx * buckets_nums_width + buckets_nums_width_idx;\n-    Buckets[buckets_idx].add_feature(points[i], ages[i]);\n+    buckets[buckets_idx].add_feature(points[i], ages[i]);\n   }\n \n   points.clear();\n   ages.clear();\n"
                },
                {
                    "date": 1645288690842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     }\n   }\n }\n \n-void FeatureSet::bucketingFeatures(cv::Mat & image,\n+void FeatureSet::filterByBucket(cv::Mat & image,\n                         int bucket_size, int features_per_bucket) {\n   int image_height = image.rows;\n   int image_width = image.cols;\n   int buckets_nums_height = image_height / bucket_size;\n"
                },
                {
                    "date": 1645289001370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     }\n   }\n }\n \n-void FeatureSet::filterByBucket(cv::Mat & image,\n+void FeatureSet::filterByBucketLocation(cv::Mat & image,\n                         int bucket_size, int features_per_bucket) {\n   int image_height = image.rows;\n   int image_width = image.cols;\n   int buckets_nums_height = image_height / bucket_size;\n"
                },
                {
                    "date": 1645289006873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n int Bucket::size() { return features.points.size(); }\n \n void Bucket::add_feature(cv::Point2f point, int age) {\n   // Don't add sufficently old Features\n-  if (age < Bucket::AGE_THRESHOLD) {\n+  if (age < AGE_THRESHOLD) {\n     // Insert any feature before bucket is full.\n     if (size() < max_size) {\n       features.points.push_back(point);\n       features.ages.push_back(age);\n"
                },
                {
                    "date": 1645289708361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,5 +75,15 @@\n       points.insert(points.end(), features.points.begin(), features.points.end());\n       ages.insert(ages.end(), features.ages.begin(), features.ages.end());\n       }\n   }\n-}\n\\ No newline at end of file\n+}\n+\n+  void appendNewFeatures(cv::Mat & image, FeatureSet & current_features) {\n+    std::vector<cv::Point2f> points_new;\n+    featureDetectionFast(image, points_new);\n+    current_features.points.insert(current_features.points.end(),\n+                                   points_new.begin(), points_new.end());\n+    std::vector<int> ages_new(points_new.size(), 0);\n+    current_features.ages.insert(current_features.ages.end(), ages_new.begin(),\n+                                 ages_new.end());\n+  }\n"
                },
                {
                    "date": 1645289713629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,13 +77,13 @@\n       }\n   }\n }\n \n-  void appendNewFeatures(cv::Mat & image, FeatureSet & current_features) {\n-    std::vector<cv::Point2f> points_new;\n-    featureDetectionFast(image, points_new);\n-    current_features.points.insert(current_features.points.end(),\n-                                   points_new.begin(), points_new.end());\n-    std::vector<int> ages_new(points_new.size(), 0);\n-    current_features.ages.insert(current_features.ages.end(), ages_new.begin(),\n-                                 ages_new.end());\n-  }\n+void appendNewFeatures(cv::Mat & image, FeatureSet & current_features) {\n+  std::vector<cv::Point2f> points_new;\n+  featureDetectionFast(image, points_new);\n+  current_features.points.insert(current_features.points.end(),\n+                                  points_new.begin(), points_new.end());\n+  std::vector<int> ages_new(points_new.size(), 0);\n+  current_features.ages.insert(current_features.ages.end(), ages_new.begin(),\n+                                ages_new.end());\n+}\n"
                },
                {
                    "date": 1645289721647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n       }\n   }\n }\n \n-void appendNewFeatures(cv::Mat & image, FeatureSet & current_features) {\n+void FeatureSet::appendNewFeatures(cv::Mat & image, FeatureSet & current_features) {\n   std::vector<cv::Point2f> points_new;\n   featureDetectionFast(image, points_new);\n   current_features.points.insert(current_features.points.end(),\n                                   points_new.begin(), points_new.end());\n"
                },
                {
                    "date": 1645289747218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,13 +77,13 @@\n       }\n   }\n }\n \n-void FeatureSet::appendNewFeatures(cv::Mat & image, FeatureSet & current_features) {\n+void FeatureSet::appendNewFeatures(cv::Mat & image) {\n   std::vector<cv::Point2f> points_new;\n   featureDetectionFast(image, points_new);\n-  current_features.points.insert(current_features.points.end(),\n+  points.insert(points.end(),\n                                   points_new.begin(), points_new.end());\n   std::vector<int> ages_new(points_new.size(), 0);\n-  current_features.ages.insert(current_features.ages.end(), ages_new.begin(),\n+  ages.insert(ages.end(), ages_new.begin(),\n                                 ages_new.end());\n }\n"
                },
                {
                    "date": 1645290169161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n Bucket::~Bucket() {}\n \n int Bucket::size() { return features.points.size(); }\n \n-void Bucket::add_feature(cv::Point2f point, int age) {\n+void Bucket::add_feature(const cv::Point2f point, const int age) {\n   // Don't add sufficently old Features\n   if (age < AGE_THRESHOLD) {\n     // Insert any feature before bucket is full.\n     if (size() < max_size) {\n@@ -80,10 +80,8 @@\n \n void FeatureSet::appendNewFeatures(cv::Mat & image) {\n   std::vector<cv::Point2f> points_new;\n   featureDetectionFast(image, points_new);\n-  points.insert(points.end(),\n-                                  points_new.begin(), points_new.end());\n+  points.insert(points.end(), points_new.begin(), points_new.end());\n   std::vector<int> ages_new(points_new.size(), 0);\n-  ages.insert(ages.end(), ages_new.begin(),\n-                                ages_new.end());\n+  ages.insert(ages.end(), ages_new.begin(), ages_new.end());\n }\n"
                },
                {
                    "date": 1645290181450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,10 @@\n     }\n   }\n }\n \n-void FeatureSet::filterByBucketLocation(cv::Mat & image,\n-                        int bucket_size, int features_per_bucket) {\n+void FeatureSet::filterByBucketLocation(const cv::Mat & image,\n+                        const int bucket_size, const int features_per_bucket) {\n   int image_height = image.rows;\n   int image_width = image.cols;\n   int buckets_nums_height = image_height / bucket_size;\n   int buckets_nums_width = image_width / bucket_size;\n"
                },
                {
                    "date": 1645290203646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,16 @@\n     }\n   }\n }\n \n+void FeatureSet::appendNewFeatures(const cv::Mat & image) {\n+  std::vector<cv::Point2f> points_new;\n+  featureDetectionFast(image, points_new);\n+  points.insert(points.end(), points_new.begin(), points_new.end());\n+  std::vector<int> ages_new(points_new.size(), 0);\n+  ages.insert(ages.end(), ages_new.begin(), ages_new.end());\n+}\n+\n void FeatureSet::filterByBucketLocation(const cv::Mat & image,\n                         const int bucket_size, const int features_per_bucket) {\n   int image_height = image.rows;\n   int image_width = image.cols;\n@@ -76,12 +84,4 @@\n       ages.insert(ages.end(), features.ages.begin(), features.ages.end());\n       }\n   }\n }\n-\n-void FeatureSet::appendNewFeatures(cv::Mat & image) {\n-  std::vector<cv::Point2f> points_new;\n-  featureDetectionFast(image, points_new);\n-  points.insert(points.end(), points_new.begin(), points_new.end());\n-  std::vector<int> ages_new(points_new.size(), 0);\n-  ages.insert(ages.end(), ages_new.begin(), ages_new.end());\n-}\n"
                },
                {
                    "date": 1645290215020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     }\n   }\n }\n \n-void FeatureSet::appendNewFeatures(const cv::Mat & image) {\n+void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new;\n   featureDetectionFast(image, points_new);\n   points.insert(points.end(), points_new.begin(), points_new.end());\n   std::vector<int> ages_new(points_new.size(), 0);\n"
                },
                {
                    "date": 1645290410483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,17 @@\n     }\n   }\n }\n \n+void featureDetectionFast(const cv::Mat image, std::vector<cv::Point2f> & points) {\n+  // uses FAST as for feature dection, modify parameters as necessary\n+  std::vector<cv::KeyPoint> keypoints;\n+  int fast_threshold = 20;\n+  bool nonmaxSuppression = true;\n+  cv::FAST(image, keypoints, fast_threshold, nonmaxSuppression);\n+  cv::KeyPoint::convert(keypoints, points, std::vector<int>());\n+}\n+\n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new;\n   featureDetectionFast(image, points_new);\n   points.insert(points.end(), points_new.begin(), points_new.end());\n"
                },
                {
                    "date": 1645290520803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     }\n   }\n }\n \n-void featureDetectionFast(const cv::Mat image, std::vector<cv::Point2f> & points) {\n+void FeatureSet::featureDetectionFast(const cv::Mat image, std::vector<cv::Point2f> & points) {\n   // uses FAST as for feature dection, modify parameters as necessary\n   std::vector<cv::KeyPoint> keypoints;\n   int fast_threshold = 20;\n   bool nonmaxSuppression = true;\n"
                },
                {
                    "date": 1645290553278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     }\n   }\n }\n \n-void FeatureSet::featureDetectionFast(const cv::Mat image, std::vector<cv::Point2f> & points) {\n+void featureDetectionFast(const cv::Mat image, std::vector<cv::Point2f> & points) {\n   // uses FAST as for feature dection, modify parameters as necessary\n   std::vector<cv::KeyPoint> keypoints;\n   int fast_threshold = 20;\n   bool nonmaxSuppression = true;\n"
                },
                {
                    "date": 1645290591784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,20 +31,20 @@\n     }\n   }\n }\n \n-void featureDetectionFast(const cv::Mat image, std::vector<cv::Point2f> & points) {\n+std::vector<cv::Point2f> featureDetectionFast(const cv::Mat image) {\n   // uses FAST as for feature dection, modify parameters as necessary\n   std::vector<cv::KeyPoint> keypoints;\n   int fast_threshold = 20;\n   bool nonmaxSuppression = true;\n   cv::FAST(image, keypoints, fast_threshold, nonmaxSuppression);\n   cv::KeyPoint::convert(keypoints, points, std::vector<int>());\n+  return points;\n }\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n-  std::vector<cv::Point2f> points_new;\n-  featureDetectionFast(image, points_new);\n+  std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n   points.insert(points.end(), points_new.begin(), points_new.end());\n   std::vector<int> ages_new(points_new.size(), 0);\n   ages.insert(ages.end(), ages_new.begin(), ages_new.end());\n }\n"
                },
                {
                    "date": 1645290605624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,9 @@\n }\n \n std::vector<cv::Point2f> featureDetectionFast(const cv::Mat image) {\n   // uses FAST as for feature dection, modify parameters as necessary\n+  std::vector<cv::Point2f> points;\n   std::vector<cv::KeyPoint> keypoints;\n   int fast_threshold = 20;\n   bool nonmaxSuppression = true;\n   cv::FAST(image, keypoints, fast_threshold, nonmaxSuppression);\n"
                },
                {
                    "date": 1645290734945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,8 @@\n   }\n }\n \n std::vector<cv::Point2f> featureDetectionFast(const cv::Mat image) {\n-  // uses FAST as for feature dection, modify parameters as necessary\n   std::vector<cv::Point2f> points;\n   std::vector<cv::KeyPoint> keypoints;\n   int fast_threshold = 20;\n   bool nonmaxSuppression = true;\n"
                },
                {
                    "date": 1645291667616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,14 +59,10 @@\n \n   std::vector<Bucket> buckets;\n \n   // initialize all the buckets\n-  for (int buckets_idx_height = 0; buckets_idx_height <= buckets_nums_height;\n-        buckets_idx_height++) {\n-    for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width;\n-          buckets_idx_width++) {\n-      buckets.push_back(Bucket(features_per_bucket));\n-    }\n+  for(int i = 0; i < bucket_nums_height * bucket_nums_width; i++){\n+    buckets.push_back(Bucket(features_per_bucket));\n   }\n \n   // bucket all current features into buckets by their location\n   int buckets_nums_height_idx, buckets_nums_width_idx, buckets_idx;\n"
                },
                {
                    "date": 1645291703154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,12 +56,12 @@\n   int buckets_nums_height = image_height / bucket_size;\n   int buckets_nums_width = image_width / bucket_size;\n   int buckets_number = buckets_nums_height * buckets_nums_width;\n \n-  std::vector<Bucket> buckets;\n+  std::vector<Bucket> buckets(bucket_nums_height * bucket_nums_width, Bucket(features_per_bucket));\n \n   // initialize all the buckets\n-  for(int i = 0; i < bucket_nums_height * bucket_nums_width; i++){\n+  for(int i = 0; i < ; i++){\n     buckets.push_back(Bucket(features_per_bucket));\n   }\n \n   // bucket all current features into buckets by their location\n"
                },
                {
                    "date": 1645291712703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,15 +56,11 @@\n   int buckets_nums_height = image_height / bucket_size;\n   int buckets_nums_width = image_width / bucket_size;\n   int buckets_number = buckets_nums_height * buckets_nums_width;\n \n-  std::vector<Bucket> buckets(bucket_nums_height * bucket_nums_width, Bucket(features_per_bucket));\n+  std::vector<Bucket> buckets(bucket_nums_height * bucket_nums_width,\n+  Bucket(features_per_bucket));\n \n-  // initialize all the buckets\n-  for(int i = 0; i < ; i++){\n-    buckets.push_back(Bucket(features_per_bucket));\n-  }\n-\n   // bucket all current features into buckets by their location\n   int buckets_nums_height_idx, buckets_nums_width_idx, buckets_idx;\n   for (int i = 0; i < points.size(); ++i) {\n     buckets_nums_height_idx = points[i].y / bucket_size;\n"
                },
                {
                    "date": 1645291761616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,16 +31,15 @@\n     }\n   }\n }\n \n-std::vector<cv::Point2f> featureDetectionFast(const cv::Mat image) {\n+void featureDetectionFast(const cv::Mat image, std::vector<cv::Point2f> points) {\n   std::vector<cv::Point2f> points;\n   std::vector<cv::KeyPoint> keypoints;\n   int fast_threshold = 20;\n   bool nonmaxSuppression = true;\n   cv::FAST(image, keypoints, fast_threshold, nonmaxSuppression);\n   cv::KeyPoint::convert(keypoints, points, std::vector<int>());\n-  return points;\n }\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n@@ -57,9 +56,9 @@\n   int buckets_nums_width = image_width / bucket_size;\n   int buckets_number = buckets_nums_height * buckets_nums_width;\n \n   std::vector<Bucket> buckets(bucket_nums_height * bucket_nums_width,\n-  Bucket(features_per_bucket));\n+                  Bucket(features_per_bucket));\n \n   // bucket all current features into buckets by their location\n   int buckets_nums_height_idx, buckets_nums_width_idx, buckets_idx;\n   for (int i = 0; i < points.size(); ++i) {\n"
                },
                {
                    "date": 1645291771777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,18 +32,17 @@\n   }\n }\n \n void featureDetectionFast(const cv::Mat image, std::vector<cv::Point2f> points) {\n-  std::vector<cv::Point2f> points;\n   std::vector<cv::KeyPoint> keypoints;\n   int fast_threshold = 20;\n   bool nonmaxSuppression = true;\n   cv::FAST(image, keypoints, fast_threshold, nonmaxSuppression);\n   cv::KeyPoint::convert(keypoints, points, std::vector<int>());\n }\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n-  std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n+  std::vector<cv::Point2f> points_new = featureDetectionFast(image, points);\n   points.insert(points.end(), points_new.begin(), points_new.end());\n   std::vector<int> ages_new(points_new.size(), 0);\n   ages.insert(ages.end(), ages_new.begin(), ages_new.end());\n }\n"
                },
                {
                    "date": 1645292252761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,18 +31,20 @@\n     }\n   }\n }\n \n-void featureDetectionFast(const cv::Mat image, std::vector<cv::Point2f> points) {\n+std::vector<cv::Point2f> featureDetectionFast(const cv::Mat image) {\n+  std::vector<cv::Point2f> points;\n   std::vector<cv::KeyPoint> keypoints;\n   int fast_threshold = 20;\n   bool nonmaxSuppression = true;\n   cv::FAST(image, keypoints, fast_threshold, nonmaxSuppression);\n   cv::KeyPoint::convert(keypoints, points, std::vector<int>());\n+  return points;\n }\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n-  std::vector<cv::Point2f> points_new = featureDetectionFast(image, points);\n+  std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n   points.insert(points.end(), points_new.begin(), points_new.end());\n   std::vector<int> ages_new(points_new.size(), 0);\n   ages.insert(ages.end(), ages_new.begin(), ages_new.end());\n }\n"
                }
            ],
            "date": 1645284029134,
            "name": "Commit-0",
            "content": "#include \"stereo_visual_odometry/vo.h\"\n\n  void bucketingFeatures(cv::Mat & image, FeatureSet & current_features,\n                         int bucket_size, int features_per_bucket) {\n    int image_height = image.rows;\n    int image_width = image.cols;\n    int buckets_nums_height = image_height / bucket_size;\n    int buckets_nums_width = image_width / bucket_size;\n    int buckets_number = buckets_nums_height * buckets_nums_width;\n\n    std::vector<Bucket> Buckets;\n\n    // initialize all the buckets\n    for (int buckets_idx_height = 0; buckets_idx_height <= buckets_nums_height;\n         buckets_idx_height++) {\n      for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width;\n           buckets_idx_width++) {\n        Buckets.push_back(Bucket(features_per_bucket));\n      }\n    }\n\n    // bucket all current features into buckets by their location\n    int buckets_nums_height_idx, buckets_nums_width_idx, buckets_idx;\n    for (int i = 0; i < current_features.points.size(); ++i) {\n      buckets_nums_height_idx = current_features.points[i].y / bucket_size;\n      buckets_nums_width_idx = current_features.points[i].x / bucket_size;\n      buckets_idx =\n          buckets_nums_height_idx * buckets_nums_width + buckets_nums_width_idx;\n      Buckets[buckets_idx].add_feature(current_features.points[i],\n                                       current_features.ages[i]);\n    }\n\n    // get features back from buckets\n    current_features.clear();\n    for (int buckets_idx_height = 0; buckets_idx_height <= buckets_nums_height;\n         buckets_idx_height++) {\n      for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width;\n           buckets_idx_width++) {\n        buckets_idx =\n            buckets_idx_height * buckets_nums_width + buckets_idx_width;\n        Buckets[buckets_idx].get_features(current_features);\n      }\n    }\n  }\nBucket::Bucket(int size) { max_size = size; }\n\nint Bucket::size() { return features.points.size(); }\n\nvoid Bucket::add_feature(cv::Point2f point, int age) {\n  // Don't add sufficently old Features\n  if (age < Bucket::AGE_THRESHOLD) {\n    // Insert any feature before bucket is full.\n    if (size() < max_size) {\n      features.points.push_back(point);\n      features.ages.push_back(age);\n    } else {\n      // TODO: Isn't this backwards? Don't we want to remove the\n      // oldest feature? ~ Alex\n      // Insert feature with old age and remove youngest one.\n      int age_min = features.ages[0];\n      int age_min_idx = 0;\n\n      for (int i = 0; i < size(); i++) {\n        if (age < age_min) {\n          age_min = age;\n          age_min_idx = i;\n        }\n      }\n      features.points[age_min_idx] = point;\n      features.ages[age_min_idx] = age;\n    }\n  }\n}\n\nvoid Bucket::get_features(FeatureSet &current_features) {\n  current_features.points.insert(current_features.points.end(),\n                                 features.points.begin(),\n                                 features.points.end());\n  current_features.ages.insert(current_features.ages.end(),\n                               features.ages.begin(), features.ages.end());\n}\n\nBucket::~Bucket() {}"
        }
    ]
}
{
    "sourceFile": "src/feature_set.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 84,
            "patches": [
                {
                    "date": 1647377170227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1647377268800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n   points.insert(points.end(), points_new.begin(), points_new.end());\n   std::vector<int> ages_new(points_new.size(), 0);\n   ages.insert(ages.end(), ages_new.begin(), ages_new.end());\n-  // TODO: Ensure that duplicate points are not added\n+  // Ensure that duplicate points are not added\n }\n \n void FeatureSet::filterByBucketLocation(const cv::Mat & image,\n                         const int bucket_size, const int features_per_bucket) {\n"
                },
                {
                    "date": 1647377282694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,9 @@\n }\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n+  points_new = sort(points_new.begin(), points_new.end())\n   points.insert(points.end(), points_new.begin(), points_new.end());\n   std::vector<int> ages_new(points_new.size(), 0);\n   ages.insert(ages.end(), ages_new.begin(), ages_new.end());\n   // Ensure that duplicate points are not added\n"
                },
                {
                    "date": 1647377294032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,9 @@\n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n   points_new = sort(points_new.begin(), points_new.end())\n   points.insert(points.end(), points_new.begin(), points_new.end());\n+  \n   std::vector<int> ages_new(points_new.size(), 0);\n   ages.insert(ages.end(), ages_new.begin(), ages_new.end());\n   // Ensure that duplicate points are not added\n }\n"
                },
                {
                    "date": 1647377325818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,13 @@\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n   points_new = sort(points_new.begin(), points_new.end())\n+  points = sort(points.begin(), points.end());\n+\n   points.insert(points.end(), points_new.begin(), points_new.end());\n-  \n+\n+\n   std::vector<int> ages_new(points_new.size(), 0);\n   ages.insert(ages.end(), ages_new.begin(), ages_new.end());\n   // Ensure that duplicate points are not added\n }\n"
                },
                {
                    "date": 1647377339189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n   points_new = sort(points_new.begin(), points_new.end())\n   points = sort(points.begin(), points.end());\n-\n+  \n   points.insert(points.end(), points_new.begin(), points_new.end());\n \n \n   std::vector<int> ages_new(points_new.size(), 0);\n"
                },
                {
                    "date": 1647377377319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,11 +41,13 @@\n }\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n-  points_new = sort(points_new.begin(), points_new.end())\n-  points = sort(points.begin(), points.end());\n-  \n+  sort(points_new.begin(), points_new.end())\n+  sort(points.begin(), points.end());\n+  for(int i = 0; i < points.length(); i++){\n+\n+  }\n   points.insert(points.end(), points_new.begin(), points_new.end());\n \n \n   std::vector<int> ages_new(points_new.size(), 0);\n"
                },
                {
                    "date": 1647377402962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,17 +43,18 @@\n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n   sort(points_new.begin(), points_new.end())\n   sort(points.begin(), points.end());\n+  // TODO: ensure that duplicate points are not added\n+\n   for(int i = 0; i < points.length(); i++){\n-\n+      \n   }\n   points.insert(points.end(), points_new.begin(), points_new.end());\n \n \n   std::vector<int> ages_new(points_new.size(), 0);\n   ages.insert(ages.end(), ages_new.begin(), ages_new.end());\n-  // Ensure that duplicate points are not added\n }\n \n void FeatureSet::filterByBucketLocation(const cv::Mat & image,\n                         const int bucket_size, const int features_per_bucket) {\n"
                },
                {
                    "date": 1647377417941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,10 +43,10 @@\n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n   sort(points_new.begin(), points_new.end())\n   sort(points.begin(), points.end());\n-  // TODO: ensure that duplicate points are not added\n-\n+  // TODO: Ensure that duplicate points are not added,\n+  // updating the ages and points array as you go.\n   for(int i = 0; i < points.length(); i++){\n       \n   }\n   points.insert(points.end(), points_new.begin(), points_new.end());\n"
                },
                {
                    "date": 1647377430130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n   sort(points.begin(), points.end());\n   // TODO: Ensure that duplicate points are not added,\n   // updating the ages and points array as you go.\n   for(int i = 0; i < points.length(); i++){\n-      \n+      points[i] = \n   }\n   points.insert(points.end(), points_new.begin(), points_new.end());\n \n \n"
                },
                {
                    "date": 1647377505557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n   sort(points.begin(), points.end());\n   // TODO: Ensure that duplicate points are not added,\n   // updating the ages and points array as you go.\n   for(int i = 0; i < points.length(); i++){\n-      points[i] = \n+      points[i] = 0;\n   }\n   points.insert(points.end(), points_new.begin(), points_new.end());\n \n \n"
                },
                {
                    "date": 1647377551128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,12 +43,15 @@\n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n   sort(points_new.begin(), points_new.end())\n   sort(points.begin(), points.end());\n+  std::vector<cv::Point2f> points_old;\n   // TODO: Ensure that duplicate points are not added,\n   // updating the ages and points array as you go.\n   for(int i = 0; i < points.length(); i++){\n-      points[i] = 0;\n+      if(points[i] == points_new[j]) {\n+\n+      }\n   }\n   points.insert(points.end(), points_new.begin(), points_new.end());\n \n \n"
                },
                {
                    "date": 1647377562790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,9 @@\n   sort(points.begin(), points.end());\n   std::vector<cv::Point2f> points_old;\n   // TODO: Ensure that duplicate points are not added,\n   // updating the ages and points array as you go.\n+  int j = 0;\n   for(int i = 0; i < points.length(); i++){\n       if(points[i] == points_new[j]) {\n \n       }\n"
                },
                {
                    "date": 1647377586756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,8 +48,11 @@\n   // TODO: Ensure that duplicate points are not added,\n   // updating the ages and points array as you go.\n   int j = 0;\n   for(int i = 0; i < points.length(); i++){\n+      while(j < points_new.size() &&points[j] < points[i]) {\n+          j++;\n+      }\n       if(points[i] == points_new[j]) {\n \n       }\n   }\n"
                },
                {
                    "date": 1647377599176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n   // TODO: Ensure that duplicate points are not added,\n   // updating the ages and points array as you go.\n   int j = 0;\n   for(int i = 0; i < points.length(); i++){\n-      while(j < points_new.size() &&points[j] < points[i]) {\n+      while(j < points_new.size() && points_new[j] < points[i]) {\n           j++;\n       }\n       if(points[i] == points_new[j]) {\n \n"
                },
                {
                    "date": 1647377619160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,10 +51,10 @@\n   for(int i = 0; i < points.length(); i++){\n       while(j < points_new.size() && points_new[j] < points[i]) {\n           j++;\n       }\n-      if(points[i] == points_new[j]) {\n-\n+      if(points[i] != points_new[j]) {\n+          points_old.append(points[i]);\n       }\n   }\n   points.insert(points.end(), points_new.begin(), points_new.end());\n \n"
                },
                {
                    "date": 1647377627507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n   for(int i = 0; i < points.length(); i++){\n       while(j < points_new.size() && points_new[j] < points[i]) {\n           j++;\n       }\n-      if(points[i] != points_new[j]) {\n+      if(j < points_new.size() || points[i] != points_new[j]) {\n           points_old.append(points[i]);\n       }\n   }\n   points.insert(points.end(), points_new.begin(), points_new.end());\n"
                },
                {
                    "date": 1647377659270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,9 @@\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n   sort(points_new.begin(), points_new.end())\n   sort(points.begin(), points.end());\n   std::vector<cv::Point2f> points_old;\n+  std::vector<int> ages_old;\n   // TODO: Ensure that duplicate points are not added,\n   // updating the ages and points array as you go.\n   int j = 0;\n   for(int i = 0; i < points.length(); i++){\n@@ -55,9 +56,10 @@\n       if(j < points_new.size() || points[i] != points_new[j]) {\n           points_old.append(points[i]);\n       }\n   }\n-  points.insert(points.end(), points_new.begin(), points_new.end());\n+  points.insert(points_old.end(), points_new.begin(), points_new.end());\n+  points_old = \n \n \n   std::vector<int> ages_new(points_new.size(), 0);\n   ages.insert(ages.end(), ages_new.begin(), ages_new.end());\n"
                },
                {
                    "date": 1647377673311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,11 +57,11 @@\n           points_old.append(points[i]);\n       }\n   }\n   points.insert(points_old.end(), points_new.begin(), points_new.end());\n-  points_old = \n+  points = points_old;\n+  ages = ages_old;\n \n-\n   std::vector<int> ages_new(points_new.size(), 0);\n   ages.insert(ages.end(), ages_new.begin(), ages_new.end());\n }\n \n"
                },
                {
                    "date": 1647377680077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,11 +56,11 @@\n       if(j < points_new.size() || points[i] != points_new[j]) {\n           points_old.append(points[i]);\n       }\n   }\n-  points.insert(points_old.end(), points_new.begin(), points_new.end());\n   points = points_old;\n   ages = ages_old;\n+  points.insert(points_old.end(), points_new.begin(), points_new.end());\n \n   std::vector<int> ages_new(points_new.size(), 0);\n   ages.insert(ages.end(), ages_new.begin(), ages_new.end());\n }\n"
                },
                {
                    "date": 1647377693507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,11 +57,10 @@\n           points_old.append(points[i]);\n       }\n   }\n   points = points_old;\n+  points.insert(points_old.end(), points_new.begin(), points_new.end());\n   ages = ages_old;\n-  points.insert(points_old.end(), points_new.begin(), points_new.end());\n-\n   std::vector<int> ages_new(points_new.size(), 0);\n   ages.insert(ages.end(), ages_new.begin(), ages_new.end());\n }\n \n"
                },
                {
                    "date": 1647377734738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n   for(int i = 0; i < points.length(); i++){\n       while(j < points_new.size() && points_new[j] < points[i]) {\n           j++;\n       }\n-      if(j < points_new.size() || points[i] != points_new[j]) {\n+      if(j == points_new.size() || points[i] != points_new[j]) {\n           points_old.append(points[i]);\n       }\n   }\n   points = points_old;\n"
                },
                {
                    "date": 1647377904780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,18 @@\n   cv::FAST(image, keypoints, fast_threshold, nonmaxSuppression);\n   cv::KeyPoint::convert(keypoints, points, std::vector<int>());\n   return points;\n }\n+struct pointOrder\n+{\n+    inline bool operator() (const Point2f& struct1, const Point2f& struct2)\n+    {\n+        if(struct1.x == struct2.x)\n+            return (struct1.y < struct2.y);\n+        else \n+           return struct1.x < struct2.x\n+    }\n+};\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n   sort(points_new.begin(), points_new.end())\n"
                },
                {
                    "date": 1647377911329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n   return points;\n }\n struct pointOrder\n {\n-    inline bool operator() (const Point2f& struct1, const Point2f& struct2)\n+    inline bool operator() (const Point2f& p1, const Point2f& p2)\n     {\n         if(struct1.x == struct2.x)\n             return (struct1.y < struct2.y);\n         else \n"
                },
                {
                    "date": 1647377929954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,12 +42,12 @@\n struct pointOrder\n {\n     inline bool operator() (const Point2f& p1, const Point2f& p2)\n     {\n-        if(struct1.x == struct2.x)\n-            return (struct1.y < struct2.y);\n+        if(p1.x == p2.x)\n+            return (p1.y < p2.y);\n         else \n-           return struct1.x < struct2.x\n+           return p1.x < p2.x\n     }\n };\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n"
                },
                {
                    "date": 1647377951666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,12 +42,9 @@\n struct pointOrder\n {\n     inline bool operator() (const Point2f& p1, const Point2f& p2)\n     {\n-        if(p1.x == p2.x)\n-            return (p1.y < p2.y);\n-        else \n-           return p1.x < p2.x\n+        return p1.x == p2.x ? p1.y < p2.y : p1.x < p2.y;\n     }\n };\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n"
                },
                {
                    "date": 1647377960471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n };\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n-  sort(points_new.begin(), points_new.end())\n+  sort(points_new.begin(), points_new.end(), pointOrder)\n   sort(points.begin(), points.end());\n   std::vector<cv::Point2f> points_old;\n   std::vector<int> ages_old;\n   // TODO: Ensure that duplicate points are not added,\n"
                },
                {
                    "date": 1647377970542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,10 +48,10 @@\n };\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n-  sort(points_new.begin(), points_new.end(), pointOrder)\n-  sort(points.begin(), points.end());\n+  sort(points_new.begin(), points_new.end(), pointOrder); //Must sort ages\n+  sort(points.begin(), points.end()), pointOrder;\n   std::vector<cv::Point2f> points_old;\n   std::vector<int> ages_old;\n   // TODO: Ensure that duplicate points are not added,\n   // updating the ages and points array as you go.\n"
                },
                {
                    "date": 1647377986545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,10 +48,10 @@\n };\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n-  sort(points_new.begin(), points_new.end(), pointOrder); //Must sort ages\n-  sort(points.begin(), points.end()), pointOrder;\n+  sort(points_new.begin(), points_new.end(), pointOrder); \n+  sort(points.begin(), points.end()), pointOrder;//Must sort ages\n   std::vector<cv::Point2f> points_old;\n   std::vector<int> ages_old;\n   // TODO: Ensure that duplicate points are not added,\n   // updating the ages and points array as you go.\n"
                },
                {
                    "date": 1647377996948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n   sort(points_new.begin(), points_new.end(), pointOrder); \n-  sort(points.begin(), points.end()), pointOrder;//Must sort ages\n+  sort(points.begin(), points.end()), pointOrder;// Must sort ages\n   std::vector<cv::Point2f> points_old;\n   std::vector<int> ages_old;\n   // TODO: Ensure that duplicate points are not added,\n   // updating the ages and points array as you go.\n"
                },
                {
                    "date": 1647378049905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,8 +49,10 @@\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n   sort(points_new.begin(), points_new.end(), pointOrder); \n+  vector<int> sortedInds;\n+  iota(sortedInds);\n   sort(points.begin(), points.end()), pointOrder;// Must sort ages\n   std::vector<cv::Point2f> points_old;\n   std::vector<int> ages_old;\n   // TODO: Ensure that duplicate points are not added,\n"
                },
                {
                    "date": 1647378062189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,12 @@\n         return p1.x == p2.x ? p1.y < p2.y : p1.x < p2.y;\n     }\n };\n \n+void FeatureSet::sortFeatures() {\n+\n+}\n+\n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n   sort(points_new.begin(), points_new.end(), pointOrder); \n   vector<int> sortedInds;\n"
                },
                {
                    "date": 1647378067623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,8 +53,9 @@\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n   sort(points_new.begin(), points_new.end(), pointOrder); \n+  sortFeatures\n   vector<int> sortedInds;\n   iota(sortedInds);\n   sort(points.begin(), points.end()), pointOrder;// Must sort ages\n   std::vector<cv::Point2f> points_old;\n"
                },
                {
                    "date": 1647378076667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,19 +47,18 @@\n     }\n };\n \n void FeatureSet::sortFeatures() {\n-\n+  vector<int> sortedInds;\n+  iota(sortedInds);\n+  sort(points.begin(), points.end()), pointOrder;// Must sort ages\n+  std::vector<cv::Point2f> points_old;\n }\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n   sort(points_new.begin(), points_new.end(), pointOrder); \n-  sortFeatures\n-  vector<int> sortedInds;\n-  iota(sortedInds);\n-  sort(points.begin(), points.end()), pointOrder;// Must sort ages\n-  std::vector<cv::Point2f> points_old;\n+  sortFeatures();\n   std::vector<int> ages_old;\n   // TODO: Ensure that duplicate points are not added,\n   // updating the ages and points array as you go.\n   int j = 0;\n"
                },
                {
                    "date": 1647378091010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \n void FeatureSet::sortFeatures() {\n   vector<int> sortedInds;\n   iota(sortedInds);\n-  sort(points.begin(), points.end()), pointOrder;// Must sort ages\n+  sort(points.begin(), points.end()), pointOrder; // Must sort ages\n   std::vector<cv::Point2f> points_old;\n }\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n"
                },
                {
                    "date": 1647378120558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,10 @@\n };\n \n void FeatureSet::sortFeatures() {\n   vector<int> sortedInds;\n-  iota(sortedInds);\n+  iota(sortedInds.begin(), sortedInds.end(), 0);\n+  \n   sort(points.begin(), points.end()), pointOrder; // Must sort ages\n   std::vector<cv::Point2f> points_old;\n }\n \n"
                },
                {
                    "date": 1647378190456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,10 +49,10 @@\n \n void FeatureSet::sortFeatures() {\n   vector<int> sortedInds;\n   iota(sortedInds.begin(), sortedInds.end(), 0);\n-  \n-  sort(points.begin(), points.end()), pointOrder; // Must sort ages\n+  sort(points.begin(), points.end(),\n+    [&](int i, int j){ return pointOrder; });\n   std::vector<cv::Point2f> points_old;\n }\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n"
                },
                {
                    "date": 1647378196116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,12 +48,12 @@\n };\n \n void FeatureSet::sortFeatures() {\n   vector<int> sortedInds;\n+  std::vector<cv::Point2f> points_old;\n   iota(sortedInds.begin(), sortedInds.end(), 0);\n   sort(points.begin(), points.end(),\n     [&](int i, int j){ return pointOrder; });\n-  std::vector<cv::Point2f> points_old;\n }\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n"
                },
                {
                    "date": 1647378204935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,8 @@\n };\n \n void FeatureSet::sortFeatures() {\n   vector<int> sortedInds;\n-  std::vector<cv::Point2f> points_old;\n   iota(sortedInds.begin(), sortedInds.end(), 0);\n   sort(points.begin(), points.end(),\n     [&](int i, int j){ return pointOrder; });\n }\n@@ -59,8 +58,9 @@\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n   sort(points_new.begin(), points_new.end(), pointOrder); \n   sortFeatures();\n   std::vector<int> ages_old;\n+  std::vector<cv::Point2f> points_old;\n   // TODO: Ensure that duplicate points are not added,\n   // updating the ages and points array as you go.\n   int j = 0;\n   for(int i = 0; i < points.length(); i++){\n"
                },
                {
                    "date": 1647378213105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n   sort(points_new.begin(), points_new.end(), pointOrder); \n   sortFeatures();\n   std::vector<int> ages_old;\n   std::vector<cv::Point2f> points_old;\n-  // TODO: Ensure that duplicate points are not added,\n+  // Ensure that duplicate points are not added,\n   // updating the ages and points array as you go.\n   int j = 0;\n   for(int i = 0; i < points.length(); i++){\n       while(j < points_new.size() && points_new[j] < points[i]) {\n"
                },
                {
                    "date": 1647378221237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,9 @@\n           j++;\n       }\n       if(j == points_new.size() || points[i] != points_new[j]) {\n           points_old.append(points[i]);\n+          ages_old.append(ages[i]);\n       }\n   }\n   points = points_old;\n   points.insert(points_old.end(), points_new.begin(), points_new.end());\n"
                },
                {
                    "date": 1647378243134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,11 +72,11 @@\n           ages_old.append(ages[i]);\n       }\n   }\n   points = points_old;\n-  points.insert(points_old.end(), points_new.begin(), points_new.end());\n   ages = ages_old;\n   std::vector<int> ages_new(points_new.size(), 0);\n+  points.insert(points_old.end(), points_new.begin(), points_new.end());\n   ages.insert(ages.end(), ages_new.begin(), ages_new.end());\n }\n \n void FeatureSet::filterByBucketLocation(const cv::Mat & image,\n"
                },
                {
                    "date": 1647378291930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,10 @@\n void FeatureSet::sortFeatures() {\n   vector<int> sortedInds;\n   iota(sortedInds.begin(), sortedInds.end(), 0);\n   sort(points.begin(), points.end(),\n-    [&](int i, int j){ return pointOrder; });\n+    [&](int i, int j){ return points[i] < points[j]});\n+\n }\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n"
                },
                {
                    "date": 1647378315773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \n void FeatureSet::sortFeatures() {\n   vector<int> sortedInds;\n   iota(sortedInds.begin(), sortedInds.end(), 0);\n-  sort(points.begin(), points.end(),\n+  sort(sortedInds.begin(), sortedInds.end(),\n     [&](int i, int j){ return points[i] < points[j]});\n \n }\n \n"
                },
                {
                    "date": 1647378370586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,13 +47,13 @@\n     }\n };\n \n void FeatureSet::sortFeatures() {\n-  vector<int> sortedInds;\n+  vector<int> sortedInds(points.size());\n   iota(sortedInds.begin(), sortedInds.end(), 0);\n   sort(sortedInds.begin(), sortedInds.end(),\n     [&](int i, int j){ return points[i] < points[j]});\n-\n+  for(int i = 0; i < sort)\n }\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n"
                },
                {
                    "date": 1647378385326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,11 @@\n   vector<int> sortedInds(points.size());\n   iota(sortedInds.begin(), sortedInds.end(), 0);\n   sort(sortedInds.begin(), sortedInds.end(),\n     [&](int i, int j){ return points[i] < points[j]});\n-  for(int i = 0; i < sort)\n+  for(int i = 0; i < points.size(); i++) {\n+      swap(points[i], points[i]);\n+  }\n }\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n"
                },
                {
                    "date": 1647378390886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n   iota(sortedInds.begin(), sortedInds.end(), 0);\n   sort(sortedInds.begin(), sortedInds.end(),\n     [&](int i, int j){ return points[i] < points[j]});\n   for(int i = 0; i < points.size(); i++) {\n-      swap(points[i], points[i]);\n+      swap(points[sortedInds[i]], points[i]);\n   }\n }\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n"
                },
                {
                    "date": 1647378468873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,11 +51,16 @@\n   vector<int> sortedInds(points.size());\n   iota(sortedInds.begin(), sortedInds.end(), 0);\n   sort(sortedInds.begin(), sortedInds.end(),\n     [&](int i, int j){ return points[i] < points[j]});\n+  vector<int> points_sorted;\n+  vector<int> ages_sorted;\n   for(int i = 0; i < points.size(); i++) {\n-      swap(points[sortedInds[i]], points[i]);\n+      points_sorted.insert(points[sortedInds[i]]));\n+      ages_sorted.insert(ages[sortedInds[i]])\n   }\n+  points = points_sorted;\n+  ages = ages_sorted;\n }\n \n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n"
                },
                {
                    "date": 1647378771181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n   cv::FAST(image, keypoints, fast_threshold, nonmaxSuppression);\n   cv::KeyPoint::convert(keypoints, points, std::vector<int>());\n   return points;\n }\n-struct pointOrder\n+struct PointOrder\n {\n     inline bool operator() (const Point2f& p1, const Point2f& p2)\n     {\n         return p1.x == p2.x ? p1.y < p2.y : p1.x < p2.y;\n"
                },
                {
                    "date": 1647378848668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n   return points;\n }\n struct PointOrder\n {\n-    inline bool operator() (const Point2f& p1, const Point2f& p2)\n+    inline bool operator() (const cv::Point2f& p1, const cv::Point2f& p2)\n     {\n         return p1.x == p2.x ? p1.y < p2.y : p1.x < p2.y;\n     }\n };\n"
                },
                {
                    "date": 1647378867132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n struct PointOrder\n {\n     inline bool operator() (const cv::Point2f& p1, const cv::Point2f& p2)\n     {\n-        return p1.x == p2.x ? p1.y < p2.y : p1.x < p2.y;\n+        return p1.x == p2.x ? p1.y < p2.y : p1.x < p2.x;\n     }\n };\n \n void FeatureSet::sortFeatures() {\n"
                },
                {
                    "date": 1647543989650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,13 @@\n \n Bucket::~Bucket() {}\n \n int Bucket::size() { return features.points.size(); }\n+/* Score is an integer. Age is from 1-10. Strength goes up to 100. */\n+int Bucket::compute_score(const int age, const int strength)\n+{\n+    return age + (strength - FAST_THRESHOLD)/20;\n+}\n \n void Bucket::add_feature(const cv::Point2f point, const int age) {\n   // Don't add sufficently old Features\n   if (age < AGE_THRESHOLD) {\n"
                },
                {
                    "date": 1647544285218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,15 +4,17 @@\n \n Bucket::~Bucket() {}\n \n int Bucket::size() { return features.points.size(); }\n+\n /* Score is an integer. Age is from 1-10. Strength goes up to 100. */\n int Bucket::compute_score(const int age, const int strength)\n {\n     return age + (strength - FAST_THRESHOLD)/20;\n }\n \n-void Bucket::add_feature(const cv::Point2f point, const int age) {\n+void Bucket::add_feature(const cv::Point2f point, const int age, const int strnegth) {\n+    if (!max_size) return;\n   // Don't add sufficently old Features\n   if (age < AGE_THRESHOLD) {\n     // Insert any feature before bucket is full.\n     if (size() < max_size) {\n"
                },
                {
                    "date": 1647544321905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,12 @@\n     return age + (strength - FAST_THRESHOLD)/20;\n }\n \n void Bucket::add_feature(const cv::Point2f point, const int age, const int strnegth) {\n-    if (!max_size) return;\n+  // If max size is none, we never add anything.\n+  if (!max_size) return;\n+\n+  const int score = compute_score(age, strength);\n   // Don't add sufficently old Features\n   if (age < AGE_THRESHOLD) {\n     // Insert any feature before bucket is full.\n     if (size() < max_size) {\n"
                },
                {
                    "date": 1647544327898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n {\n     return age + (strength - FAST_THRESHOLD)/20;\n }\n \n-void Bucket::add_feature(const cv::Point2f point, const int age, const int strnegth) {\n+void Bucket::add_feature(const cv::Point2f point, const int age, const int strength) {\n   // If max size is none, we never add anything.\n   if (!max_size) return;\n \n   const int score = compute_score(age, strength);\n"
                },
                {
                    "date": 1647544371482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     if (size() < max_size) {\n       features.points.push_back(point);\n       features.ages.push_back(age);\n     } else {\n-      // Insert feature with young age and remove oldest one.\n+      // Replace the feauture with the lowest score.\n       int age_max = features.ages[0];\n       int age_max_idx = 0;\n \n       for (int i = 0; i < size(); i++) {\n"
                },
                {
                    "date": 1647544395381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,19 +24,25 @@\n       features.points.push_back(point);\n       features.ages.push_back(age);\n     } else {\n       // Replace the feauture with the lowest score.\n-      int age_max = features.ages[0];\n-      int age_max_idx = 0;\n-\n-      for (int i = 0; i < size(); i++) {\n-        if (age > age_max) {\n-          age_max = age;\n-          age_max_idx = i;\n-        }\n-      }\n-      features.points[age_max_idx] = point;\n-      features.ages[age_max_idx] = age;\n+                  int score_min = compute_score(features.ages[0],features.strengths[0]);\n+            int score_min_idx = 0;\n+            for (int i = 1; i < size(); i++)\n+            {\n+                const int current_score = compute_score(features.ages[i],features.strengths[i]);\n+                if (current_score < score_min)\n+                {\n+                    score_min = current_score;\n+                    score_min_idx = i;\n+                }\n+            }\n+            if (score > score_min)\n+            {\n+                features.points[score_min_idx] = point;\n+                features.ages[score_min_idx] = age;\n+                features.strengths[score_min_idx] = strength;\n+            }\n     }\n   }\n }\n \n"
                },
                {
                    "date": 1647544411898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,25 +24,25 @@\n       features.points.push_back(point);\n       features.ages.push_back(age);\n     } else {\n       // Replace the feauture with the lowest score.\n-                  int score_min = compute_score(features.ages[0],features.strengths[0]);\n-            int score_min_idx = 0;\n-            for (int i = 1; i < size(); i++)\n+        int score_min = compute_score(features.ages[0],features.strengths[0]);\n+        int score_min_idx = 0;\n+        for (int i = 1; i < size(); i++)\n+        {\n+            const int current_score = compute_score(features.ages[i],features.strengths[i]);\n+            if (current_score < score_min)\n             {\n-                const int current_score = compute_score(features.ages[i],features.strengths[i]);\n-                if (current_score < score_min)\n-                {\n-                    score_min = current_score;\n-                    score_min_idx = i;\n-                }\n+                score_min = current_score;\n+                score_min_idx = i;\n             }\n-            if (score > score_min)\n-            {\n-                features.points[score_min_idx] = point;\n-                features.ages[score_min_idx] = age;\n-                features.strengths[score_min_idx] = strength;\n-            }\n+        }\n+        if (score > score_min)\n+        {\n+            features.points[score_min_idx] = point;\n+            features.ages[score_min_idx] = age;\n+            features.strengths[score_min_idx] = strength;\n+        }\n     }\n   }\n }\n \n"
                },
                {
                    "date": 1647544453514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     if (size() < max_size) {\n       features.points.push_back(point);\n       features.ages.push_back(age);\n     } else {\n-      // Replace the feauture with the lowest score.\n+        // Replace the feauture with the lowest score.\n         int score_min = compute_score(features.ages[0],features.strengths[0]);\n         int score_min_idx = 0;\n         for (int i = 1; i < size(); i++)\n         {\n"
                },
                {
                    "date": 1647544621684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n     }\n   }\n }\n \n-std::vector<cv::Point2f> featureDetectionFast(const cv::Mat image) {\n+std::vector<cv::Point2f> featureDetectionFast(const cv::Mat image, , std::vector<float> & response_strength) {\n   std::vector<cv::Point2f> points;\n   std::vector<cv::KeyPoint> keypoints;\n   int fast_threshold = 20;\n   bool nonmaxSuppression = true;\n"
                },
                {
                    "date": 1647544634594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,11 +48,10 @@\n \n std::vector<cv::Point2f> featureDetectionFast(const cv::Mat image, , std::vector<float> & response_strength) {\n   std::vector<cv::Point2f> points;\n   std::vector<cv::KeyPoint> keypoints;\n-  int fast_threshold = 20;\n   bool nonmaxSuppression = true;\n-  cv::FAST(image, keypoints, fast_threshold, nonmaxSuppression);\n+  cv::FAST(image, keypoints, FAST_THRESHOLD, nonmaxSuppression);\n   cv::KeyPoint::convert(keypoints, points, std::vector<int>());\n   return points;\n }\n struct PointOrder\n"
                },
                {
                    "date": 1647544704990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,14 +45,18 @@\n     }\n   }\n }\n \n-std::vector<cv::Point2f> featureDetectionFast(const cv::Mat image, , std::vector<float> & response_strength) {\n+std::vector<cv::Point2f> featureDetectionFast(const cv::Mat image, std::vector<float> & response_strength) {\n   std::vector<cv::Point2f> points;\n   std::vector<cv::KeyPoint> keypoints;\n   bool nonmaxSuppression = true;\n   cv::FAST(image, keypoints, FAST_THRESHOLD, nonmaxSuppression);\n   cv::KeyPoint::convert(keypoints, points, std::vector<int>());\n+  response_strength.reserve(points.size());\n+    for (const auto keypoint : keypoints) {\n+    response_strength.push_back(keypoint.response); \n+    }\n   return points;\n }\n struct PointOrder\n {\n"
                },
                {
                    "date": 1647544711894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,11 +52,11 @@\n   bool nonmaxSuppression = true;\n   cv::FAST(image, keypoints, FAST_THRESHOLD, nonmaxSuppression);\n   cv::KeyPoint::convert(keypoints, points, std::vector<int>());\n   response_strength.reserve(points.size());\n-    for (const auto keypoint : keypoints) {\n+  for (const auto keypoint : keypoints) {\n     response_strength.push_back(keypoint.response); \n-    }\n+  }\n   return points;\n }\n struct PointOrder\n {\n"
                },
                {
                    "date": 1647544815545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,31 +57,9 @@\n     response_strength.push_back(keypoint.response); \n   }\n   return points;\n }\n-struct PointOrder\n-{\n-    inline bool operator() (const cv::Point2f& p1, const cv::Point2f& p2)\n-    {\n-        return p1.x == p2.x ? p1.y < p2.y : p1.x < p2.x;\n-    }\n-};\n \n-void FeatureSet::sortFeatures() {\n-  vector<int> sortedInds(points.size());\n-  iota(sortedInds.begin(), sortedInds.end(), 0);\n-  sort(sortedInds.begin(), sortedInds.end(),\n-    [&](int i, int j){ return points[i] < points[j]});\n-  vector<int> points_sorted;\n-  vector<int> ages_sorted;\n-  for(int i = 0; i < points.size(); i++) {\n-      points_sorted.insert(points[sortedInds[i]]));\n-      ages_sorted.insert(ages[sortedInds[i]])\n-  }\n-  points = points_sorted;\n-  ages = ages_sorted;\n-}\n-\n void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n   std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n   sort(points_new.begin(), points_new.end(), pointOrder); \n   sortFeatures();\n@@ -103,8 +81,28 @@\n   ages = ages_old;\n   std::vector<int> ages_new(points_new.size(), 0);\n   points.insert(points_old.end(), points_new.begin(), points_new.end());\n   ages.insert(ages.end(), ages_new.begin(), ages_new.end());\n+\n+    /* Fast feature detection */\n+    std::vector<float>  response_strength;\n+    std::vector<cv::Point2f>  points_new = featureDetectionFast(image, response_strength);\n+\n+    current_features.points.insert(current_features.points.end(), points_new.begin(), points_new.end());\n+    std::vector<int>  ages_new(points_new.size(), 0);\n+    current_features.ages.insert(current_features.ages.end(), ages_new.begin(), ages_new.end());\n+    current_features.strengths.insert(current_features.strengths.end(), response_strength.begin(), response_strength.end());\n+\n+    /* Display feature points after feature detection */\n+    // displayPoints(image,current_features.points);\n+\n+    /* Bucketing features */\n+    const int bucket_size = std::min(image.rows,image.cols)/BUCKET_DIVISOR; // TODO PARAM\n+    debug(\"[feature]: number of features before bucketing: \" + std::to_string(current_features.points.size()));\n+\n+    // filter features in currentVOFeatures so that one per bucket\n+    bucketingFeatures(image, current_features, bucket_size, FEATURES_PER_BUCKET);\n+    debug(\"[feature]: number of features after bucketing: \" + std::to_string(current_features.points.size()));\n }\n \n void FeatureSet::filterByBucketLocation(const cv::Mat & image,\n                         const int bucket_size, const int features_per_bucket) {\n"
                },
                {
                    "date": 1647544870298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,32 +58,9 @@\n   }\n   return points;\n }\n \n-void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n-  std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n-  sort(points_new.begin(), points_new.end(), pointOrder); \n-  sortFeatures();\n-  std::vector<int> ages_old;\n-  std::vector<cv::Point2f> points_old;\n-  // Ensure that duplicate points are not added,\n-  // updating the ages and points array as you go.\n-  int j = 0;\n-  for(int i = 0; i < points.length(); i++){\n-      while(j < points_new.size() && points_new[j] < points[i]) {\n-          j++;\n-      }\n-      if(j == points_new.size() || points[i] != points_new[j]) {\n-          points_old.append(points[i]);\n-          ages_old.append(ages[i]);\n-      }\n-  }\n-  points = points_old;\n-  ages = ages_old;\n-  std::vector<int> ages_new(points_new.size(), 0);\n-  points.insert(points_old.end(), points_new.begin(), points_new.end());\n-  ages.insert(ages.end(), ages_new.begin(), ages_new.end());\n-\n+void FeatureSet::appendFeaturesFromImage(const cv::Mat & image, FeatureSet& current_features) {\n     /* Fast feature detection */\n     std::vector<float>  response_strength;\n     std::vector<cv::Point2f>  points_new = featureDetectionFast(image, response_strength);\n \n"
                },
                {
                    "date": 1647544875973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n   }\n   return points;\n }\n \n-void FeatureSet::appendFeaturesFromImage(const cv::Mat & image, FeatureSet& current_features) {\n+void appendFeaturesFromImage(const cv::Mat & image, FeatureSet& current_features) {\n     /* Fast feature detection */\n     std::vector<float>  response_strength;\n     std::vector<cv::Point2f>  points_new = featureDetectionFast(image, response_strength);\n \n"
                },
                {
                    "date": 1647544899495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n     /* Display feature points after feature detection */\n     // displayPoints(image,current_features.points);\n \n     /* Bucketing features */\n-    const int bucket_size = std::min(image.rows,image.cols)/BUCKET_DIVISOR; // TODO PARAM\n+    const int bucket_size = std::min(image.rows,image.cols)/BUCKETS_PER_AXIS;\n     debug(\"[feature]: number of features before bucketing: \" + std::to_string(current_features.points.size()));\n \n     // filter features in currentVOFeatures so that one per bucket\n     bucketingFeatures(image, current_features, bucket_size, FEATURES_PER_BUCKET);\n"
                },
                {
                    "date": 1647544909577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,11 +68,8 @@\n     std::vector<int>  ages_new(points_new.size(), 0);\n     current_features.ages.insert(current_features.ages.end(), ages_new.begin(), ages_new.end());\n     current_features.strengths.insert(current_features.strengths.end(), response_strength.begin(), response_strength.end());\n \n-    /* Display feature points after feature detection */\n-    // displayPoints(image,current_features.points);\n-\n     /* Bucketing features */\n     const int bucket_size = std::min(image.rows,image.cols)/BUCKETS_PER_AXIS;\n     debug(\"[feature]: number of features before bucketing: \" + std::to_string(current_features.points.size()));\n \n"
                },
                {
                    "date": 1647544997848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,13 +70,12 @@\n     current_features.strengths.insert(current_features.strengths.end(), response_strength.begin(), response_strength.end());\n \n     /* Bucketing features */\n     const int bucket_size = std::min(image.rows,image.cols)/BUCKETS_PER_AXIS;\n-    debug(\"[feature]: number of features before bucketing: \" + std::to_string(current_features.points.size()));\n \n     // filter features in currentVOFeatures so that one per bucket\n-    bucketingFeatures(image, current_features, bucket_size, FEATURES_PER_BUCKET);\n-    debug(\"[feature]: number of features after bucketing: \" + std::to_string(current_features.points.size()));\n+    // TODO move\n+    // bucketingFeatures(image, current_features, bucket_size, FEATURES_PER_BUCKET);\n }\n \n void FeatureSet::filterByBucketLocation(const cv::Mat & image,\n                         const int bucket_size, const int features_per_bucket) {\n"
                },
                {
                    "date": 1647545019320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n     buckets_nums_height_idx = points[i].y / bucket_size;\n     buckets_nums_width_idx = points[i].x / bucket_size;\n     buckets_idx =\n         buckets_nums_height_idx * buckets_nums_width + buckets_nums_width_idx;\n-    buckets[buckets_idx].add_feature(points[i], ages[i]);\n+    buckets[buckets_idx].add_feature(points[i], ages[i], strengths[i]);\n   }\n \n   points.clear();\n   ages.clear();\n"
                },
                {
                    "date": 1647545068316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n     // bucketingFeatures(image, current_features, bucket_size, FEATURES_PER_BUCKET);\n }\n \n void FeatureSet::filterByBucketLocation(const cv::Mat & image,\n-                        const int bucket_size, const int features_per_bucket) {\n+    const int bucket_size, const int features_per_bucket) {\n   int image_height = image.rows;\n   int image_width = image.cols;\n   int buckets_nums_height = image_height / bucket_size;\n   int buckets_nums_width = image_width / bucket_size;\n"
                },
                {
                    "date": 1647545094461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,8 +78,53 @@\n }\n \n void FeatureSet::filterByBucketLocation(const cv::Mat & image,\n     const int bucket_size, const int features_per_bucket) {\n+    int image_height = image.rows;\n+    int image_width = image.cols;\n+    int buckets_nums_height = image_height/bucket_size;\n+    int buckets_nums_width = image_width/bucket_size;\n+    int buckets_number = buckets_nums_height * buckets_nums_width;\n+\n+    std::vector<Bucket> Buckets;\n+\n+    // initialize all the buckets\n+    for (int buckets_idx_height = 0; buckets_idx_height <= buckets_nums_height; buckets_idx_height++)\n+    {\n+        for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width; buckets_idx_width++)\n+        {\n+            // Ignore top rows of image.\n+            if (buckets_idx_height > BUCKET_START_ROW) Buckets.push_back(Bucket(features_per_bucket));\n+            else Buckets.push_back(Bucket(0));\n+        }\n+    }\n+\n+    /* Put all current features into buckets by their location and scores */\n+    int buckets_nums_height_idx, buckets_nums_width_idx, buckets_idx;\n+    for (int i = 0; i < current_features.points.size(); ++i)\n+    {\n+        buckets_nums_height_idx = current_features.points[i].y/bucket_size;\n+        buckets_nums_width_idx = current_features.points[i].x/bucket_size;\n+        buckets_idx = buckets_nums_height_idx*buckets_nums_width + buckets_nums_width_idx;\n+        Buckets[buckets_idx].add_feature(current_features.points[i], current_features.ages[i], current_features.strengths[i]);\n+    }\n+\n+    /* Take features from buckets and put them back into the feature set */\n+    current_features.clear();\n+    for (int buckets_idx_height = 0; buckets_idx_height <= buckets_nums_height; buckets_idx_height++)\n+    {\n+        for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width; buckets_idx_width++)\n+        {\n+            buckets_idx = buckets_idx_height*buckets_nums_width + buckets_idx_width;\n+            FeatureSet bucket_features = Buckets[buckets_idx].features;\n+            current_features.points.insert(current_features.points.end(), bucket_features.points.begin(), bucket_features.points.end());\n+            current_features.ages.insert(current_features.ages.end(), bucket_features.ages.begin(), bucket_features.ages.end());\n+            current_features.strengths.insert(current_features.strengths.end(), bucket_features.strengths.begin(), bucket_features.strengths.end());\n+        }\n+    }\n+\n+\n+\n   int image_height = image.rows;\n   int image_width = image.cols;\n   int buckets_nums_height = image_height / bucket_size;\n   int buckets_nums_width = image_width / bucket_size;\n"
                },
                {
                    "date": 1647545104602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,18 +99,18 @@\n     }\n \n     /* Put all current features into buckets by their location and scores */\n     int buckets_nums_height_idx, buckets_nums_width_idx, buckets_idx;\n-    for (int i = 0; i < current_features.points.size(); ++i)\n+    for (int i = 0; i < points.size(); ++i)\n     {\n         buckets_nums_height_idx = current_features.points[i].y/bucket_size;\n         buckets_nums_width_idx = current_features.points[i].x/bucket_size;\n         buckets_idx = buckets_nums_height_idx*buckets_nums_width + buckets_nums_width_idx;\n         Buckets[buckets_idx].add_feature(current_features.points[i], current_features.ages[i], current_features.strengths[i]);\n     }\n \n     /* Take features from buckets and put them back into the feature set */\n-    current_features.clear();\n+    clear();\n     for (int buckets_idx_height = 0; buckets_idx_height <= buckets_nums_height; buckets_idx_height++)\n     {\n         for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width; buckets_idx_width++)\n         {\n"
                },
                {
                    "date": 1647545112118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,10 +101,10 @@\n     /* Put all current features into buckets by their location and scores */\n     int buckets_nums_height_idx, buckets_nums_width_idx, buckets_idx;\n     for (int i = 0; i < points.size(); ++i)\n     {\n-        buckets_nums_height_idx = current_features.points[i].y/bucket_size;\n-        buckets_nums_width_idx = current_features.points[i].x/bucket_size;\n+        buckets_nums_height_idx = points[i].y/bucket_size;\n+        buckets_nums_width_idx = points[i].x/bucket_size;\n         buckets_idx = buckets_nums_height_idx*buckets_nums_width + buckets_nums_width_idx;\n         Buckets[buckets_idx].add_feature(current_features.points[i], current_features.ages[i], current_features.strengths[i]);\n     }\n \n"
                },
                {
                    "date": 1647545215342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,13 +104,15 @@\n     {\n         buckets_nums_height_idx = points[i].y/bucket_size;\n         buckets_nums_width_idx = points[i].x/bucket_size;\n         buckets_idx = buckets_nums_height_idx*buckets_nums_width + buckets_nums_width_idx;\n-        Buckets[buckets_idx].add_feature(current_features.points[i], current_features.ages[i], current_features.strengths[i]);\n+        Buckets[buckets_idx].add_feature(points[i], ages[i], strengths[i]);\n     }\n \n     /* Take features from buckets and put them back into the feature set */\n-    clear();\n+    ages.clear();\n+    points.clear();\n+    strengths.clear();\n     for (int buckets_idx_height = 0; buckets_idx_height <= buckets_nums_height; buckets_idx_height++)\n     {\n         for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width; buckets_idx_width++)\n         {\n@@ -120,17 +122,8 @@\n             current_features.ages.insert(current_features.ages.end(), bucket_features.ages.begin(), bucket_features.ages.end());\n             current_features.strengths.insert(current_features.strengths.end(), bucket_features.strengths.begin(), bucket_features.strengths.end());\n         }\n     }\n-\n-\n-\n-  int image_height = image.rows;\n-  int image_width = image.cols;\n-  int buckets_nums_height = image_height / bucket_size;\n-  int buckets_nums_width = image_width / bucket_size;\n-  int buckets_number = buckets_nums_height * buckets_nums_width;\n-\n   std::vector<Bucket> buckets(buckets_nums_height * buckets_nums_width,\n                   Bucket(features_per_bucket));\n \n   // bucket all current features into buckets by their location\n"
                },
                {
                    "date": 1647545233089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,11 +122,8 @@\n             current_features.ages.insert(current_features.ages.end(), bucket_features.ages.begin(), bucket_features.ages.end());\n             current_features.strengths.insert(current_features.strengths.end(), bucket_features.strengths.begin(), bucket_features.strengths.end());\n         }\n     }\n-  std::vector<Bucket> buckets(buckets_nums_height * buckets_nums_width,\n-                  Bucket(features_per_bucket));\n-\n   // bucket all current features into buckets by their location\n   int buckets_nums_height_idx, buckets_nums_width_idx, buckets_idx;\n   for (int i = 0; i < points.size(); ++i) {\n     buckets_nums_height_idx = points[i].y / bucket_size;\n"
                },
                {
                    "date": 1647545333722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,18 +84,18 @@\n     int buckets_nums_height = image_height/bucket_size;\n     int buckets_nums_width = image_width/bucket_size;\n     int buckets_number = buckets_nums_height * buckets_nums_width;\n \n-    std::vector<Bucket> Buckets;\n+    std::vector<Bucket> buckets;\n \n     // initialize all the buckets\n     for (int buckets_idx_height = 0; buckets_idx_height <= buckets_nums_height; buckets_idx_height++)\n     {\n         for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width; buckets_idx_width++)\n         {\n             // Ignore top rows of image.\n-            if (buckets_idx_height > BUCKET_START_ROW) Buckets.push_back(Bucket(features_per_bucket));\n-            else Buckets.push_back(Bucket(0));\n+            if (buckets_idx_height > BUCKET_START_ROW) buckets.push_back(Bucket(features_per_bucket));\n+            else buckets.push_back(Bucket(0));\n         }\n     }\n \n     /* Put all current features into buckets by their location and scores */\n@@ -104,9 +104,9 @@\n     {\n         buckets_nums_height_idx = points[i].y/bucket_size;\n         buckets_nums_width_idx = points[i].x/bucket_size;\n         buckets_idx = buckets_nums_height_idx*buckets_nums_width + buckets_nums_width_idx;\n-        Buckets[buckets_idx].add_feature(points[i], ages[i], strengths[i]);\n+        buckets[buckets_idx].add_feature(points[i], ages[i], strengths[i]);\n     }\n \n     /* Take features from buckets and put them back into the feature set */\n     ages.clear();\n@@ -116,28 +116,14 @@\n     {\n         for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width; buckets_idx_width++)\n         {\n             buckets_idx = buckets_idx_height*buckets_nums_width + buckets_idx_width;\n-            FeatureSet bucket_features = Buckets[buckets_idx].features;\n-            current_features.points.insert(current_features.points.end(), bucket_features.points.begin(), bucket_features.points.end());\n-            current_features.ages.insert(current_features.ages.end(), bucket_features.ages.begin(), bucket_features.ages.end());\n-            current_features.strengths.insert(current_features.strengths.end(), bucket_features.strengths.begin(), bucket_features.strengths.end());\n+            FeatureSet bucket_features = buckets[buckets_idx].features;\n+            points.insert(current_features.points.end(), bucket_features.points.begin(), bucket_features.points.end());\n+            ages.insert(current_features.ages.end(), bucket_features.ages.begin(), bucket_features.ages.end());\n+            strengths.insert(current_features.strengths.end(), bucket_features.strengths.begin(), bucket_features.strengths.end());\n         }\n     }\n-  // bucket all current features into buckets by their location\n-  int buckets_nums_height_idx, buckets_nums_width_idx, buckets_idx;\n-  for (int i = 0; i < points.size(); ++i) {\n-    buckets_nums_height_idx = points[i].y / bucket_size;\n-    buckets_nums_width_idx = points[i].x / bucket_size;\n-    buckets_idx =\n-        buckets_nums_height_idx * buckets_nums_width + buckets_nums_width_idx;\n-    buckets[buckets_idx].add_feature(points[i], ages[i], strengths[i]);\n-  }\n-\n-  points.clear();\n-  ages.clear();\n-\n-\n   for (int buckets_idx_height = 0; buckets_idx_height <= buckets_nums_height;\n         buckets_idx_height++) {\n     for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width;\n           buckets_idx_width++) {\n"
                },
                {
                    "date": 1647545352742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,22 +117,11 @@\n         for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width; buckets_idx_width++)\n         {\n             buckets_idx = buckets_idx_height*buckets_nums_width + buckets_idx_width;\n             FeatureSet bucket_features = buckets[buckets_idx].features;\n-            points.insert(current_features.points.end(), bucket_features.points.begin(), bucket_features.points.end());\n-            ages.insert(current_features.ages.end(), bucket_features.ages.begin(), bucket_features.ages.end());\n-            strengths.insert(current_features.strengths.end(), bucket_features.strengths.begin(), bucket_features.strengths.end());\n+            points.insert(points.end(), bucket_features.points.begin(), bucket_features.points.end());\n+            ages.insert(ages.end(), bucket_features.ages.begin(), bucket_features.ages.end());\n+            strengths.insert(strengths.end(), bucket_features.strengths.begin(), bucket_features.strengths.end());\n         }\n     }\n-  for (int buckets_idx_height = 0; buckets_idx_height <= buckets_nums_height;\n-        buckets_idx_height++) {\n-    for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width;\n-          buckets_idx_width++) {\n-      buckets_idx =\n-          buckets_idx_height * buckets_nums_width + buckets_idx_width;\n-      Bucket bucket = buckets[buckets_idx];\n-      points.insert(points.end(), bucket.features.points.begin(), bucket.features.points.end());\n-      ages.insert(ages.end(), bucket.features.ages.begin(), bucket.features.ages.end());\n-      }\n-  }\n }\n } // namespace visual_odometry\n"
                },
                {
                    "date": 1647545476920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,8 +86,9 @@\n     int buckets_number = buckets_nums_height * buckets_nums_width;\n \n     std::vector<Bucket> buckets;\n \n+    // TODO: Why are these <= rather than <???\n     // initialize all the buckets\n     for (int buckets_idx_height = 0; buckets_idx_height <= buckets_nums_height; buckets_idx_height++)\n     {\n         for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width; buckets_idx_width++)\n"
                },
                {
                    "date": 1647545818779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,17 +58,17 @@\n   }\n   return points;\n }\n \n-void appendFeaturesFromImage(const cv::Mat & image, FeatureSet& current_features) {\n+void appendFeaturesFromImage(const cv::Mat & image) {\n     /* Fast feature detection */\n     std::vector<float>  response_strength;\n     std::vector<cv::Point2f>  points_new = featureDetectionFast(image, response_strength);\n \n-    current_features.points.insert(current_features.points.end(), points_new.begin(), points_new.end());\n+    points.insert(current_features.points.end(), points_new.begin(), points_new.end());\n     std::vector<int>  ages_new(points_new.size(), 0);\n-    current_features.ages.insert(current_features.ages.end(), ages_new.begin(), ages_new.end());\n-    current_features.strengths.insert(current_features.strengths.end(), response_strength.begin(), response_strength.end());\n+    ages.insert(current_features.ages.end(), ages_new.begin(), ages_new.end());\n+    strengths.insert(current_features.strengths.end(), response_strength.begin(), response_strength.end());\n \n     /* Bucketing features */\n     const int bucket_size = std::min(image.rows,image.cols)/BUCKETS_PER_AXIS;\n \n"
                },
                {
                    "date": 1647545835282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,17 +58,17 @@\n   }\n   return points;\n }\n \n-void appendFeaturesFromImage(const cv::Mat & image) {\n+void FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n     /* Fast feature detection */\n     std::vector<float>  response_strength;\n     std::vector<cv::Point2f>  points_new = featureDetectionFast(image, response_strength);\n \n-    points.insert(current_features.points.end(), points_new.begin(), points_new.end());\n+    points.insert(points.end(), points_new.begin(), points_new.end());\n     std::vector<int>  ages_new(points_new.size(), 0);\n-    ages.insert(current_features.ages.end(), ages_new.begin(), ages_new.end());\n-    strengths.insert(current_features.strengths.end(), response_strength.begin(), response_strength.end());\n+    ages.insert(ages.end(), ages_new.begin(), ages_new.end());\n+    strengths.insert(strengths.end(), response_strength.begin(), response_strength.end());\n \n     /* Bucketing features */\n     const int bucket_size = std::min(image.rows,image.cols)/BUCKETS_PER_AXIS;\n \n"
                },
                {
                    "date": 1647545854135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n     /* Bucketing features */\n     const int bucket_size = std::min(image.rows,image.cols)/BUCKETS_PER_AXIS;\n \n     // filter features in currentVOFeatures so that one per bucket\n-    // TODO move\n+    // TODO check\n     // bucketingFeatures(image, current_features, bucket_size, FEATURES_PER_BUCKET);\n }\n \n void FeatureSet::filterByBucketLocation(const cv::Mat & image,\n"
                },
                {
                    "date": 1647547012562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,15 +71,17 @@\n \n     /* Bucketing features */\n     const int bucket_size = std::min(image.rows,image.cols)/BUCKETS_PER_AXIS;\n \n-    // filter features in currentVOFeatures so that one per bucket\n-    // TODO check\n-    // bucketingFeatures(image, current_features, bucket_size, FEATURES_PER_BUCKET);\n+    // --------------------------------------------------------\n+    // Feature tracking using KLT tracker, bucketing and circular matching.\n+    // --------------------------------------------------------\n+    filterByBucketLocation(image, bucket_size,\n+                        features_per_bucket);\n }\n \n void FeatureSet::filterByBucketLocation(const cv::Mat & image,\n-    const int bucket_size, const int features_per_bucket) {\n+    const int bucket_size) {\n     int image_height = image.rows;\n     int image_width = image.cols;\n     int buckets_nums_height = image_height/bucket_size;\n     int buckets_nums_width = image_width/bucket_size;\n"
                },
                {
                    "date": 1647547028759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,13 +71,9 @@\n \n     /* Bucketing features */\n     const int bucket_size = std::min(image.rows,image.cols)/BUCKETS_PER_AXIS;\n \n-    // --------------------------------------------------------\n-    // Feature tracking using KLT tracker, bucketing and circular matching.\n-    // --------------------------------------------------------\n-    filterByBucketLocation(image, bucket_size,\n-                        features_per_bucket);\n+    filterByBucketLocation(image, bucket_size, FEATURES_PER_BUCKET);\n }\n \n void FeatureSet::filterByBucketLocation(const cv::Mat & image,\n     const int bucket_size) {\n"
                },
                {
                    "date": 1647547035654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n \n     /* Bucketing features */\n     const int bucket_size = std::min(image.rows,image.cols)/BUCKETS_PER_AXIS;\n \n-    filterByBucketLocation(image, bucket_size, FEATURES_PER_BUCKET);\n+    filterByBucketLocation(image, bucket_size);\n }\n \n void FeatureSet::filterByBucketLocation(const cv::Mat & image,\n     const int bucket_size) {\n@@ -91,9 +91,9 @@\n     {\n         for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width; buckets_idx_width++)\n         {\n             // Ignore top rows of image.\n-            if (buckets_idx_height > BUCKET_START_ROW) buckets.push_back(Bucket(features_per_bucket));\n+            if (buckets_idx_height > BUCKET_START_ROW) buckets.push_back(Bucket(FEATURES_PER_BUCKET));\n             else buckets.push_back(Bucket(0));\n         }\n     }\n \n"
                }
            ],
            "date": 1647377170227,
            "name": "Commit-0",
            "content": "#include \"vo.h\"\nnamespace visual_odometry {\nBucket::Bucket(int size) { max_size = size; }\n\nBucket::~Bucket() {}\n\nint Bucket::size() { return features.points.size(); }\n\nvoid Bucket::add_feature(const cv::Point2f point, const int age) {\n  // Don't add sufficently old Features\n  if (age < AGE_THRESHOLD) {\n    // Insert any feature before bucket is full.\n    if (size() < max_size) {\n      features.points.push_back(point);\n      features.ages.push_back(age);\n    } else {\n      // Insert feature with young age and remove oldest one.\n      int age_max = features.ages[0];\n      int age_max_idx = 0;\n\n      for (int i = 0; i < size(); i++) {\n        if (age > age_max) {\n          age_max = age;\n          age_max_idx = i;\n        }\n      }\n      features.points[age_max_idx] = point;\n      features.ages[age_max_idx] = age;\n    }\n  }\n}\n\nstd::vector<cv::Point2f> featureDetectionFast(const cv::Mat image) {\n  std::vector<cv::Point2f> points;\n  std::vector<cv::KeyPoint> keypoints;\n  int fast_threshold = 20;\n  bool nonmaxSuppression = true;\n  cv::FAST(image, keypoints, fast_threshold, nonmaxSuppression);\n  cv::KeyPoint::convert(keypoints, points, std::vector<int>());\n  return points;\n}\n\nvoid FeatureSet::appendFeaturesFromImage(const cv::Mat & image) {\n  std::vector<cv::Point2f> points_new = featureDetectionFast(image);\n  points.insert(points.end(), points_new.begin(), points_new.end());\n  std::vector<int> ages_new(points_new.size(), 0);\n  ages.insert(ages.end(), ages_new.begin(), ages_new.end());\n  // TODO: Ensure that duplicate points are not added\n}\n\nvoid FeatureSet::filterByBucketLocation(const cv::Mat & image,\n                        const int bucket_size, const int features_per_bucket) {\n  int image_height = image.rows;\n  int image_width = image.cols;\n  int buckets_nums_height = image_height / bucket_size;\n  int buckets_nums_width = image_width / bucket_size;\n  int buckets_number = buckets_nums_height * buckets_nums_width;\n\n  std::vector<Bucket> buckets(buckets_nums_height * buckets_nums_width,\n                  Bucket(features_per_bucket));\n\n  // bucket all current features into buckets by their location\n  int buckets_nums_height_idx, buckets_nums_width_idx, buckets_idx;\n  for (int i = 0; i < points.size(); ++i) {\n    buckets_nums_height_idx = points[i].y / bucket_size;\n    buckets_nums_width_idx = points[i].x / bucket_size;\n    buckets_idx =\n        buckets_nums_height_idx * buckets_nums_width + buckets_nums_width_idx;\n    buckets[buckets_idx].add_feature(points[i], ages[i]);\n  }\n\n  points.clear();\n  ages.clear();\n\n\n  for (int buckets_idx_height = 0; buckets_idx_height <= buckets_nums_height;\n        buckets_idx_height++) {\n    for (int buckets_idx_width = 0; buckets_idx_width <= buckets_nums_width;\n          buckets_idx_width++) {\n      buckets_idx =\n          buckets_idx_height * buckets_nums_width + buckets_idx_width;\n      Bucket bucket = buckets[buckets_idx];\n      points.insert(points.end(), bucket.features.points.begin(), bucket.features.points.end());\n      ages.insert(ages.end(), bucket.features.ages.begin(), bucket.features.ages.end());\n      }\n  }\n}\n} // namespace visual_odometry\n"
        }
    ]
}
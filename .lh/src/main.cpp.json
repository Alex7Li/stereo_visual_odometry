{
    "sourceFile": "src/main.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 454,
            "patches": [
                {
                    "date": 1647548807643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1647548813001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n #include \"../include/vo.h\"\n-#include \"vo.c\"\n+#include \"vo\"\n \n namespace visual_odometry {\n \n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1647548885441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,10 @@\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n #include \"../include/vo.h\"\n-#include \"vo\"\n+#include \"vo.cpp\"\n+#include \"feature_set.cpp\"\n \n namespace visual_odometry {\n \n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1647548961861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,11 +6,10 @@\n #include <sstream>\n #include <iomanip>\n #include \"../include/vo.h\"\n #include \"vo.cpp\"\n-#include \"feature_set.cpp\"\n \n-namespace visual_odometry {\n+using namespace visual_odometry;\n \n int main(int argc, char** argv) {\n \n     if(argc < 5) {\n@@ -49,7 +48,5 @@\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n-}\n-\n-} // namespace visual_odometry\n\\ No newline at end of file\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1647549002545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,8 @@\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n #include \"../include/vo.h\"\n-#include \"vo.cpp\"\n \n using namespace visual_odometry;\n \n int main(int argc, char** argv) {\n@@ -48,5 +47,5 @@\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n-}\n\\ No newline at end of file\n+}\n"
                },
                {
                    "date": 1647549035958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,10 @@\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n #include \"../include/vo.h\"\n+#include \"vo.cpp\"\n+#include \"feature_set.cpp\"\n \n using namespace visual_odometry;\n \n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1647549935726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n #include \"../include/vo.h\"\n-#include \"vo.cpp\"\n+// #include \"vo.cpp\"\n #include \"feature_set.cpp\"\n \n using namespace visual_odometry;\n \n"
                },
                {
                    "date": 1647549942107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n #include \"../include/vo.h\"\n-// #include \"vo.cpp\"\n+#include \"vo.cpp\"\n #include \"feature_set.cpp\"\n \n using namespace visual_odometry;\n \n"
                },
                {
                    "date": 1647549949941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,10 @@\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n #include \"../include/vo.h\"\n+#include \"feature_set.cpp\"\n #include \"vo.cpp\"\n-#include \"feature_set.cpp\"\n \n using namespace visual_odometry;\n \n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1647550145463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n #include <opencv2/calib3d/calib3d.hpp>\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n-#include \"../include/vo.h\"\n+// #include \"../include/vo.h\"\n #include \"feature_set.cpp\"\n #include \"vo.cpp\"\n \n using namespace visual_odometry;\n"
                },
                {
                    "date": 1647550154382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,10 @@\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n // #include \"../include/vo.h\"\n+#include \"vo.cpp\"\n #include \"feature_set.cpp\"\n-#include \"vo.cpp\"\n \n using namespace visual_odometry;\n \n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1647550558694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,11 +4,11 @@\n #include <opencv2/calib3d/calib3d.hpp>\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n-// #include \"../include/vo.h\"\n-#include \"vo.cpp\"\n-#include \"feature_set.cpp\"\n+#include \"../include/vo.h\"\n+// #include \"vo.cpp\"\n+// #include \"feature_set.cpp\"\n \n using namespace visual_odometry;\n \n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1647550748524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,13 +5,13 @@\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n #include \"../include/vo.h\"\n-// #include \"vo.cpp\"\n-// #include \"feature_set.cpp\"\n+#include \"vo.cpp\"\n+#include \"feature_set.cpp\"\n \n using namespace visual_odometry;\n-\n+// /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n \n     if(argc < 5) {\n       std::cout << \"Too few arguments\" << std::endl;\n"
                },
                {
                    "date": 1647639169861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,12 +21,10 @@\n     // Disparity image data stucture\n     cv::Mat_<int16_t> disparity16;\n \n     // Image paths\n-    std::string prev_img_l_path = argv[1];\n-    std::string prev_img_r_path = argv[2];\n-    std::string cur_img_l_path = argv[1];\n-    std::string cur_img_r_path = argv[2];\n+    std::string prev_img_l_path = \"run1images/left\";\n+    std::string prev_img_r_path = \"run1images/right\";\n     std::string folderName = \"run1images\";\n \n     float fx= 282.06762;\n     float fy= 282.06762;\n"
                },
                {
                    "date": 1647639178542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,10 +21,10 @@\n     // Disparity image data stucture\n     cv::Mat_<int16_t> disparity16;\n \n     // Image paths\n-    std::string prev_img_l_path = \"run1images/left\";\n-    std::string prev_img_r_path = \"run1images/right\";\n+    std::string l_path = \"run1images/left\";\n+    std::string r_path = \"run1images/right\";\n     std::string folderName = \"run1images\";\n \n     float fx= 282.06762;\n     float fy= 282.06762;\n"
                },
                {
                    "date": 1647639201706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,11 +20,8 @@\n     \n     // Disparity image data stucture\n     cv::Mat_<int16_t> disparity16;\n \n-    // Image paths\n-    std::string l_path = \"run1images/left\";\n-    std::string r_path = \"run1images/right\";\n     std::string folderName = \"run1images\";\n \n     float fx= 282.06762;\n     float fy= 282.06762;\n"
                },
                {
                    "date": 1647639207973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,13 +12,8 @@\n using namespace visual_odometry;\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n \n-    if(argc < 5) {\n-      std::cout << \"Too few arguments\" << std::endl;\n-      return -1;\n-    }\n-    \n     // Disparity image data stucture\n     cv::Mat_<int16_t> disparity16;\n \n     std::string folderName = \"run1images\";\n"
                },
                {
                    "date": 1647639586962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n     VisualOdometry vo(projMatrl, projMatrr);\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n+        cout << \"acho\";\n         lFileName << folderName << \"/left/\" << std::setw(4) << i << \".jpg\";\n         rFileName << folderName << \"/right/\" << std::setw(4) << i << \".jpg\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n"
                },
                {
                    "date": 1647639600601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,16 +23,17 @@\n     float cx= 290.79884;\n     float cy= 182.52132;\n     float bf= -16.61097;\n \n+      std::cout << \"bcho\";\n     cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n     cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n \n     VisualOdometry vo(projMatrl, projMatrr);\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n-        cout << \"acho\";\n+        std::cout << \"acho\";\n         lFileName << folderName << \"/left/\" << std::setw(4) << i << \".jpg\";\n         rFileName << folderName << \"/right/\" << std::setw(4) << i << \".jpg\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n"
                },
                {
                    "date": 1647639615378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     float cx= 290.79884;\n     float cy= 182.52132;\n     float bf= -16.61097;\n \n-      std::cout << \"bcho\";\n+    std::cout << \"bcho\";\n     cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n     cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n \n     VisualOdometry vo(projMatrl, projMatrr);\n"
                },
                {
                    "date": 1647640100101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,16 +7,13 @@\n #include <iomanip>\n #include \"../include/vo.h\"\n #include \"vo.cpp\"\n #include \"feature_set.cpp\"\n-\n+using namespace cv;\n using namespace visual_odometry;\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n \n-    // Disparity image data stucture\n-    cv::Mat_<int16_t> disparity16;\n-\n     std::string folderName = \"run1images\";\n \n     float fx= 282.06762;\n     float fy= 282.06762;\n@@ -24,8 +21,11 @@\n     float cy= 182.52132;\n     float bf= -16.61097;\n \n     std::cout << \"bcho\";\n+    // Disparity image data stucture\n+    cv::Mat_<int16_t> disparity16;\n+\n     cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n     cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n \n     VisualOdometry vo(projMatrl, projMatrr);\n"
                },
                {
                    "date": 1647640110482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,8 @@\n #include <iomanip>\n #include \"../include/vo.h\"\n #include \"vo.cpp\"\n #include \"feature_set.cpp\"\n-using namespace cv;\n using namespace visual_odometry;\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n \n"
                },
                {
                    "date": 1647640259760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n #include <iomanip>\n #include \"../include/vo.h\"\n #include \"vo.cpp\"\n #include \"feature_set.cpp\"\n+\n using namespace visual_odometry;\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n \n"
                },
                {
                    "date": 1647640279650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,18 +27,18 @@\n \n     cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n     cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n \n-    VisualOdometry vo(projMatrl, projMatrr);\n+    // VisualOdometry vo(projMatrl, projMatrr);\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         std::cout << \"acho\";\n         lFileName << folderName << \"/left/\" << std::setw(4) << i << \".jpg\";\n         rFileName << folderName << \"/right/\" << std::setw(4) << i << \".jpg\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n-        vo.stereo_callback(cur_img_l, cur_img_r);\n+        // vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n"
                },
                {
                    "date": 1647640285840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n-#include <opencv2/core.hpp>\n-#include <opencv2/imgcodecs.hpp>\n-#include <opencv2/highgui.hpp>\n-#include <opencv2/calib3d/calib3d.hpp>\n+// #include <opencv2/core.hpp>\n+// #include <opencv2/imgcodecs.hpp>\n+// #include <opencv2/highgui.hpp>\n+// #include <opencv2/calib3d/calib3d.hpp>\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n-#include \"../include/vo.h\"\n-#include \"vo.cpp\"\n-#include \"feature_set.cpp\"\n+// #include \"../include/vo.h\"\n+// #include \"vo.cpp\"\n+// #include \"feature_set.cpp\"\n \n using namespace visual_odometry;\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1647640295876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n // #include <opencv2/calib3d/calib3d.hpp>\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n-// #include \"../include/vo.h\"\n+#include \"../include/vo.h\"\n // #include \"vo.cpp\"\n // #include \"feature_set.cpp\"\n \n using namespace visual_odometry;\n"
                },
                {
                    "date": 1647640309417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n #include \"../include/vo.h\"\n-// #include \"vo.cpp\"\n+#include \"vo.cpp\"\n // #include \"feature_set.cpp\"\n \n using namespace visual_odometry;\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n"
                },
                {
                    "date": 1647640322652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n #include <sstream>\n #include <iomanip>\n #include \"../include/vo.h\"\n #include \"vo.cpp\"\n-// #include \"feature_set.cpp\"\n+#include \"feature_set.cpp\"\n \n using namespace visual_odometry;\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n@@ -27,18 +27,18 @@\n \n     cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n     cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n \n-    // VisualOdometry vo(projMatrl, projMatrr);\n+    VisualOdometry vo(projMatrl, projMatrr);\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         std::cout << \"acho\";\n         lFileName << folderName << \"/left/\" << std::setw(4) << i << \".jpg\";\n         rFileName << folderName << \"/right/\" << std::setw(4) << i << \".jpg\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n-        // vo.stereo_callback(cur_img_l, cur_img_r);\n+        vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n"
                },
                {
                    "date": 1647640328148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n // #include <opencv2/core.hpp>\n // #include <opencv2/imgcodecs.hpp>\n-// #include <opencv2/highgui.hpp>\n+#include <opencv2/highgui.hpp>\n // #include <opencv2/calib3d/calib3d.hpp>\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n"
                },
                {
                    "date": 1647640333401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// #include <opencv2/core.hpp>\n+#include <opencv2/core.hpp>\n // #include <opencv2/imgcodecs.hpp>\n #include <opencv2/highgui.hpp>\n // #include <opencv2/calib3d/calib3d.hpp>\n #include <iostream>\n"
                },
                {
                    "date": 1647640339739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n-#include <opencv2/core.hpp>\n+// #include <opencv2/core.hpp>\n // #include <opencv2/imgcodecs.hpp>\n-#include <opencv2/highgui.hpp>\n+// #include <opencv2/highgui.hpp>\n // #include <opencv2/calib3d/calib3d.hpp>\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n@@ -27,9 +27,9 @@\n \n     cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n     cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n \n-    VisualOdometry vo(projMatrl, projMatrr);\n+    // VisualOdometry vo(projMatrl, projMatrr);\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         std::cout << \"acho\";\n"
                },
                {
                    "date": 1647640350417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,10 @@\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n #include \"../include/vo.h\"\n-#include \"vo.cpp\"\n-#include \"feature_set.cpp\"\n+// #include \"vo.cpp\"\n+// #include \"feature_set.cpp\"\n \n using namespace visual_odometry;\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n@@ -36,9 +36,9 @@\n         lFileName << folderName << \"/left/\" << std::setw(4) << i << \".jpg\";\n         rFileName << folderName << \"/right/\" << std::setw(4) << i << \".jpg\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n-        vo.stereo_callback(cur_img_l, cur_img_r);\n+        // vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n"
                },
                {
                    "date": 1647640421527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,8 @@\n \n using namespace visual_odometry;\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n-\n     std::string folderName = \"run1images\";\n \n     float fx= 282.06762;\n     float fy= 282.06762;\n"
                },
                {
                    "date": 1647640429755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n // #include <opencv2/calib3d/calib3d.hpp>\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n-#include \"../include/vo.h\"\n+// #include \"../include/vo.h\"\n // #include \"vo.cpp\"\n // #include \"feature_set.cpp\"\n \n using namespace visual_odometry;\n"
                },
                {
                    "date": 1647640438257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,22 +21,22 @@\n     float bf= -16.61097;\n \n     std::cout << \"bcho\";\n     // Disparity image data stucture\n-    cv::Mat_<int16_t> disparity16;\n+    // cv::Mat_<int16_t> disparity16;\n \n-    cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n-    cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n+    // cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n+    // cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n \n     // VisualOdometry vo(projMatrl, projMatrr);\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         std::cout << \"acho\";\n         lFileName << folderName << \"/left/\" << std::setw(4) << i << \".jpg\";\n         rFileName << folderName << \"/right/\" << std::setw(4) << i << \".jpg\";\n-        const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n-        const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n+        // const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n+        // const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n         // vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1647640480166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n // #include \"../include/vo.h\"\n // #include \"vo.cpp\"\n // #include \"feature_set.cpp\"\n \n-using namespace visual_odometry;\n+// using namespace visual_odometry;\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n     std::string folderName = \"run1images\";\n \n"
                },
                {
                    "date": 1647640501866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n // #include <opencv2/calib3d/calib3d.hpp>\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n-// #include \"../include/vo.h\"\n+#include \"../include/vo.h\"\n // #include \"vo.cpp\"\n // #include \"feature_set.cpp\"\n \n // using namespace visual_odometry;\n"
                },
                {
                    "date": 1647640529479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n-// #include <opencv2/core.hpp>\n-// #include <opencv2/imgcodecs.hpp>\n-// #include <opencv2/highgui.hpp>\n-// #include <opencv2/calib3d/calib3d.hpp>\n+#include <opencv2/core.hpp>\n+#include <opencv2/imgcodecs.hpp>\n+#include <opencv2/highgui.hpp>\n+#include <opencv2/calib3d/calib3d.hpp>\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n #include \"../include/vo.h\"\n"
                },
                {
                    "date": 1647640549368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,12 +21,12 @@\n     float bf= -16.61097;\n \n     std::cout << \"bcho\";\n     // Disparity image data stucture\n-    // cv::Mat_<int16_t> disparity16;\n+    cv::Mat_<int16_t> disparity16;\n \n-    // cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n-    // cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n+    cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n+    cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n \n     // VisualOdometry vo(projMatrl, projMatrr);\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n"
                },
                {
                    "date": 1647640564714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,11 +33,11 @@\n         std::stringstream rFileName;\n         std::cout << \"acho\";\n         lFileName << folderName << \"/left/\" << std::setw(4) << i << \".jpg\";\n         rFileName << folderName << \"/right/\" << std::setw(4) << i << \".jpg\";\n-        // const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n-        // const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n-        // vo.stereo_callback(cur_img_l, cur_img_r);\n+        const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n+        const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n+        vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n"
                },
                {
                    "date": 1647640614119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,8 @@\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n #include \"../include/vo.h\"\n-// #include \"vo.cpp\"\n-// #include \"feature_set.cpp\"\n \n // using namespace visual_odometry;\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n@@ -33,11 +31,11 @@\n         std::stringstream rFileName;\n         std::cout << \"acho\";\n         lFileName << folderName << \"/left/\" << std::setw(4) << i << \".jpg\";\n         rFileName << folderName << \"/right/\" << std::setw(4) << i << \".jpg\";\n-        const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n-        const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n-        vo.stereo_callback(cur_img_l, cur_img_r);\n+        // const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n+        // const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n+        // vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n"
                },
                {
                    "date": 1647640628730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,18 +24,18 @@\n \n     cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n     cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n \n-    // VisualOdometry vo(projMatrl, projMatrr);\n+    VisualOdometry vo(projMatrl, projMatrr);\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         std::cout << \"acho\";\n         lFileName << folderName << \"/left/\" << std::setw(4) << i << \".jpg\";\n         rFileName << folderName << \"/right/\" << std::setw(4) << i << \".jpg\";\n-        // const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n-        // const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n-        // vo.stereo_callback(cur_img_l, cur_img_r);\n+        const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n+        const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n+        vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n"
                },
                {
                    "date": 1647640646236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n #include <sstream>\n #include <iomanip>\n #include \"../include/vo.h\"\n \n-// using namespace visual_odometry;\n+using namespace visual_odometry;\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n     std::string folderName = \"run1images\";\n \n"
                },
                {
                    "date": 1647640659502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n         lFileName << folderName << \"/left/\" << std::setw(4) << i << \".jpg\";\n         rFileName << folderName << \"/right/\" << std::setw(4) << i << \".jpg\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n-        vo.stereo_callback(cur_img_l, cur_img_r);\n+        // vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n"
                },
                {
                    "date": 1647640674950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n     VisualOdometry vo(projMatrl, projMatrr);\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n-        std::cout << \"acho\";\n+        std::cout << \"acho\" << endl;\n         lFileName << folderName << \"/left/\" << std::setw(4) << i << \".jpg\";\n         rFileName << folderName << \"/right/\" << std::setw(4) << i << \".jpg\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n"
                },
                {
                    "date": 1647640680105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n     VisualOdometry vo(projMatrl, projMatrr);\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n-        std::cout << \"acho\" << endl;\n+        std::cout << \"acho\" << std::endl;\n         lFileName << folderName << \"/left/\" << std::setw(4) << i << \".jpg\";\n         rFileName << folderName << \"/right/\" << std::setw(4) << i << \".jpg\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n"
                },
                {
                    "date": 1647640825120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,8 @@\n     float cx= 290.79884;\n     float cy= 182.52132;\n     float bf= -16.61097;\n \n-    std::cout << \"bcho\";\n     // Disparity image data stucture\n     cv::Mat_<int16_t> disparity16;\n \n     cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n@@ -28,14 +27,13 @@\n     VisualOdometry vo(projMatrl, projMatrr);\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n-        std::cout << \"acho\" << std::endl;\n         lFileName << folderName << \"/left/\" << std::setw(4) << i << \".jpg\";\n         rFileName << folderName << \"/right/\" << std::setw(4) << i << \".jpg\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n-        // vo.stereo_callback(cur_img_l, cur_img_r);\n+        vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n"
                },
                {
                    "date": 1647642697420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n         lFileName << folderName << \"/left/\" << std::setw(4) << i << \".jpg\";\n         rFileName << folderName << \"/right/\" << std::setw(4) << i << \".jpg\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n+        std::cout << cur_img_l.rows << \"  \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1647643080087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/\" << std::setw(4) << i << \".jpg\";\n         rFileName << folderName << \"/right/\" << std::setw(4) << i << \".jpg\";\n-        const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n+        const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n         std::cout << cur_img_l.rows << \"  \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n"
                },
                {
                    "date": 1647643134041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     VisualOdometry vo(projMatrl, projMatrr);\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n-        lFileName << folderName << \"/left/\" << std::setw(4) << i << \".jpg\";\n+        lFileName << folderName << \"/leaft/\" << std::setw(4) << i << \".jpg\";\n         rFileName << folderName << \"/right/\" << std::setw(4) << i << \".jpg\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n         std::cout << cur_img_l.rows << \"  \" << cur_img_r.cols << std::endl;\n"
                },
                {
                    "date": 1647643156567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     VisualOdometry vo(projMatrl, projMatrr);\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n-        lFileName << folderName << \"/leaft/\" << std::setw(4) << i << \".jpg\";\n+        lFileName << folderName << \"/left/\" << std::setw(4) << i << \".jpg\";\n         rFileName << folderName << \"/right/\" << std::setw(4) << i << \".jpg\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n         std::cout << cur_img_l.rows << \"  \" << cur_img_r.cols << std::endl;\n"
                },
                {
                    "date": 1647643175605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,10 +27,11 @@\n     VisualOdometry vo(projMatrl, projMatrr);\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n-        lFileName << folderName << \"/left/\" << std::setw(4) << i << \".jpg\";\n-        rFileName << folderName << \"/right/\" << std::setw(4) << i << \".jpg\";\n+        lFileName << folderName << \"/left/\" << std::setw(6) << i << \".jpg\";\n+        rFileName << folderName << \"/right/\" << std::setw(6) << i << \".jpg\";\n+        std::cout << lFileName << std::endl;\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n         std::cout << cur_img_l.rows << \"  \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n"
                },
                {
                    "date": 1647643185812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/\" << std::setw(6) << i << \".jpg\";\n         rFileName << folderName << \"/right/\" << std::setw(6) << i << \".jpg\";\n-        std::cout << lFileName << std::endl;\n+        std::cout << lFileName.str() << std::endl;\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n         std::cout << cur_img_l.rows << \"  \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n"
                },
                {
                    "date": 1647643199756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,9 @@\n         std::cout << lFileName.str() << std::endl;\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n         std::cout << cur_img_l.rows << \"  \" << cur_img_r.cols << std::endl;\n+        break;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1647643258996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,16 +27,17 @@\n     VisualOdometry vo(projMatrl, projMatrr);\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n-        lFileName << folderName << \"/left/\" << std::setw(6) << i << \".jpg\";\n-        rFileName << folderName << \"/right/\" << std::setw(6) << i << \".jpg\";\n+        std::cout << std::setw(6) << std::setfill('0');\n+        lFileName << folderName << \"/left/frame\" << <<  i << \".jpg\";\n+        rFileName << folderName << \"/right/frame\" << std::setw(6) << i << \".jpg\";\n         std::cout << lFileName.str() << std::endl;\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n         std::cout << cur_img_l.rows << \"  \" << cur_img_r.cols << std::endl;\n+        vo.stereo_callback(cur_img_l, cur_img_r);\n         break;\n-        vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n"
                },
                {
                    "date": 1647643266971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,10 @@\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         std::cout << std::setw(6) << std::setfill('0');\n-        lFileName << folderName << \"/left/frame\" << <<  i << \".jpg\";\n-        rFileName << folderName << \"/right/frame\" << std::setw(6) << i << \".jpg\";\n+        std::cout << lFileName << folderName << \"/left/frame\" <<  i << \".jpg\";\n+        rFileName << folderName << \"/right/frame\" << i << \".jpg\";\n         std::cout << lFileName.str() << std::endl;\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n         std::cout << cur_img_l.rows << \"  \" << cur_img_r.cols << std::endl;\n"
                },
                {
                    "date": 1647643291213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     VisualOdometry vo(projMatrl, projMatrr);\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n-        std::cout << std::setw(6) << std::setfill('0');\n+        std::cout << std::setw(6) << std::setfill('0') << 1;\n         std::cout << lFileName << folderName << \"/left/frame\" <<  i << \".jpg\";\n         rFileName << folderName << \"/right/frame\" << i << \".jpg\";\n         std::cout << lFileName.str() << std::endl;\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n"
                },
                {
                    "date": 1647643302707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,10 +27,10 @@\n     VisualOdometry vo(projMatrl, projMatrr);\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n-        std::cout << std::setw(6) << std::setfill('0') << 1;\n-        std::cout << lFileName << folderName << \"/left/frame\" <<  i << \".jpg\";\n+        std::cout << std::setw(6) << std::setfill('0');\n+        std::cout << lFileName.str() << folderName << \"/left/frame\" <<  i << \".jpg\";\n         rFileName << folderName << \"/right/frame\" << i << \".jpg\";\n         std::cout << lFileName.str() << std::endl;\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n"
                },
                {
                    "date": 1647643318170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,9 @@\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         std::cout << std::setw(6) << std::setfill('0');\n         std::cout << lFileName.str() << folderName << \"/left/frame\" <<  i << \".jpg\";\n-        rFileName << folderName << \"/right/frame\" << i << \".jpg\";\n-        std::cout << lFileName.str() << std::endl;\n+        std::cout << rFileName.str() << folderName << \"/right/frame\" << i << \".jpg\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n         std::cout << cur_img_l.rows << \"  \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n"
                },
                {
                    "date": 1647643367745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,12 @@\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         std::cout << std::setw(6) << std::setfill('0');\n-        std::cout << lFileName.str() << folderName << \"/left/frame\" <<  i << \".jpg\";\n-        std::cout << rFileName.str() << folderName << \"/right/frame\" << i << \".jpg\";\n+        lFileName << folderName << \"/left/frame\" <<  i << \".jpg\";\n+        rFileName << folderName << \"/right/frame\" << i << \".jpg\";\n+        std::cout << lFileName.str() << endl;\n+        std::cout << rFileName.str() << endl;\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n         std::cout << cur_img_l.rows << \"  \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n"
                },
                {
                    "date": 1647643378026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,10 @@\n         std::stringstream rFileName;\n         std::cout << std::setw(6) << std::setfill('0');\n         lFileName << folderName << \"/left/frame\" <<  i << \".jpg\";\n         rFileName << folderName << \"/right/frame\" << i << \".jpg\";\n-        std::cout << lFileName.str() << endl;\n-        std::cout << rFileName.str() << endl;\n+        std::cout << lFileName.str() << std::endl;\n+        std::cout << rFileName.str() << std::endl;\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n         std::cout << cur_img_l.rows << \"  \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n"
                },
                {
                    "date": 1647643416318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         std::cout << std::setw(6) << std::setfill('0');\n-        lFileName << folderName << \"/left/frame\" <<  i << \".jpg\";\n+        lFileName << folderName << \"/left/frame\" <<  std::setw(6) << std::setfill('0') << i << \".jpg\";\n         rFileName << folderName << \"/right/frame\" << i << \".jpg\";\n         std::cout << lFileName.str() << std::endl;\n         std::cout << rFileName.str() << std::endl;\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n"
                },
                {
                    "date": 1647643436349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         std::cout << std::setw(6) << std::setfill('0');\n         lFileName << folderName << \"/left/frame\" <<  std::setw(6) << std::setfill('0') << i << \".jpg\";\n-        rFileName << folderName << \"/right/frame\" << i << \".jpg\";\n+        rFileName << folderName << \"/right/frame\" <<  std::setw(6) << std::setfill('0') << i << \".jpg\";\n         std::cout << lFileName.str() << std::endl;\n         std::cout << rFileName.str() << std::endl;\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n"
                },
                {
                    "date": 1647643455322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,11 +27,10 @@\n     VisualOdometry vo(projMatrl, projMatrr);\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n-        std::cout << std::setw(6) << std::setfill('0');\n-        lFileName << folderName << \"/left/frame\" <<  std::setw(6) << std::setfill('0') << i << \".jpg\";\n-        rFileName << folderName << \"/right/frame\" <<  std::setw(6) << std::setfill('0') << i << \".jpg\";\n+        lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n+        rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         std::cout << lFileName.str() << std::endl;\n         std::cout << rFileName.str() << std::endl;\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n"
                },
                {
                    "date": 1647643472620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,8 @@\n         std::cout << lFileName.str() << std::endl;\n         std::cout << rFileName.str() << std::endl;\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n-        std::cout << cur_img_l.rows << \"  \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n         break;\n     }\n     \n"
                },
                {
                    "date": 1647643517899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,8 @@\n         std::cout << rFileName.str() << std::endl;\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n         vo.stereo_callback(cur_img_l, cur_img_r);\n-        break;\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n"
                },
                {
                    "date": 1647643851872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,8 @@\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n-        std::cout << lFileName.str() << std::endl;\n-        std::cout << rFileName.str() << std::endl;\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n"
                },
                {
                    "date": 1647644279067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n+        std::cout << vo.rows << \" \" << vo.rows << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1647644323365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n-        std::cout << vo.rows << \" \" << vo.rows << std::endl;\n+        std::cout << lFileName.rows << \" \" << rFileName.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1647644331802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,10 @@\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n-        std::cout << lFileName.rows << \" \" << rFileName.cols << std::endl;\n+        std::cout << lFileName.rows << \" \" << lFileName.cols << std::endl;\n+        std::cout << rFileName.rows << \" \" << rFileName.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1647644348421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,10 @@\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n-        std::cout << lFileName.rows << \" \" << lFileName.cols << std::endl;\n-        std::cout << rFileName.rows << \" \" << rFileName.cols << std::endl;\n+        std::cout << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n+        std::cout << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1647644546452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n-        const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n+        const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n         std::cout << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         std::cout << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n"
                },
                {
                    "date": 1647646185451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,10 @@\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n-        const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n-        const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n+        const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n+        const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n         std::cout << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         std::cout << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n"
                },
                {
                    "date": 1647646436369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n         std::cout << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n+        std::cout << cur_img_l(0,0) << std::endl;\n         std::cout << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n"
                },
                {
                    "date": 1647646461319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n         std::cout << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n-        std::cout << cur_img_l(0,0) << std::endl;\n+        std::cout << cur_img_l<uint8_t>(0,0) << std::endl;\n         std::cout << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n"
                },
                {
                    "date": 1647646488109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n         std::cout << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n-        std::cout << cur_img_l<uint8_t>(0,0) << std::endl;\n+        std::cout << cur_img_l.at(0,0) << std::endl;\n         std::cout << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n"
                },
                {
                    "date": 1647646989774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n         std::cout << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n-        std::cout << cur_img_l.at(0,0) << std::endl;\n+        std::cout << cur_img_l.at<float>(0,0) << std::endl;\n         std::cout << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n"
                },
                {
                    "date": 1647647038570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,10 @@\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n         std::cout << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n-        std::cout << cur_img_l.at<float>(0,0) << std::endl;\n+        std::cout << cur_img_l.dtype << std::endl;\n+        // std::cout << cur_img_l.at<float>(0,0) << std::endl;\n         std::cout << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n"
                },
                {
                    "date": 1647647091967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,10 @@\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n-        const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n-        const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n+        const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::CV_LOAD_IMAGE_COLOR);\n+        const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::CV_LOAD_IMAGE_COLOR);\n         std::cout << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         std::cout << cur_img_l.dtype << std::endl;\n         // std::cout << cur_img_l.at<float>(0,0) << std::endl;\n         std::cout << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n"
                },
                {
                    "date": 1647647104907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,10 @@\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n-        const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::CV_LOAD_IMAGE_COLOR);\n-        const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::CV_LOAD_IMAGE_COLOR);\n+        const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n+        const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n         std::cout << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         std::cout << cur_img_l.dtype << std::endl;\n         // std::cout << cur_img_l.at<float>(0,0) << std::endl;\n         std::cout << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n"
                },
                {
                    "date": 1647647148566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,12 +31,11 @@\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n-        std::cout << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n-        std::cout << cur_img_l.dtype << std::endl;\n+        std::cout << cur_img_l.channels << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         // std::cout << cur_img_l.at<float>(0,0) << std::endl;\n-        std::cout << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n+        std::cout << cur_img_l.channels << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1647647155876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n         std::cout << cur_img_l.channels << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n-        // std::cout << cur_img_l.at<float>(0,0) << std::endl;\n+        std::cout << cur_img_l.at<uint8_t>(0,0) << std::endl;\n         std::cout << cur_img_l.channels << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n"
                },
                {
                    "date": 1647647163398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,11 +31,11 @@\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n-        std::cout << cur_img_l.channels << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n+        std::cout << cur_img_l.channels() << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         std::cout << cur_img_l.at<uint8_t>(0,0) << std::endl;\n-        std::cout << cur_img_l.channels << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n+        std::cout << cur_img_l.channels() << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1647647210779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,11 +31,11 @@\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n-        std::cout << cur_img_l.channels() << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n-        std::cout << cur_img_l.at<uint8_t>(0,0) << std::endl;\n-        std::cout << cur_img_l.channels() << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n+        std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n+        std::cout << \"entry: \" << cur_img_l.at<uint8_t>(0,0) << std::endl;\n+        std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1647647229425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n         std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n-        std::cout << \"entry: \" << cur_img_l.at<uint8_t>(0,0) << std::endl;\n+        std::cout << \"entry: \" << cur_img_l.at<uint8_t>(0, 0,0) << std::endl;\n         std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n"
                },
                {
                    "date": 1647647274118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n         std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n-        std::cout << \"entry: \" << cur_img_l.at<uint8_t>(0, 0,0) << std::endl;\n+        std::cout < cur_img_l << std::endl;\n         std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n"
                },
                {
                    "date": 1647647279462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n         std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n-        std::cout < cur_img_l << std::endl;\n+        std::cout << cur_img_l << std::endl;\n         std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n"
                },
                {
                    "date": 1647647307503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,10 @@\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n-        const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n-        const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n+        const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n+        const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n         std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         std::cout << cur_img_l << std::endl;\n         std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n"
                },
                {
                    "date": 1647647321883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,10 @@\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n-        const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n-        const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n+        const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n+        const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n         std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         std::cout << cur_img_l << std::endl;\n         std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n"
                },
                {
                    "date": 1647647368049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n         std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n-        std::cout << cur_img_l << std::endl;\n+        // std::cout << cur_img_l << std::endl;\n         std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n"
                },
                {
                    "date": 1647648130260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,11 +31,11 @@\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n-        std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n+        // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         // std::cout << cur_img_l << std::endl;\n-        std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n+        // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1647657713168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n #include <opencv2/calib3d/calib3d.hpp>\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n-#include \"../include/vo.h\"\n+#include \"vo.h\"\n \n using namespace visual_odometry;\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1647657775875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,9 @@\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         // std::cout << cur_img_l << std::endl;\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n+        dbg(i);\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1647658682134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         // std::cout << cur_img_l << std::endl;\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n-        dbg(i);\n+        dbg(i); \n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1647658782089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,13 +11,13 @@\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n     std::string folderName = \"run1images\";\n \n-    float fx= 282.06762;\n-    float fy= 282.06762;\n-    float cx= 290.79884;\n-    float cy= 182.52132;\n-    float bf= -16.61097;\n+    float fx= 220.44908;\n+    float fy= 220.44908;\n+    float cx= 222.01352;\n+    float cy= 146.41498;\n+    float bf= -10.97633;\n \n     // Disparity image data stucture\n     cv::Mat_<int16_t> disparity16;\n \n@@ -34,9 +34,9 @@\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         // std::cout << cur_img_l << std::endl;\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n-        dbg(i); \n+        dbg(i);\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1647659415963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n #include <opencv2/calib3d/calib3d.hpp>\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n-#include \"vo.h\"\n+#include <vo.h>\n \n using namespace visual_odometry;\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1647659422909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n #include <opencv2/calib3d/calib3d.hpp>\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n-#include <vo.h>\n+#include \"vo.h\"\n \n using namespace visual_odometry;\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1647660078450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n     cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n \n     VisualOdometry vo(projMatrl, projMatrr);\n-    for(int i = 0; i < 128; i++) {\n+    for(int i = 0; i < 5; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n"
                },
                {
                    "date": 1648062325784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,10 @@\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n-        const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_COLOR);\n-        const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_COLOR);\n+        const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n+        const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         // std::cout << cur_img_l << std::endl;\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         dbg(i);\n"
                },
                {
                    "date": 1648063478213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,14 @@\n #include <iomanip>\n #include \"vo.h\"\n \n using namespace visual_odometry;\n+\n+\n+int test_bucket() {\n+\n+}\n+\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n     std::string folderName = \"run1images\";\n \n"
                },
                {
                    "date": 1648063590170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,10 @@\n \n using namespace visual_odometry;\n \n \n-int test_bucket() {\n-\n+void test_bucket() {\n+  Bucket();\n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1648063596634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n using namespace visual_odometry;\n \n \n void test_bucket() {\n-  Bucket();\n+  Bucket b();\n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1648063682363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n using namespace visual_odometry;\n \n \n void test_bucket() {\n-  Bucket b();\n+  Bucket b(5);\n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1648063766109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,12 @@\n using namespace visual_odometry;\n \n \n void test_bucket() {\n-  Bucket b(5);\n+  Bucket b(3);\n+  cv::Point2f p1{3,4};\n+  vector<int> ages = {1, 2, 3, 4, 5};\n+  b.add_feature(p1, );\n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1648063774010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n \n void test_bucket() {\n   Bucket b(3);\n   cv::Point2f p1{3,4};\n-  vector<int> ages = {1, 2, 3, 4, 5};\n+  std::vector<int> ages = {1, 2, 3, 4, 5};\n   b.add_feature(p1, );\n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n"
                },
                {
                    "date": 1648063800278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,11 +11,11 @@\n \n \n void test_bucket() {\n   Bucket b(3);\n-  cv::Point2f p1{3,4};\n+  std::vector<cv::Point2f> points(5, {1, 1});\n   std::vector<int> ages = {1, 2, 3, 4, 5};\n-  b.add_feature(p1, );\n+  b.add_feature(p1, ages[i]);\n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1648063818575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,10 @@\n void test_bucket() {\n   Bucket b(3);\n   std::vector<cv::Point2f> points(5, {1, 1});\n   std::vector<int> ages = {1, 2, 3, 4, 5};\n-  b.add_feature(p1, ages[i]);\n+  std::vector<int> strengths = {1, 2, 3, 4, 5};\n+  b.add_feature(points[i], ages[i], s);\n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1648063827821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,11 @@\n \n void test_bucket() {\n   Bucket b(3);\n   std::vector<cv::Point2f> points(5, {1, 1});\n-  std::vector<int> ages = {1, 2, 3, 4, 5};\n-  std::vector<int> strengths = {1, 2, 3, 4, 5};\n-  b.add_feature(points[i], ages[i], s);\n+  std::vector<int> ages = {6, 2, 3, 4, 5};\n+  std::vector<int> strengths = {6, 2, 3, 4, 5};\n+  b.add_feature(points[i], ages[i], strengths[i]);\n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1648063846184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,11 @@\n   Bucket b(3);\n   std::vector<cv::Point2f> points(5, {1, 1});\n   std::vector<int> ages = {6, 2, 3, 4, 5};\n   std::vector<int> strengths = {6, 2, 3, 4, 5};\n-  b.add_feature(points[i], ages[i], strengths[i]);\n+  for(int i = 0; i < 5; i++){\n+    b.add_feature(points[i], ages[i], strengths[i]);\n+  }\n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1648063897264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,16 +9,27 @@\n \n using namespace visual_odometry;\n \n \n-void test_bucket() {\n+void test_bucket_empty() {\n+  Bucket b(0);\n+  std::vector<cv::Point2f> points(5, {1, 1});\n+  std::vector<int> ages = {6, 2, 3, 4, 5};\n+  std::vector<int> strengths = {6, 2, 3, 4, 5};\n+  for(int i = 0; i < 5; i++){\n+    b.add_feature(points[i], ages[i], strengths[i]);\n+  }\n+  assert b.\n+}\n+void test_bucket_nonempty() {\n   Bucket b(3);\n   std::vector<cv::Point2f> points(5, {1, 1});\n   std::vector<int> ages = {6, 2, 3, 4, 5};\n   std::vector<int> strengths = {6, 2, 3, 4, 5};\n   for(int i = 0; i < 5; i++){\n     b.add_feature(points[i], ages[i], strengths[i]);\n   }\n+\n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1648063956978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,10 @@\n   std::vector<int> strengths = {6, 2, 3, 4, 5};\n   for(int i = 0; i < 5; i++){\n     b.add_feature(points[i], ages[i], strengths[i]);\n   }\n-  assert b.\n+  assert(b.max_size == 0);\n+  assert(b.features.size() == 0);\n }\n void test_bucket_nonempty() {\n   Bucket b(3);\n   std::vector<cv::Point2f> points(5, {1, 1});\n"
                },
                {
                    "date": 1648063966745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,10 @@\n   std::vector<int> strengths = {6, 2, 3, 4, 5};\n   for(int i = 0; i < 5; i++){\n     b.add_feature(points[i], ages[i], strengths[i]);\n   }\n+  assert(b.max_size == 3);\n+  assert(b.features.size() == 3);\n \n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n"
                },
                {
                    "date": 1648064005328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,14 @@\n     b.add_feature(points[i], ages[i], strengths[i]);\n   }\n   assert(b.max_size == 3);\n   assert(b.features.size() == 3);\n-\n+  assert(b.features.ages[0] == 6);\n+  assert(b.features.ages[1] == 4);\n+  assert(b.features.ages[2] == 5);\n+  assert(b.features.strengths[0] == 6);\n+  assert(b.features.strengths[1] == 4);\n+  assert(b.features.strengths[2] == 5);\n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1648064017448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n }\n void test_bucket_nonempty() {\n   Bucket b(3);\n   std::vector<cv::Point2f> points(5, {1, 1});\n-  std::vector<int> ages = {6, 2, 3, 4, 5};\n+  std::vector<int> ages = {12, 2, 4, 8, 10};\n   std::vector<int> strengths = {6, 2, 3, 4, 5};\n   for(int i = 0; i < 5; i++){\n     b.add_feature(points[i], ages[i], strengths[i]);\n   }\n"
                },
                {
                    "date": 1648064055169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n void test_bucket_empty() {\n   Bucket b(0);\n   std::vector<cv::Point2f> points(5, {1, 1});\n   std::vector<int> ages = {6, 2, 3, 4, 5};\n-  std::vector<int> strengths = {6, 2, 3, 4, 5};\n+  std::vector<int> strengths = {60, 20, 30, 40, 50};\n   for(int i = 0; i < 5; i++){\n     b.add_feature(points[i], ages[i], strengths[i]);\n   }\n   assert(b.max_size == 0);\n@@ -23,10 +23,10 @@\n }\n void test_bucket_nonempty() {\n   Bucket b(3);\n   std::vector<cv::Point2f> points(5, {1, 1});\n-  std::vector<int> ages = {12, 2, 4, 8, 10};\n-  std::vector<int> strengths = {6, 2, 3, 4, 5};\n+  std::vector<int> ages = {6, 2, 3, 4, 5};\n+  std::vector<int> strengths = {60, 20, 30, 40, 50};\n   for(int i = 0; i < 5; i++){\n     b.add_feature(points[i], ages[i], strengths[i]);\n   }\n   assert(b.max_size == 3);\n"
                },
                {
                    "date": 1648064084069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,11 +33,11 @@\n   assert(b.features.size() == 3);\n   assert(b.features.ages[0] == 6);\n   assert(b.features.ages[1] == 4);\n   assert(b.features.ages[2] == 5);\n-  assert(b.features.strengths[0] == 6);\n-  assert(b.features.strengths[1] == 4);\n-  assert(b.features.strengths[2] == 5);\n+  assert(b.features.strengths[0] == 60);\n+  assert(b.features.strengths[1] == 40);\n+  assert(b.features.strengths[2] == 50);\n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1648064094615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n   }\n   assert(b.max_size == 0);\n   assert(b.features.size() == 0);\n }\n+\n void test_bucket_nonempty() {\n   Bucket b(3);\n   std::vector<cv::Point2f> points(5, {1, 1});\n   std::vector<int> ages = {6, 2, 3, 4, 5};\n"
                },
                {
                    "date": 1648064213276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,8 @@\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n #include \"vo.h\"\n-\n using namespace visual_odometry;\n \n \n void test_bucket_empty() {\n@@ -39,8 +38,12 @@\n   assert(b.features.strengths[1] == 40);\n   assert(b.features.strengths[2] == 50);\n }\n \n+int run_tests(){\n+\n+}\n+\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n     std::string folderName = \"run1images\";\n \n"
                },
                {
                    "date": 1648064223979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,11 @@\n   assert(b.features.strengths[1] == 40);\n   assert(b.features.strengths[2] == 50);\n }\n \n-int run_tests(){\n+void run_tests(){\n+  test_bucket_empty();\n+  test_bucket_nonempty();\n \n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n"
                },
                {
                    "date": 1648064229754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,9 @@\n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n+    run_tests();\n     std::string folderName = \"run1images\";\n \n     float fx= 220.44908;\n     float fy= 220.44908;\n"
                },
                {
                    "date": 1648064252481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,9 @@\n   assert(b.features.strengths[2] == 50);\n }\n \n void run_tests(){\n+  cout << \"TEST BUCKET EMPTY\" << std::endl;\n   test_bucket_empty();\n   test_bucket_nonempty();\n \n }\n"
                },
                {
                    "date": 1648064261175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n   assert(b.features.strengths[2] == 50);\n }\n \n void run_tests(){\n-  cout << \"TEST BUCKET EMPTY\" << std::endl;\n+  std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n   test_bucket_empty();\n   test_bucket_nonempty();\n \n }\n"
                },
                {
                    "date": 1648064287061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,15 +41,17 @@\n \n void run_tests(){\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n   test_bucket_empty();\n+  std::cout << \"TEST BUCKET NONEMPTY\" << std::endl;\n   test_bucket_nonempty();\n \n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n     run_tests();\n+    return 0;\n     std::string folderName = \"run1images\";\n \n     float fx= 220.44908;\n     float fy= 220.44908;\n"
                },
                {
                    "date": 1648064298596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,9 @@\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n   test_bucket_empty();\n   std::cout << \"TEST BUCKET NONEMPTY\" << std::endl;\n   test_bucket_nonempty();\n+  std::cout << \"TEST BUCKET NONEMPTY\" << std::endl;\n \n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n"
                },
                {
                    "date": 1648064333373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,10 @@\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n   test_bucket_empty();\n   std::cout << \"TEST BUCKET NONEMPTY\" << std::endl;\n   test_bucket_nonempty();\n-  std::cout << \"TEST BUCKET NONEMPTY\" << std::endl;\n+  std::cout << \"TEST FEATURE\" << std::endl;\n+  assert(false);\n \n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n"
                },
                {
                    "date": 1648064354232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,16 +44,18 @@\n   test_bucket_empty();\n   std::cout << \"TEST BUCKET NONEMPTY\" << std::endl;\n   test_bucket_nonempty();\n   std::cout << \"TEST FEATURE\" << std::endl;\n+\n+  std::cout << \"ALL TESTS PASS\" << std::endl;\n   assert(false);\n+  std::cout << \"NEVERMIND ASSERTS WERE JUST DISABLED\" << std::endl;\n \n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n     run_tests();\n-    return 0;\n     std::string folderName = \"run1images\";\n \n     float fx= 220.44908;\n     float fy= 220.44908;\n"
                },
                {
                    "date": 1648064458772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,13 @@\n   assert(b.features.strengths[1] == 40);\n   assert(b.features.strengths[2] == 50);\n }\n \n+void test_featureset() {\n+  FeatureSet fs();\n+  const cv::Mat sample_image =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n+}\n+\n void run_tests(){\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n   test_bucket_empty();\n   std::cout << \"TEST BUCKET NONEMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648064489966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n }\n \n void test_featureset() {\n   FeatureSet fs();\n-  const cv::Mat sample_image =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n+  const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n }\n \n void run_tests(){\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648064508211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,10 @@\n \n void test_featureset() {\n   FeatureSet fs();\n   const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n+  fs.appendFeaturesFromImage(sample_image);\n+  \n }\n \n void run_tests(){\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648064537714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,12 +39,14 @@\n   assert(b.features.strengths[2] == 50);\n }\n \n void test_featureset() {\n-  FeatureSet fs();\n+  FeatureSet fs;\n   const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n+  assert(fs.size() == 0);\n   fs.appendFeaturesFromImage(sample_image);\n-  \n+  assert(fs.size() >= 20); /* Should detect quite a few points */\n+\n }\n \n void run_tests(){\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648064581915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,14 +52,13 @@\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n   test_bucket_empty();\n   std::cout << \"TEST BUCKET NONEMPTY\" << std::endl;\n   test_bucket_nonempty();\n-  std::cout << \"TEST FEATURE\" << std::endl;\n-\n+  std::cout << \"TEST FEATURE SET\" << std::endl;\n+  test_featureset();\n   std::cout << \"ALL TESTS PASS\" << std::endl;\n   assert(false);\n   std::cout << \"NEVERMIND ASSERTS WERE JUST DISABLED\" << std::endl;\n-\n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1648064764328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,10 @@\n   const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n   assert(fs.size() == 0);\n   fs.appendFeaturesFromImage(sample_image);\n   assert(fs.size() >= 20); /* Should detect quite a few points */\n+  fs.filterByBucketLocation(sample_image, 1);\n+  assert(fs.size() == 1);\n \n }\n \n void run_tests(){\n"
                },
                {
                    "date": 1648064786773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n   const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n   assert(fs.size() == 0);\n   fs.appendFeaturesFromImage(sample_image);\n   assert(fs.size() >= 20); /* Should detect quite a few points */\n-  fs.filterByBucketLocation(sample_image, 1);\n+  fs.filterByBucketLocation(sample_image, 1000);\n   assert(fs.size() == 1);\n \n }\n \n"
                },
                {
                    "date": 1648064798028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n   const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n   assert(fs.size() == 0);\n   fs.appendFeaturesFromImage(sample_image);\n   assert(fs.size() >= 20); /* Should detect quite a few points */\n-  fs.filterByBucketLocation(sample_image, 1000);\n+  fs.filterByBucketLocation(sample_image, 10000); /* Put it all in one bucket */\n   assert(fs.size() == 1);\n \n }\n \n"
                },
                {
                    "date": 1648064805760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n   assert(fs.size() == 0);\n   fs.appendFeaturesFromImage(sample_image);\n   assert(fs.size() >= 20); /* Should detect quite a few points */\n   fs.filterByBucketLocation(sample_image, 10000); /* Put it all in one bucket */\n-  assert(fs.size() == 1);\n+  assert(fs.size() == FEATURES_PER_BUCKET);\n \n }\n \n void run_tests(){\n"
                },
                {
                    "date": 1648064877299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,11 @@\n   FeatureSet fs;\n   const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n   assert(fs.size() == 0);\n   fs.appendFeaturesFromImage(sample_image);\n+  for(int i: ages){\n+\n+  }\n   assert(fs.size() >= 20); /* Should detect quite a few points */\n   fs.filterByBucketLocation(sample_image, 10000); /* Put it all in one bucket */\n   assert(fs.size() == FEATURES_PER_BUCKET);\n \n"
                },
                {
                    "date": 1648064883910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n   FeatureSet fs;\n   const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n   assert(fs.size() == 0);\n   fs.appendFeaturesFromImage(sample_image);\n-  for(int i: ages){\n+  for(int age: fs.ages){\n \n   }\n   assert(fs.size() >= 20); /* Should detect quite a few points */\n   fs.filterByBucketLocation(sample_image, 10000); /* Put it all in one bucket */\n"
                },
                {
                    "date": 1648064889527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n   const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n   assert(fs.size() == 0);\n   fs.appendFeaturesFromImage(sample_image);\n   for(int age: fs.ages){\n-\n+    assert(age == 0);\n   }\n   assert(fs.size() >= 20); /* Should detect quite a few points */\n   fs.filterByBucketLocation(sample_image, 10000); /* Put it all in one bucket */\n   assert(fs.size() == FEATURES_PER_BUCKET);\n"
                },
                {
                    "date": 1648064918944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,11 @@\n   fs.appendFeaturesFromImage(sample_image);\n   for(int age: fs.ages){\n     assert(age == 0);\n   }\n+  for(int strength: fs.strengths){\n+    assert(strength >= FAST_THRESHOLD );\n+  }\n   assert(fs.size() >= 20); /* Should detect quite a few points */\n   fs.filterByBucketLocation(sample_image, 10000); /* Put it all in one bucket */\n   assert(fs.size() == FEATURES_PER_BUCKET);\n \n"
                },
                {
                    "date": 1648064929963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,10 @@\n   for(int age: fs.ages){\n     assert(age == 0);\n   }\n   for(int strength: fs.strengths){\n-    assert(strength >= FAST_THRESHOLD );\n+    assert(strength >= FAST_THRESHOLD);\n+    assert(strength <= 100);\n   }\n   assert(fs.size() >= 20); /* Should detect quite a few points */\n   fs.filterByBucketLocation(sample_image, 10000); /* Put it all in one bucket */\n   assert(fs.size() == FEATURES_PER_BUCKET);\n"
                },
                {
                    "date": 1648064977080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,9 @@\n     assert(strength <= 100);\n   }\n   assert(fs.size() >= 20); /* Should detect quite a few points */\n   fs.filterByBucketLocation(sample_image, 10000); /* Put it all in one bucket */\n+  cout << fs.size();\n   assert(fs.size() == FEATURES_PER_BUCKET);\n \n }\n \n"
                },
                {
                    "date": 1648064983475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     assert(strength <= 100);\n   }\n   assert(fs.size() >= 20); /* Should detect quite a few points */\n   fs.filterByBucketLocation(sample_image, 10000); /* Put it all in one bucket */\n-  cout << fs.size();\n+  std::cout << fs.size() << std::endl;\n   assert(fs.size() == FEATURES_PER_BUCKET);\n \n }\n \n"
                },
                {
                    "date": 1648065038613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     assert(strength <= 100);\n   }\n   assert(fs.size() >= 20); /* Should detect quite a few points */\n   fs.filterByBucketLocation(sample_image, 10000); /* Put it all in one bucket */\n-  std::cout << fs.size() << std::endl;\n+  dbg(fs.size());\n   assert(fs.size() == FEATURES_PER_BUCKET);\n \n }\n \n"
                },
                {
                    "date": 1648065561894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     assert(strength >= FAST_THRESHOLD);\n     assert(strength <= 100);\n   }\n   assert(fs.size() >= 20); /* Should detect quite a few points */\n-  fs.filterByBucketLocation(sample_image, 10000); /* Put it all in one bucket */\n+  fs.filterByBucketLocation(sample_image); /* Put it all in one bucket */\n   dbg(fs.size());\n   assert(fs.size() == FEATURES_PER_BUCKET);\n \n }\n"
                },
                {
                    "date": 1648065856477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,10 +51,11 @@\n     assert(strength >= FAST_THRESHOLD);\n     assert(strength <= 100);\n   }\n   assert(fs.size() >= 20); /* Should detect quite a few points */\n-  fs.filterByBucketLocation(sample_image); /* Put it all in one bucket */\n   dbg(fs.size());\n+  fs.filterByBucketLocation(sample_image, 1, 1); /* Put it all in one bucket */\n+  dbg(fs.size());\n   assert(fs.size() == FEATURES_PER_BUCKET);\n \n }\n \n"
                },
                {
                    "date": 1648066268132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     assert(strength <= 100);\n   }\n   assert(fs.size() >= 20); /* Should detect quite a few points */\n   dbg(fs.size());\n-  fs.filterByBucketLocation(sample_image, 1, 1); /* Put it all in one bucket */\n+  fs.filterByBucketLocationInternal(sample_image, 1, 1); /* Put it all in one bucket */\n   dbg(fs.size());\n   assert(fs.size() == FEATURES_PER_BUCKET);\n \n }\n"
                },
                {
                    "date": 1648066275999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     assert(strength <= 100);\n   }\n   assert(fs.size() >= 20); /* Should detect quite a few points */\n   dbg(fs.size());\n-  fs.filterByBucketLocationInternal(sample_image, 1, 1); /* Put it all in one bucket */\n+  fs.filterByBucketLocationInternal(sample_image, 1, 1, 0); /* Put it all in one bucket */\n   dbg(fs.size());\n   assert(fs.size() == FEATURES_PER_BUCKET);\n \n }\n"
                },
                {
                    "date": 1648066416635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,11 +52,11 @@\n     assert(strength <= 100);\n   }\n   assert(fs.size() >= 20); /* Should detect quite a few points */\n   dbg(fs.size());\n-  fs.filterByBucketLocationInternal(sample_image, 1, 1, 0); /* Put it all in one bucket */\n+  fs.filterByBucketLocationInternal(sample_image, 1, 1, 0, 6); /* Put it all in one bucket */\n   dbg(fs.size());\n-  assert(fs.size() == FEATURES_PER_BUCKET);\n+  assert(fs.size() == 6);\n \n }\n \n void run_tests(){\n"
                },
                {
                    "date": 1648066438962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,13 +50,13 @@\n   for(int strength: fs.strengths){\n     assert(strength >= FAST_THRESHOLD);\n     assert(strength <= 100);\n   }\n+  dbg(fs.size());\n   assert(fs.size() >= 20); /* Should detect quite a few points */\n+  fs.filterByBucketLocationInternal(sample_image, 1, 1, 0, 7); /* Put it all in one bucket */\n   dbg(fs.size());\n-  fs.filterByBucketLocationInternal(sample_image, 1, 1, 0, 6); /* Put it all in one bucket */\n-  dbg(fs.size());\n-  assert(fs.size() == 6);\n+  assert(fs.size() == 7);\n \n }\n \n void run_tests(){\n"
                },
                {
                    "date": 1648066478498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     assert(strength >= FAST_THRESHOLD);\n     assert(strength <= 100);\n   }\n   dbg(fs.size());\n-  assert(fs.size() >= 20); /* Should detect quite a few points */\n+  assert(fs.size() >= 100); /* Should detect quite a few points */\n   fs.filterByBucketLocationInternal(sample_image, 1, 1, 0, 7); /* Put it all in one bucket */\n   dbg(fs.size());\n   assert(fs.size() == 7);\n \n"
                },
                {
                    "date": 1648066484160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,12 +50,10 @@\n   for(int strength: fs.strengths){\n     assert(strength >= FAST_THRESHOLD);\n     assert(strength <= 100);\n   }\n-  dbg(fs.size());\n-  assert(fs.size() >= 100); /* Should detect quite a few points */\n+  assert(fs.size() >= 100); /* Should detect quite a few points, got 125 */\n   fs.filterByBucketLocationInternal(sample_image, 1, 1, 0, 7); /* Put it all in one bucket */\n-  dbg(fs.size());\n   assert(fs.size() == 7);\n \n }\n \n"
                },
                {
                    "date": 1648066498845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,11 +50,11 @@\n   for(int strength: fs.strengths){\n     assert(strength >= FAST_THRESHOLD);\n     assert(strength <= 100);\n   }\n-  assert(fs.size() >= 100); /* Should detect quite a few points, got 125 */\n-  fs.filterByBucketLocationInternal(sample_image, 1, 1, 0, 7); /* Put it all in one bucket */\n-  assert(fs.size() == 7);\n+  assert(fs.size() >= 100); /* Should detect quite a few points, I got 125 */\n+  fs.filterByBucketLocationInternal(sample_image, 1, 1, 0, 77); /* Put it all in one bucket */\n+  assert(fs.size() == 77);\n \n }\n \n void run_tests(){\n"
                },
                {
                    "date": 1648066507124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,8 @@\n   }\n   assert(fs.size() >= 100); /* Should detect quite a few points, I got 125 */\n   fs.filterByBucketLocationInternal(sample_image, 1, 1, 0, 77); /* Put it all in one bucket */\n   assert(fs.size() == 77);\n-\n }\n \n void run_tests(){\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648066598878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,15 +55,17 @@\n   fs.filterByBucketLocationInternal(sample_image, 1, 1, 0, 77); /* Put it all in one bucket */\n   assert(fs.size() == 77);\n }\n \n-void run_tests(){\n+void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n   test_bucket_empty();\n   std::cout << \"TEST BUCKET NONEMPTY\" << std::endl;\n   test_bucket_nonempty();\n   std::cout << \"TEST FEATURE SET\" << std::endl;\n   test_featureset();\n+  std::cout << \"TEST FEATURE SET EDGE\" << std::endl;\n+  test_featuresetedge();\n   std::cout << \"ALL TESTS PASS\" << std::endl;\n   assert(false);\n   std::cout << \"NEVERMIND ASSERTS WERE JUST DISABLED\" << std::endl;\n }\n"
                },
                {
                    "date": 1648066615617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,24 @@\n   assert(fs.size() >= 100); /* Should detect quite a few points, I got 125 */\n   fs.filterByBucketLocationInternal(sample_image, 1, 1, 0, 77); /* Put it all in one bucket */\n   assert(fs.size() == 77);\n }\n+void test_featureset_filter() {\n+  FeatureSet fs;\n+  const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n+  assert(fs.size() == 0);\n+  fs.appendFeaturesFromImage(sample_image);\n+  for(int age: fs.ages){\n+    assert(age == 0);\n+  }\n+  for(int strength: fs.strengths){\n+    assert(strength >= FAST_THRESHOLD);\n+    assert(strength <= 100);\n+  }\n+  assert(fs.size() >= 100); /* Should detect quite a few points, I got 125 */\n+  fs.filterByBucketLocationInternal(sample_image, 1, 1, 0, 77); /* Put it all in one bucket */\n+  assert(fs.size() == 77);\n+}\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n   test_bucket_empty();\n"
                },
                {
                    "date": 1648066621181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n   test_bucket_nonempty();\n   std::cout << \"TEST FEATURE SET\" << std::endl;\n   test_featureset();\n   std::cout << \"TEST FEATURE SET EDGE\" << std::endl;\n-  test_featuresetedge();\n+  test_featureset_filter();\n   std::cout << \"ALL TESTS PASS\" << std::endl;\n   assert(false);\n   std::cout << \"NEVERMIND ASSERTS WERE JUST DISABLED\" << std::endl;\n }\n"
                },
                {
                    "date": 1648066664332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,8 +57,11 @@\n }\n void test_featureset_filter() {\n   FeatureSet fs;\n   const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n+  const image_rows = sample_image.rows;\n+  const image_cols = sample_image.cols;\n+\n   assert(fs.size() == 0);\n   fs.appendFeaturesFromImage(sample_image);\n   for(int age: fs.ages){\n     assert(age == 0);\n"
                },
                {
                    "date": 1648066715585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n   FeatureSet fs;\n   const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n   const image_rows = sample_image.rows;\n   const image_cols = sample_image.cols;\n-\n+  fs.points.push_back({image_rows - 1, image_cols - 1});\n   assert(fs.size() == 0);\n   fs.appendFeaturesFromImage(sample_image);\n   for(int age: fs.ages){\n     assert(age == 0);\n"
                },
                {
                    "date": 1648066728758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,11 @@\n   FeatureSet fs;\n   const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n   const image_rows = sample_image.rows;\n   const image_cols = sample_image.cols;\n-  fs.points.push_back({image_rows - 1, image_cols - 1});\n+  for(int i = 0; i < 20; i++){\n+    fs.points.push_back({image_rows - 1, image_cols - 1});\n+  }\n   assert(fs.size() == 0);\n   fs.appendFeaturesFromImage(sample_image);\n   for(int age: fs.ages){\n     assert(age == 0);\n"
                },
                {
                    "date": 1648066744108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,8 +62,11 @@\n   const image_cols = sample_image.cols;\n   for(int i = 0; i < 20; i++){\n     fs.points.push_back({image_rows - 1, image_cols - 1});\n   }\n+  for(int i = 0; i < 20; i++){\n+    fs.points.push_back({0, 0});\n+  }\n   assert(fs.size() == 0);\n   fs.appendFeaturesFromImage(sample_image);\n   for(int age: fs.ages){\n     assert(age == 0);\n"
                },
                {
                    "date": 1648066751074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n   for(int i = 0; i < 20; i++){\n     fs.points.push_back({image_rows - 1, image_cols - 1});\n   }\n   for(int i = 0; i < 20; i++){\n-    fs.points.push_back({0, 0});\n+    fs.points.push_back({image_rows - 1, 0});\n   }\n   assert(fs.size() == 0);\n   fs.appendFeaturesFromImage(sample_image);\n   for(int age: fs.ages){\n"
                },
                {
                    "date": 1648066770420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,8 +65,9 @@\n   }\n   for(int i = 0; i < 20; i++){\n     fs.points.push_back({image_rows - 1, 0});\n   }\n+  int bucket_height = (image_height + buckets_per_row - 1) / buckets_per_row;\n   assert(fs.size() == 0);\n   fs.appendFeaturesFromImage(sample_image);\n   for(int age: fs.ages){\n     assert(age == 0);\n"
                },
                {
                    "date": 1648066783408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,10 +57,10 @@\n }\n void test_featureset_filter() {\n   FeatureSet fs;\n   const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n-  const image_rows = sample_image.rows;\n-  const image_cols = sample_image.cols;\n+  const int image_rows = sample_image.rows;\n+  const int image_cols = sample_image.cols;\n   for(int i = 0; i < 20; i++){\n     fs.points.push_back({image_rows - 1, image_cols - 1});\n   }\n   for(int i = 0; i < 20; i++){\n"
                },
                {
                    "date": 1648066788728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n   }\n   for(int i = 0; i < 20; i++){\n     fs.points.push_back({image_rows - 1, 0});\n   }\n-  int bucket_height = (image_height + buckets_per_row - 1) / buckets_per_row;\n+  int bucket_height = (image_rows + buckets_per_row - 1) / buckets_per_row;\n   assert(fs.size() == 0);\n   fs.appendFeaturesFromImage(sample_image);\n   for(int age: fs.ages){\n     assert(age == 0);\n"
                },
                {
                    "date": 1648066806519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,8 +65,9 @@\n   }\n   for(int i = 0; i < 20; i++){\n     fs.points.push_back({image_rows - 1, 0});\n   }\n+  buckets_per_row = 2;\n   int bucket_height = (image_rows + buckets_per_row - 1) / buckets_per_row;\n   assert(fs.size() == 0);\n   fs.appendFeaturesFromImage(sample_image);\n   for(int age: fs.ages){\n"
                },
                {
                    "date": 1648066854913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,10 +65,12 @@\n   }\n   for(int i = 0; i < 20; i++){\n     fs.points.push_back({image_rows - 1, 0});\n   }\n-  buckets_per_row = 2;\n+  int buckets_per_row = 2;\n   int bucket_height = (image_rows + buckets_per_row - 1) / buckets_per_row;\n+  fs.points.push_back({bucket_height, 0});\n+\n   assert(fs.size() == 0);\n   fs.appendFeaturesFromImage(sample_image);\n   for(int age: fs.ages){\n     assert(age == 0);\n"
                },
                {
                    "date": 1648066868523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,10 +66,13 @@\n   for(int i = 0; i < 20; i++){\n     fs.points.push_back({image_rows - 1, 0});\n   }\n   int buckets_per_row = 2;\n+  int buckets_per_col = 2;\n   int bucket_height = (image_rows + buckets_per_row - 1) / buckets_per_row;\n-  fs.points.push_back({bucket_height, 0});\n+  for(int i = 0; i < 20; i++){\n+    fs.points.push_back({bucket_height, 0});\n+  }\n \n   assert(fs.size() == 0);\n   fs.appendFeaturesFromImage(sample_image);\n   for(int age: fs.ages){\n"
                },
                {
                    "date": 1648066878750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,18 +59,18 @@\n   FeatureSet fs;\n   const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n   const int image_rows = sample_image.rows;\n   const int image_cols = sample_image.cols;\n-  for(int i = 0; i < 20; i++){\n+  int buckets_per_row = 2;\n+  int buckets_per_col = 2;\n+  int bucket_height = (image_rows + buckets_per_row - 1) / buckets_per_row;\n+  for(int i = 0; i < 10; i++){\n     fs.points.push_back({image_rows - 1, image_cols - 1});\n   }\n-  for(int i = 0; i < 20; i++){\n+  for(int i = 0; i < 10; i++){\n     fs.points.push_back({image_rows - 1, 0});\n   }\n-  int buckets_per_row = 2;\n-  int buckets_per_col = 2;\n-  int bucket_height = (image_rows + buckets_per_row - 1) / buckets_per_row;\n-  for(int i = 0; i < 20; i++){\n+  for(int i = 0; i < 10; i++){\n     fs.points.push_back({bucket_height, 0});\n   }\n \n   assert(fs.size() == 0);\n"
                },
                {
                    "date": 1648066887400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,16 +73,8 @@\n     fs.points.push_back({bucket_height, 0});\n   }\n \n   assert(fs.size() == 0);\n-  fs.appendFeaturesFromImage(sample_image);\n-  for(int age: fs.ages){\n-    assert(age == 0);\n-  }\n-  for(int strength: fs.strengths){\n-    assert(strength >= FAST_THRESHOLD);\n-    assert(strength <= 100);\n-  }\n   assert(fs.size() >= 100); /* Should detect quite a few points, I got 125 */\n   fs.filterByBucketLocationInternal(sample_image, 1, 1, 0, 77); /* Put it all in one bucket */\n   assert(fs.size() == 77);\n }\n"
                },
                {
                    "date": 1648066900137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,19 +62,19 @@\n   const int image_cols = sample_image.cols;\n   int buckets_per_row = 2;\n   int buckets_per_col = 2;\n   int bucket_height = (image_rows + buckets_per_row - 1) / buckets_per_row;\n-  for(int i = 0; i < 10; i++){\n+  for(int i = 0; i < 100; i++){\n     fs.points.push_back({image_rows - 1, image_cols - 1});\n   }\n-  for(int i = 0; i < 10; i++){\n+  for(int i = 0; i < 109; i++){\n     fs.points.push_back({image_rows - 1, 0});\n   }\n-  for(int i = 0; i < 10; i++){\n+  for(int i = 0; i < 100; i++){\n     fs.points.push_back({bucket_height, 0});\n   }\n \n-  assert(fs.size() == 0);\n+  assert(fs.size() == 300);\n   assert(fs.size() >= 100); /* Should detect quite a few points, I got 125 */\n   fs.filterByBucketLocationInternal(sample_image, 1, 1, 0, 77); /* Put it all in one bucket */\n   assert(fs.size() == 77);\n }\n"
                },
                {
                    "date": 1648066911803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,10 +73,9 @@\n     fs.points.push_back({bucket_height, 0});\n   }\n \n   assert(fs.size() == 300);\n-  assert(fs.size() >= 100); /* Should detect quite a few points, I got 125 */\n-  fs.filterByBucketLocationInternal(sample_image, 1, 1, 0, 77); /* Put it all in one bucket */\n+  fs.filterByBucketLocationInternal(sample_image, 2, 2, 0, 300); /* Put it all in one bucket */\n   assert(fs.size() == 77);\n }\n \n void run_tests() {\n"
                },
                {
                    "date": 1648066921734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,10 +73,10 @@\n     fs.points.push_back({bucket_height, 0});\n   }\n \n   assert(fs.size() == 300);\n-  fs.filterByBucketLocationInternal(sample_image, 2, 2, 0, 300); /* Put it all in one bucket */\n-  assert(fs.size() == 77);\n+  fs.filterByBucketLocationInternal(sample_image, 2, 2, 0, 50); /* Put it all in one bucket */\n+  assert(fs.size() == 150);\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648066952049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n     fs.points.push_back({bucket_height, 0});\n   }\n \n   assert(fs.size() == 300);\n-  fs.filterByBucketLocationInternal(sample_image, 2, 2, 0, 50); /* Put it all in one bucket */\n+  fs.filterByBucketLocationInternal(sample_image, buckets_per_row, buckets_per_col, 0, 50); \n   assert(fs.size() == 150);\n }\n \n void run_tests() {\n"
                },
                {
                    "date": 1648066971067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,8 +75,10 @@\n \n   assert(fs.size() == 300);\n   fs.filterByBucketLocationInternal(sample_image, buckets_per_row, buckets_per_col, 0, 50); \n   assert(fs.size() == 150);\n+  fs.filterByBucketLocationInternal(sample_image, buckets_per_row, buckets_per_col, 0, 30); \n+  assert(fs.size() == 60);\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648066981498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n \n   assert(fs.size() == 300);\n   fs.filterByBucketLocationInternal(sample_image, buckets_per_row, buckets_per_col, 0, 50); \n   assert(fs.size() == 150);\n-  fs.filterByBucketLocationInternal(sample_image, buckets_per_row, buckets_per_col, 0, 30); \n+  fs.filterByBucketLocationInternal(sample_image, buckets_per_row, 2, 0, 30); \n   assert(fs.size() == 60);\n }\n \n void run_tests() {\n"
                },
                {
                    "date": 1648069061277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n \n   assert(fs.size() == 300);\n   fs.filterByBucketLocationInternal(sample_image, buckets_per_row, buckets_per_col, 0, 50); \n   assert(fs.size() == 150);\n-  fs.filterByBucketLocationInternal(sample_image, buckets_per_row, 2, 0, 30); \n+  fs.filterByBucketLocationInternal(sample_image, buckets_per_row, 1, 0, 30); \n   assert(fs.size() == 60);\n }\n \n void run_tests() {\n"
                },
                {
                    "date": 1648069346112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,11 +59,11 @@\n   FeatureSet fs;\n   const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n   const int image_rows = sample_image.rows;\n   const int image_cols = sample_image.cols;\n-  int buckets_per_row = 2;\n+  int buckets_along_height = 2;\n   int buckets_per_col = 2;\n-  int bucket_height = (image_rows + buckets_per_row - 1) / buckets_per_row;\n+  int bucket_height = (image_rows + buckets_along_height - 1) / buckets_along_height;\n   for(int i = 0; i < 100; i++){\n     fs.points.push_back({image_rows - 1, image_cols - 1});\n   }\n   for(int i = 0; i < 109; i++){\n@@ -73,11 +73,11 @@\n     fs.points.push_back({bucket_height, 0});\n   }\n \n   assert(fs.size() == 300);\n-  fs.filterByBucketLocationInternal(sample_image, buckets_per_row, buckets_per_col, 0, 50); \n+  fs.filterByBucketLocationInternal(sample_image, buckets_along_height, buckets_per_col, 0, 50); \n   assert(fs.size() == 150);\n-  fs.filterByBucketLocationInternal(sample_image, buckets_per_row, 1, 0, 30); \n+  fs.filterByBucketLocationInternal(sample_image, buckets_along_height, 1, 0, 30); \n   assert(fs.size() == 60);\n }\n \n void run_tests() {\n"
                },
                {
                    "date": 1648069359852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,8 +74,9 @@\n   }\n \n   assert(fs.size() == 300);\n   fs.filterByBucketLocationInternal(sample_image, buckets_along_height, buckets_per_col, 0, 50); \n+  fs_copy = fs;\n   assert(fs.size() == 150);\n   fs.filterByBucketLocationInternal(sample_image, buckets_along_height, 1, 0, 30); \n   assert(fs.size() == 60);\n }\n"
                },
                {
                    "date": 1648069372515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,12 +74,13 @@\n   }\n \n   assert(fs.size() == 300);\n   fs.filterByBucketLocationInternal(sample_image, buckets_along_height, buckets_per_col, 0, 50); \n-  fs_copy = fs;\n+  FeatureSet fs_copy = fs;\n   assert(fs.size() == 150);\n   fs.filterByBucketLocationInternal(sample_image, buckets_along_height, 1, 0, 30); \n   assert(fs.size() == 60);\n+  fs_copy.filterByBucketLocationInternal(sample_image, buckets_along_height, 1, 0, 30); \n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648069381217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n   FeatureSet fs_copy = fs;\n   assert(fs.size() == 150);\n   fs.filterByBucketLocationInternal(sample_image, buckets_along_height, 1, 0, 30); \n   assert(fs.size() == 60);\n-  fs_copy.filterByBucketLocationInternal(sample_image, buckets_along_height, 1, 0, 30); \n+  fs_copy.filterByBucketLocationInternal(sample_image, 1, buckets_along_width, 0, 30); \n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648069394470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n   const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n   const int image_rows = sample_image.rows;\n   const int image_cols = sample_image.cols;\n   int buckets_along_height = 2;\n-  int buckets_per_col = 2;\n+  int buckets_along_width = 2;\n   int bucket_height = (image_rows + buckets_along_height - 1) / buckets_along_height;\n   for(int i = 0; i < 100; i++){\n     fs.points.push_back({image_rows - 1, image_cols - 1});\n   }\n@@ -73,14 +73,14 @@\n     fs.points.push_back({bucket_height, 0});\n   }\n \n   assert(fs.size() == 300);\n-  fs.filterByBucketLocationInternal(sample_image, buckets_along_height, buckets_per_col, 0, 50); \n+  fs.filterByBucketLocationInternal(sample_image, buckets_along_height, buckets_along_width, 0, 50); \n   FeatureSet fs_copy = fs;\n   assert(fs.size() == 150);\n   fs.filterByBucketLocationInternal(sample_image, buckets_along_height, 1, 0, 30); \n   assert(fs.size() == 60);\n-  fs_copy.filterByBucketLocationInternal(sample_image, 1, buckets_along_width, 0, 30); \n+  fs_copy.filterByBucketLocationInternal(sample_image, 1, buckets_along_width 0, 30); \n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648069400474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n   FeatureSet fs_copy = fs;\n   assert(fs.size() == 150);\n   fs.filterByBucketLocationInternal(sample_image, buckets_along_height, 1, 0, 30); \n   assert(fs.size() == 60);\n-  fs_copy.filterByBucketLocationInternal(sample_image, 1, buckets_along_width 0, 30); \n+  fs_copy.filterByBucketLocationInternal(sample_image, 1, buckets_along_width, 0, 30); \n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648069406586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,8 +79,9 @@\n   assert(fs.size() == 150);\n   fs.filterByBucketLocationInternal(sample_image, buckets_along_height, 1, 0, 30); \n   assert(fs.size() == 60);\n   fs_copy.filterByBucketLocationInternal(sample_image, 1, buckets_along_width, 0, 30); \n+  assert(fs.size() == 60);\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648069416293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,10 +78,10 @@\n   FeatureSet fs_copy = fs;\n   assert(fs.size() == 150);\n   fs.filterByBucketLocationInternal(sample_image, buckets_along_height, 1, 0, 30); \n   assert(fs.size() == 60);\n-  fs_copy.filterByBucketLocationInternal(sample_image, 1, buckets_along_width, 0, 30); \n-  assert(fs.size() == 60);\n+  fs_copy.filterByBucketLocationInternal(sample_image, 1, buckets_along_width, 0, 35); \n+  assert(fs_copy.size() == 70);\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648069439088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,8 +78,10 @@\n   FeatureSet fs_copy = fs;\n   assert(fs.size() == 150);\n   fs.filterByBucketLocationInternal(sample_image, buckets_along_height, 1, 0, 30); \n   assert(fs.size() == 60);\n+  fs.filterByBucketLocationInternal(sample_image, 1, 2, 0, 30); \n+  assert(fs.size() == 60);\n   fs_copy.filterByBucketLocationInternal(sample_image, 1, buckets_along_width, 0, 35); \n   assert(fs_copy.size() == 70);\n }\n \n"
                },
                {
                    "date": 1648069487746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,11 +59,9 @@\n   FeatureSet fs;\n   const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n   const int image_rows = sample_image.rows;\n   const int image_cols = sample_image.cols;\n-  int buckets_along_height = 2;\n-  int buckets_along_width = 2;\n-  int bucket_height = (image_rows + buckets_along_height - 1) / buckets_along_height;\n+  int bucket_height = (image_rows +  1) / 2;\n   for(int i = 0; i < 100; i++){\n     fs.points.push_back({image_rows - 1, image_cols - 1});\n   }\n   for(int i = 0; i < 109; i++){\n@@ -78,9 +76,9 @@\n   FeatureSet fs_copy = fs;\n   assert(fs.size() == 150);\n   fs.filterByBucketLocationInternal(sample_image, buckets_along_height, 1, 0, 30); \n   assert(fs.size() == 60);\n-  fs.filterByBucketLocationInternal(sample_image, 1, 2, 0, 30); \n+  fs.filterByBucketLocationInternal(sample_image, 1, 2, 0, 20); \n   assert(fs.size() == 60);\n   fs_copy.filterByBucketLocationInternal(sample_image, 1, buckets_along_width, 0, 35); \n   assert(fs_copy.size() == 70);\n }\n"
                },
                {
                    "date": 1648069498502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,16 +71,16 @@\n     fs.points.push_back({bucket_height, 0});\n   }\n \n   assert(fs.size() == 300);\n-  fs.filterByBucketLocationInternal(sample_image, buckets_along_height, buckets_along_width, 0, 50); \n+  fs.filterByBucketLocationInternal(sample_image, 2, 22, 0, 50); \n   FeatureSet fs_copy = fs;\n   assert(fs.size() == 150);\n-  fs.filterByBucketLocationInternal(sample_image, buckets_along_height, 1, 0, 30); \n+  fs.filterByBucketLocationInternal(sample_image, 2, 1, 0, 30); \n   assert(fs.size() == 60);\n   fs.filterByBucketLocationInternal(sample_image, 1, 2, 0, 20); \n   assert(fs.size() == 60);\n-  fs_copy.filterByBucketLocationInternal(sample_image, 1, buckets_along_width, 0, 35); \n+  fs_copy.filterByBucketLocationInternal(sample_image, 1, 2, 0, 35); \n   assert(fs_copy.size() == 70);\n }\n \n void run_tests() {\n"
                },
                {
                    "date": 1648069516091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,10 +76,10 @@\n   FeatureSet fs_copy = fs;\n   assert(fs.size() == 150);\n   fs.filterByBucketLocationInternal(sample_image, 2, 1, 0, 30); \n   assert(fs.size() == 60);\n-  fs.filterByBucketLocationInternal(sample_image, 1, 2, 0, 20); \n-  assert(fs.size() == 60);\n+  fs.filterByBucketLocationInternal(sample_image, 2, 1, 1, 30); \n+  assert(fs.size() == 30);\n   fs_copy.filterByBucketLocationInternal(sample_image, 1, 2, 0, 35); \n   assert(fs_copy.size() == 70);\n }\n \n"
                },
                {
                    "date": 1648069548777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n   int bucket_height = (image_rows +  1) / 2;\n   for(int i = 0; i < 100; i++){\n     fs.points.push_back({image_rows - 1, image_cols - 1});\n   }\n-  for(int i = 0; i < 109; i++){\n+  for(int i = 0; i < 100; i++){\n     fs.points.push_back({image_rows - 1, 0});\n   }\n   for(int i = 0; i < 100; i++){\n     fs.points.push_back({bucket_height, 0});\n@@ -76,10 +76,10 @@\n   FeatureSet fs_copy = fs;\n   assert(fs.size() == 150);\n   fs.filterByBucketLocationInternal(sample_image, 2, 1, 0, 30); \n   assert(fs.size() == 60);\n-  fs.filterByBucketLocationInternal(sample_image, 2, 1, 1, 30); \n-  assert(fs.size() == 30);\n+  fs.filterByBucketLocationInternal(sample_image, 2, 1, 1, 27); \n+  assert(fs.size() == 27);\n   fs_copy.filterByBucketLocationInternal(sample_image, 1, 2, 0, 35); \n   assert(fs_copy.size() == 70);\n }\n \n"
                },
                {
                    "date": 1648069640375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n   const int image_rows = sample_image.rows;\n   const int image_cols = sample_image.cols;\n   int bucket_height = (image_rows +  1) / 2;\n   for(int i = 0; i < 100; i++){\n-    fs.points.push_back({image_rows - 1, image_cols - 1});\n+    fs.points.push_back({image_rows - 1.0, image_cols - 1.0});\n   }\n   for(int i = 0; i < 100; i++){\n     fs.points.push_back({image_rows - 1, 0});\n   }\n"
                },
                {
                    "date": 1648069647761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,12 +64,12 @@\n   for(int i = 0; i < 100; i++){\n     fs.points.push_back({image_rows - 1.0, image_cols - 1.0});\n   }\n   for(int i = 0; i < 100; i++){\n-    fs.points.push_back({image_rows - 1, 0});\n+    fs.points.push_back({image_rows - 1.0, 0.0});\n   }\n   for(int i = 0; i < 100; i++){\n-    fs.points.push_back({bucket_height, 0});\n+    fs.points.push_back({bucket_height, 0.0});\n   }\n \n   assert(fs.size() == 300);\n   fs.filterByBucketLocationInternal(sample_image, 2, 22, 0, 50); \n"
                },
                {
                    "date": 1648069712081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,15 +61,15 @@\n   const int image_rows = sample_image.rows;\n   const int image_cols = sample_image.cols;\n   int bucket_height = (image_rows +  1) / 2;\n   for(int i = 0; i < 100; i++){\n-    fs.points.push_back({image_rows - 1.0, image_cols - 1.0});\n+    fs.points.push_back({image_rows - 1.f, image_cols - 1.f});\n   }\n   for(int i = 0; i < 100; i++){\n-    fs.points.push_back({image_rows - 1.0, 0.0});\n+    fs.points.push_back({image_rows - 1.f, 0.f});\n   }\n   for(int i = 0; i < 100; i++){\n-    fs.points.push_back({bucket_height, 0.0});\n+    fs.points.push_back({bucket_height, 0.f});\n   }\n \n   assert(fs.size() == 300);\n   fs.filterByBucketLocationInternal(sample_image, 2, 22, 0, 50); \n"
                },
                {
                    "date": 1648069738474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n   for(int i = 0; i < 100; i++){\n     fs.points.push_back({image_rows - 1.f, 0.f});\n   }\n   for(int i = 0; i < 100; i++){\n-    fs.points.push_back({bucket_height, 0.f});\n+    fs.points.push_back({float(bucket_height), 0.f});\n   }\n \n   assert(fs.size() == 300);\n   fs.filterByBucketLocationInternal(sample_image, 2, 22, 0, 50); \n"
                },
                {
                    "date": 1648069763540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,9 @@\n     assert(strength <= 100);\n   }\n   assert(fs.size() >= 100); /* Should detect quite a few points, I got 125 */\n   fs.filterByBucketLocationInternal(sample_image, 1, 1, 0, 77); /* Put it all in one bucket */\n+  dbg(fs.size());\n   assert(fs.size() == 77);\n }\n void test_featureset_filter() {\n   FeatureSet fs;\n"
                },
                {
                    "date": 1648070317883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,35 +52,35 @@\n     assert(strength <= 100);\n   }\n   assert(fs.size() >= 100); /* Should detect quite a few points, I got 125 */\n   fs.filterByBucketLocationInternal(sample_image, 1, 1, 0, 77); /* Put it all in one bucket */\n-  dbg(fs.size());\n+  dbg(fs.size())\n   assert(fs.size() == 77);\n }\n void test_featureset_filter() {\n   FeatureSet fs;\n   const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n   const int image_rows = sample_image.rows;\n   const int image_cols = sample_image.cols;\n   int bucket_height = (image_rows +  1) / 2;\n-  for(int i = 0; i < 100; i++){\n+  for(int i = 0; i < 10; i++){\n     fs.points.push_back({image_rows - 1.f, image_cols - 1.f});\n   }\n-  for(int i = 0; i < 100; i++){\n+  for(int i = 0; i < 10; i++){\n     fs.points.push_back({image_rows - 1.f, 0.f});\n   }\n-  for(int i = 0; i < 100; i++){\n+  for(int i = 0; i < 10; i++){\n     fs.points.push_back({float(bucket_height), 0.f});\n   }\n \n-  assert(fs.size() == 300);\n-  fs.filterByBucketLocationInternal(sample_image, 2, 22, 0, 50); \n+  assert(fs.size() == 30);\n+  fs.filterByBucketLocationInternal(sample_image, 2, 22, 0, 5); \n   FeatureSet fs_copy = fs;\n-  assert(fs.size() == 150);\n-  fs.filterByBucketLocationInternal(sample_image, 2, 1, 0, 30); \n-  assert(fs.size() == 60);\n-  fs.filterByBucketLocationInternal(sample_image, 2, 1, 1, 27); \n-  assert(fs.size() == 27);\n+  assert(fs.size() == 15);\n+  fs.filterByBucketLocationInternal(sample_image, 2, 1, 0, 3); \n+  assert(fs.size() == 6);\n+  fs.filterByBucketLocationInternal(sample_image, 2, 1, 1, 2); \n+  assert(fs.size() == 4);\n   fs_copy.filterByBucketLocationInternal(sample_image, 1, 2, 0, 35); \n   assert(fs_copy.size() == 70);\n }\n \n"
                },
                {
                    "date": 1648070331082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,16 +64,16 @@\n   int bucket_height = (image_rows +  1) / 2;\n   for(int i = 0; i < 10; i++){\n     fs.points.push_back({image_rows - 1.f, image_cols - 1.f});\n   }\n-  for(int i = 0; i < 10; i++){\n+  for(int i = 0; i < 12; i++){\n     fs.points.push_back({image_rows - 1.f, 0.f});\n   }\n-  for(int i = 0; i < 10; i++){\n+  for(int i = 0; i < 13; i++){\n     fs.points.push_back({float(bucket_height), 0.f});\n   }\n \n-  assert(fs.size() == 30);\n+  assert(fs.size() == 35);\n   fs.filterByBucketLocationInternal(sample_image, 2, 22, 0, 5); \n   FeatureSet fs_copy = fs;\n   assert(fs.size() == 15);\n   fs.filterByBucketLocationInternal(sample_image, 2, 1, 0, 3); \n"
                },
                {
                    "date": 1648070340345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,10 +71,10 @@\n   for(int i = 0; i < 13; i++){\n     fs.points.push_back({float(bucket_height), 0.f});\n   }\n \n-  assert(fs.size() == 35);\n-  fs.filterByBucketLocationInternal(sample_image, 2, 22, 0, 5); \n+  assert(fs.size() == 30);\n+  fs.filterByBucketLocationInternal(sample_image, 2, 22, 0, 12); \n   FeatureSet fs_copy = fs;\n   assert(fs.size() == 15);\n   fs.filterByBucketLocationInternal(sample_image, 2, 1, 0, 3); \n   assert(fs.size() == 6);\n"
                },
                {
                    "date": 1648070347953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,15 +61,15 @@\n   const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n   const int image_rows = sample_image.rows;\n   const int image_cols = sample_image.cols;\n   int bucket_height = (image_rows +  1) / 2;\n-  for(int i = 0; i < 10; i++){\n+  for(int i = 0; i < 15; i++){\n     fs.points.push_back({image_rows - 1.f, image_cols - 1.f});\n   }\n-  for(int i = 0; i < 12; i++){\n+  for(int i = 0; i < 10; i++){\n     fs.points.push_back({image_rows - 1.f, 0.f});\n   }\n-  for(int i = 0; i < 13; i++){\n+  for(int i = 0; i < 5; i++){\n     fs.points.push_back({float(bucket_height), 0.f});\n   }\n \n   assert(fs.size() == 30);\n"
                },
                {
                    "date": 1648070357273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,11 +72,11 @@\n     fs.points.push_back({float(bucket_height), 0.f});\n   }\n \n   assert(fs.size() == 30);\n-  fs.filterByBucketLocationInternal(sample_image, 2, 22, 0, 12); \n+  fs.filterByBucketLocationInternal(sample_image, 2, 22, 0, 11); \n   FeatureSet fs_copy = fs;\n-  assert(fs.size() == 15);\n+  assert(fs.size() == 26);\n   fs.filterByBucketLocationInternal(sample_image, 2, 1, 0, 3); \n   assert(fs.size() == 6);\n   fs.filterByBucketLocationInternal(sample_image, 2, 1, 1, 2); \n   assert(fs.size() == 4);\n"
                },
                {
                    "date": 1648070368769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n   assert(fs.size() == 30);\n   fs.filterByBucketLocationInternal(sample_image, 2, 22, 0, 11); \n   FeatureSet fs_copy = fs;\n   assert(fs.size() == 26);\n-  fs.filterByBucketLocationInternal(sample_image, 2, 1, 0, 3); \n+  fs.filterByBucketLocationInternal(sample_image, 2, 1, 0, 11); \n   assert(fs.size() == 6);\n   fs.filterByBucketLocationInternal(sample_image, 2, 1, 1, 2); \n   assert(fs.size() == 4);\n   fs_copy.filterByBucketLocationInternal(sample_image, 1, 2, 0, 35); \n"
                },
                {
                    "date": 1648070416029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n   fs.filterByBucketLocationInternal(sample_image, 2, 22, 0, 11); \n   FeatureSet fs_copy = fs;\n   assert(fs.size() == 26);\n   fs.filterByBucketLocationInternal(sample_image, 2, 1, 0, 11); \n-  assert(fs.size() == 6);\n+  assert(fs.size() == 16);\n   fs.filterByBucketLocationInternal(sample_image, 2, 1, 1, 2); \n   assert(fs.size() == 4);\n   fs_copy.filterByBucketLocationInternal(sample_image, 1, 2, 0, 35); \n   assert(fs_copy.size() == 70);\n"
                },
                {
                    "date": 1648070448627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n   for(int i = 0; i < 15; i++){\n     fs.points.push_back({image_rows - 1.f, image_cols - 1.f});\n   }\n   for(int i = 0; i < 10; i++){\n-    fs.points.push_back({image_rows - 1.f, 0.f});\n+    fs.points.push_back({0, image_cols - 1.f});\n   }\n   for(int i = 0; i < 5; i++){\n     fs.points.push_back({float(bucket_height), 0.f});\n   }\n"
                },
                {
                    "date": 1648070477168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n   assert(fs.size() == 26);\n   fs.filterByBucketLocationInternal(sample_image, 2, 1, 0, 11); \n   assert(fs.size() == 16);\n   fs.filterByBucketLocationInternal(sample_image, 2, 1, 1, 2); \n-  assert(fs.size() == 4);\n+  assert(fs.size() == 2);\n   fs_copy.filterByBucketLocationInternal(sample_image, 1, 2, 0, 35); \n   assert(fs_copy.size() == 70);\n }\n \n"
                },
                {
                    "date": 1648070499597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,15 +72,15 @@\n     fs.points.push_back({float(bucket_height), 0.f});\n   }\n \n   assert(fs.size() == 30);\n-  fs.filterByBucketLocationInternal(sample_image, 2, 22, 0, 11); \n+  fs.filterByBucketLocationInternal(sample_image, 2, 2, 0, 11); \n   FeatureSet fs_copy = fs;\n   assert(fs.size() == 26);\n   fs.filterByBucketLocationInternal(sample_image, 2, 1, 0, 11); \n   assert(fs.size() == 16);\n-  fs.filterByBucketLocationInternal(sample_image, 2, 1, 1, 2); \n-  assert(fs.size() == 2);\n+  fs.filterByBucketLocationInternal(sample_image, 2, 1, 1, 4); \n+  assert(fs.size() == 4);\n   fs_copy.filterByBucketLocationInternal(sample_image, 1, 2, 0, 35); \n   assert(fs_copy.size() == 70);\n }\n \n"
                },
                {
                    "date": 1648070641483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,12 +65,12 @@\n   for(int i = 0; i < 15; i++){\n     fs.points.push_back({image_rows - 1.f, image_cols - 1.f});\n   }\n   for(int i = 0; i < 10; i++){\n-    fs.points.push_back({0, image_cols - 1.f});\n+    fs.points.push_back({image_cols - 1.f, 0.f});\n   }\n   for(int i = 0; i < 5; i++){\n-    fs.points.push_back({float(bucket_height), 0.f});\n+    fs.points.push_back({0.f, float(bucket_height)});\n   }\n \n   assert(fs.size() == 30);\n   fs.filterByBucketLocationInternal(sample_image, 2, 2, 0, 11); \n"
                },
                {
                    "date": 1648070661540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,10 +61,11 @@\n   const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n   const int image_rows = sample_image.rows;\n   const int image_cols = sample_image.cols;\n   int bucket_height = (image_rows +  1) / 2;\n+  // Note x and y are 'flipped' because of how images are read in opencv\n   for(int i = 0; i < 15; i++){\n-    fs.points.push_back({image_rows - 1.f, image_cols - 1.f});\n+    fs.points.push_back({ image_cols - 1.f, image_rows - 1.f});\n   }\n   for(int i = 0; i < 10; i++){\n     fs.points.push_back({image_cols - 1.f, 0.f});\n   }\n"
                },
                {
                    "date": 1648070668508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n   const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n   const int image_rows = sample_image.rows;\n   const int image_cols = sample_image.cols;\n   int bucket_height = (image_rows +  1) / 2;\n-  // Note x and y are 'flipped' because of how images are read in opencv\n+  // Note rows and cols appear 'flipped' because of how images are read in opencv\n   for(int i = 0; i < 15; i++){\n     fs.points.push_back({ image_cols - 1.f, image_rows - 1.f});\n   }\n   for(int i = 0; i < 10; i++){\n"
                },
                {
                    "date": 1648071265414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,8 +64,10 @@\n   int bucket_height = (image_rows +  1) / 2;\n   // Note rows and cols appear 'flipped' because of how images are read in opencv\n   for(int i = 0; i < 15; i++){\n     fs.points.push_back({ image_cols - 1.f, image_rows - 1.f});\n+    fs.ages.push_back(0);\n+    fs.strengths.push_back(40);\n   }\n   for(int i = 0; i < 10; i++){\n     fs.points.push_back({image_cols - 1.f, 0.f});\n   }\n"
                },
                {
                    "date": 1648071408381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,19 +69,23 @@\n     fs.strengths.push_back(40);\n   }\n   for(int i = 0; i < 10; i++){\n     fs.points.push_back({image_cols - 1.f, 0.f});\n+    fs.ages.push_back(0);\n+    fs.strengths.push_back(40);\n   }\n   for(int i = 0; i < 5; i++){\n     fs.points.push_back({0.f, float(bucket_height)});\n+    fs.ages.push_back(0);\n+    fs.strengths.push_back(40);\n   }\n \n   assert(fs.size() == 30);\n   fs.filterByBucketLocationInternal(sample_image, 2, 2, 0, 11); \n   FeatureSet fs_copy = fs;\n   assert(fs.size() == 26);\n   fs.filterByBucketLocationInternal(sample_image, 2, 1, 0, 11); \n-  assert(fs.size() == 16);\n+  assert(fs.size() == 21);\n   fs.filterByBucketLocationInternal(sample_image, 2, 1, 1, 4); \n   assert(fs.size() == 4);\n   fs_copy.filterByBucketLocationInternal(sample_image, 1, 2, 0, 35); \n   assert(fs_copy.size() == 70);\n"
                },
                {
                    "date": 1648071433159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n   FeatureSet fs_copy = fs;\n   assert(fs.size() == 26);\n   fs.filterByBucketLocationInternal(sample_image, 2, 1, 0, 11); \n   assert(fs.size() == 21);\n-  fs.filterByBucketLocationInternal(sample_image, 2, 1, 1, 4); \n+  fs.filterByBucketLocationInternal(sample_image, 2, 1, 1, 11); \n   assert(fs.size() == 4);\n   fs_copy.filterByBucketLocationInternal(sample_image, 1, 2, 0, 35); \n   assert(fs_copy.size() == 70);\n }\n"
                },
                {
                    "date": 1648071446041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,10 +84,8 @@\n   FeatureSet fs_copy = fs;\n   assert(fs.size() == 26);\n   fs.filterByBucketLocationInternal(sample_image, 2, 1, 0, 11); \n   assert(fs.size() == 21);\n-  fs.filterByBucketLocationInternal(sample_image, 2, 1, 1, 11); \n-  assert(fs.size() == 4);\n   fs_copy.filterByBucketLocationInternal(sample_image, 1, 2, 0, 35); \n   assert(fs_copy.size() == 70);\n }\n \n"
                },
                {
                    "date": 1648071452626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,10 +84,10 @@\n   FeatureSet fs_copy = fs;\n   assert(fs.size() == 26);\n   fs.filterByBucketLocationInternal(sample_image, 2, 1, 0, 11); \n   assert(fs.size() == 21);\n-  fs_copy.filterByBucketLocationInternal(sample_image, 1, 2, 0, 35); \n-  assert(fs_copy.size() == 70);\n+  fs_copy.filterByBucketLocationInternal(sample_image, 1, 2, 0, 11); \n+  assert(fs_copy.size() == );\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648071465994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n   assert(fs.size() == 26);\n   fs.filterByBucketLocationInternal(sample_image, 2, 1, 0, 11); \n   assert(fs.size() == 21);\n   fs_copy.filterByBucketLocationInternal(sample_image, 1, 2, 0, 11); \n-  assert(fs_copy.size() == );\n+  assert(fs_copy.size() == 16);\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648071504162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,17 +52,15 @@\n     assert(strength <= 100);\n   }\n   assert(fs.size() >= 100); /* Should detect quite a few points, I got 125 */\n   fs.filterByBucketLocationInternal(sample_image, 1, 1, 0, 77); /* Put it all in one bucket */\n-  dbg(fs.size())\n   assert(fs.size() == 77);\n }\n void test_featureset_filter() {\n   FeatureSet fs;\n   const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n   const int image_rows = sample_image.rows;\n-  const int image_cols = sample_image.cols;\n-  int bucket_height = (image_rows +  1) / 2;\n+  const int image_cols = sample_image.cols  int bucket_height = (image_rows +  1) / 2;\n   // Note rows and cols appear 'flipped' because of how images are read in opencv\n   for(int i = 0; i < 15; i++){\n     fs.points.push_back({ image_cols - 1.f, image_rows - 1.f});\n     fs.ages.push_back(0);\n"
                },
                {
                    "date": 1648071532376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n     fs.ages.push_back(0);\n     fs.strengths.push_back(40);\n   }\n   for(int i = 0; i < 5; i++){\n-    fs.points.push_back({0.f, float(bucket_height)});\n+    fs.points.push_back({0.f, 2.f});\n     fs.ages.push_back(0);\n     fs.strengths.push_back(40);\n   }\n \n"
                },
                {
                    "date": 1648071539989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,10 @@\n void test_featureset_filter() {\n   FeatureSet fs;\n   const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n   const int image_rows = sample_image.rows;\n-  const int image_cols = sample_image.cols  int bucket_height = (image_rows +  1) / 2;\n+  const int image_cols = sample_image.cols;\n+  const int bucket_height = (image_rows +  1) / 2;\n   // Note rows and cols appear 'flipped' because of how images are read in opencv\n   for(int i = 0; i < 15; i++){\n     fs.points.push_back({ image_cols - 1.f, image_rows - 1.f});\n     fs.ages.push_back(0);\n@@ -71,9 +72,9 @@\n     fs.ages.push_back(0);\n     fs.strengths.push_back(40);\n   }\n   for(int i = 0; i < 5; i++){\n-    fs.points.push_back({0.f, 2.f});\n+    fs.points.push_back({0.f, float(bucket_height)});\n     fs.ages.push_back(0);\n     fs.strengths.push_back(40);\n   }\n \n"
                },
                {
                    "date": 1648071580244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,8 +87,12 @@\n   fs_copy.filterByBucketLocationInternal(sample_image, 1, 2, 0, 11); \n   assert(fs_copy.size() == 16);\n }\n \n+void test_removeInvalidPoints(){\n+\n+}\n+\n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n   test_bucket_empty();\n   std::cout << \"TEST BUCKET NONEMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648071603195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,12 @@\n   assert(fs_copy.size() == 16);\n }\n \n void test_removeInvalidPoints(){\n-\n+  vector<cv::Point2f> points;\n+  for(int i = 0; i < 15; i++){\n+    points.push_back({ image_cols - 1.f, image_rows - 1.f});\n+  }\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648071618012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,11 +88,11 @@\n   assert(fs_copy.size() == 16);\n }\n \n void test_removeInvalidPoints(){\n-  vector<cv::Point2f> points;\n+  std::vector<cv::Point2f> points;\n   for(int i = 0; i < 15; i++){\n-    points.push_back({ image_cols - 1.f, image_rows - 1.f});\n+    points.push_back({ float(i), float(i)});\n   }\n }\n \n void run_tests() {\n"
                },
                {
                    "date": 1648071769400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n   fs_copy.filterByBucketLocationInternal(sample_image, 1, 2, 0, 11); \n   assert(fs_copy.size() == 16);\n }\n \n-void test_removeInvalidPoints(){\n+void test_findUnmovedPoints(){\n   std::vector<cv::Point2f> points;\n   for(int i = 0; i < 15; i++){\n     points.push_back({ float(i), float(i)});\n   }\n"
                },
                {
                    "date": 1648071884460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,8 +91,9 @@\n void test_findUnmovedPoints(){\n   std::vector<cv::Point2f> points;\n   for(int i = 0; i < 15; i++){\n     points.push_back({ float(i), float(i)});\n+    points.push_back({ float(i), float(i) + i % 2});\n   }\n }\n \n void run_tests() {\n"
                },
                {
                    "date": 1648071901947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,12 +89,13 @@\n }\n \n void test_findUnmovedPoints(){\n   std::vector<cv::Point2f> points;\n-  for(int i = 0; i < 15; i++){\n+  for(int i = 0; i < 35; i++){\n     points.push_back({ float(i), float(i)});\n-    points.push_back({ float(i), float(i) + i % 2});\n+    points.push_back({ float(i) + i % 5, float(i) + i % 7});\n   }\n+  findUnmovedPoints\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648071918771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n void test_findUnmovedPoints(){\n   std::vector<cv::Point2f> points;\n   for(int i = 0; i < 35; i++){\n     points.push_back({ float(i), float(i)});\n-    points.push_back({ float(i) + i % 5, float(i) + i % 7});\n+    points.push_back({ float(i) + !(i % 5), float(i) + !(i % 7)});\n   }\n   findUnmovedPoints\n }\n \n"
                },
                {
                    "date": 1648071927532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,14 +88,15 @@\n   assert(fs_copy.size() == 16);\n }\n \n void test_findUnmovedPoints(){\n-  std::vector<cv::Point2f> points;\n+  std::vector<cv::Point2f> points1;\n+  std::vector<cv::Point2f> points2;\n   for(int i = 0; i < 35; i++){\n-    points.push_back({ float(i), float(i)});\n-    points.push_back({ float(i) + !(i % 5), float(i) + !(i % 7)});\n+    points1.push_back({ float(i), float(i)});\n+    points2.push_back({ float(i) + !(i % 5), float(i) + !(i % 7)});\n   }\n-  findUnmovedPoints\n+  findUnmovedPoints()\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648071948552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,10 @@\n   for(int i = 0; i < 35; i++){\n     points1.push_back({ float(i), float(i)});\n     points2.push_back({ float(i) + !(i % 5), float(i) + !(i % 7)});\n   }\n-  findUnmovedPoints()\n+  std::vector<bool> okLocations = findUnmovedPoints(points1, points2, .5);\n+  \n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648071953845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,13 @@\n     points1.push_back({ float(i), float(i)});\n     points2.push_back({ float(i) + !(i % 5), float(i) + !(i % 7)});\n   }\n   std::vector<bool> okLocations = findUnmovedPoints(points1, points2, .5);\n-  \n+  for(int i = 0; i < 35; i++){\n+    points1.push_back({ float(i), float(i)});\n+    points2.push_back({ float(i) + !(i % 5), float(i) + !(i % 7)});\n+  }\n+\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648071987097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,10 +96,9 @@\n     points2.push_back({ float(i) + !(i % 5), float(i) + !(i % 7)});\n   }\n   std::vector<bool> okLocations = findUnmovedPoints(points1, points2, .5);\n   for(int i = 0; i < 35; i++){\n-    points1.push_back({ float(i), float(i)});\n-    points2.push_back({ float(i) + !(i % 5), float(i) + !(i % 7)});\n+    assert(okLocations[i] == (!(i % 5) && !(i % 7)));\n   }\n \n }\n \n"
                },
                {
                    "date": 1648072025411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,8 +110,10 @@\n   std::cout << \"TEST FEATURE SET\" << std::endl;\n   test_featureset();\n   std::cout << \"TEST FEATURE SET EDGE\" << std::endl;\n   test_featureset_filter();\n+  std::cout << \"TEST FIND UNMOVED POINTS\" << std::endl;\n+  test_featureset_filter();\n   std::cout << \"ALL TESTS PASS\" << std::endl;\n   assert(false);\n   std::cout << \"NEVERMIND ASSERTS WERE JUST DISABLED\" << std::endl;\n }\n"
                },
                {
                    "date": 1648072100121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,8 +96,9 @@\n     points2.push_back({ float(i) + !(i % 5), float(i) + !(i % 7)});\n   }\n   std::vector<bool> okLocations = findUnmovedPoints(points1, points2, .5);\n   for(int i = 0; i < 35; i++){\n+    dbg(i);\n     assert(okLocations[i] == (!(i % 5) && !(i % 7)));\n   }\n \n }\n@@ -111,9 +112,9 @@\n   test_featureset();\n   std::cout << \"TEST FEATURE SET EDGE\" << std::endl;\n   test_featureset_filter();\n   std::cout << \"TEST FIND UNMOVED POINTS\" << std::endl;\n-  test_featureset_filter();\n+  test_findUnmovedPoints();\n   std::cout << \"ALL TESTS PASS\" << std::endl;\n   assert(false);\n   std::cout << \"NEVERMIND ASSERTS WERE JUST DISABLED\" << std::endl;\n }\n"
                },
                {
                    "date": 1648072143628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,10 @@\n   }\n   std::vector<bool> okLocations = findUnmovedPoints(points1, points2, .5);\n   for(int i = 0; i < 35; i++){\n     dbg(i);\n-    assert(okLocations[i] == (!(i % 5) && !(i % 7)));\n+    dbg(okLocations[i]);\n+    assert(okLocations[i] == ((i % 5) && (i % 7)));\n   }\n \n }\n \n"
                },
                {
                    "date": 1648072157755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,10 +96,8 @@\n     points2.push_back({ float(i) + !(i % 5), float(i) + !(i % 7)});\n   }\n   std::vector<bool> okLocations = findUnmovedPoints(points1, points2, .5);\n   for(int i = 0; i < 35; i++){\n-    dbg(i);\n-    dbg(okLocations[i]);\n     assert(okLocations[i] == ((i % 5) && (i % 7)));\n   }\n \n }\n"
                },
                {
                    "date": 1648072182439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,21 @@\n   std::vector<bool> okLocations = findUnmovedPoints(points1, points2, .5);\n   for(int i = 0; i < 35; i++){\n     assert(okLocations[i] == ((i % 5) && (i % 7)));\n   }\n+}\n \n+void test_rotationMatrixToEulerAngles(){\n+  std::vector<cv::Point2f> points1;\n+  std::vector<cv::Point2f> points2;\n+  for(int i = 0; i < 35; i++){\n+    points1.push_back({ float(i), float(i)});\n+    points2.push_back({ float(i) + !(i % 5), float(i) + !(i % 7)});\n+  }\n+  std::vector<bool> okLocations = findUnmovedPoints(points1, points2, .5);\n+  for(int i = 0; i < 35; i++){\n+    assert(okLocations[i] == ((i % 5) && (i % 7)));\n+  }\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648072191432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,10 +101,9 @@\n   }\n }\n \n void test_rotationMatrixToEulerAngles(){\n-  std::vector<cv::Point2f> points1;\n-  std::vector<cv::Point2f> points2;\n+  cv::Mat & R;\n   for(int i = 0; i < 35; i++){\n     points1.push_back({ float(i), float(i)});\n     points2.push_back({ float(i) + !(i % 5), float(i) + !(i % 7)});\n   }\n"
                },
                {
                    "date": 1648072198071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,16 +102,8 @@\n }\n \n void test_rotationMatrixToEulerAngles(){\n   cv::Mat & R;\n-  for(int i = 0; i < 35; i++){\n-    points1.push_back({ float(i), float(i)});\n-    points2.push_back({ float(i) + !(i % 5), float(i) + !(i % 7)});\n-  }\n-  std::vector<bool> okLocations = findUnmovedPoints(points1, points2, .5);\n-  for(int i = 0; i < 35; i++){\n-    assert(okLocations[i] == ((i % 5) && (i % 7)));\n-  }\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648072319983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n   }\n }\n \n void test_rotationMatrixToEulerAngles(){\n-  cv::Mat & R;\n+  // Maybe\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648072348145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n   test_featureset_filter();\n   std::cout << \"TEST FIND UNMOVED POINTS\" << std::endl;\n   test_findUnmovedPoints();\n   std::cout << \"ALL TESTS PASS\" << std::endl;\n-  assert(false);\n+  // assert(false);\n   std::cout << \"NEVERMIND ASSERTS WERE JUST DISABLED\" << std::endl;\n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n"
                },
                {
                    "date": 1648072472806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n     cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n     cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n \n     VisualOdometry vo(projMatrl, projMatrr);\n-    for(int i = 0; i < 5; i++) {\n+    for(int i = 0; i < 50; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n"
                },
                {
                    "date": 1648072541791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n     cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n     cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n \n     VisualOdometry vo(projMatrl, projMatrr);\n-    for(int i = 0; i < 50; i++) {\n+    for(int i = 0; i < 100; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n@@ -148,9 +148,8 @@\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         // std::cout << cur_img_l << std::endl;\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n-        dbg(i);\n         vo.stereo_callback(cur_img_l, cur_img_r);\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1648146787087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n   std::cout << \"TEST FIND UNMOVED POINTS\" << std::endl;\n   test_findUnmovedPoints();\n   std::cout << \"ALL TESTS PASS\" << std::endl;\n   // assert(false);\n-  std::cout << \"NEVERMIND ASSERTS WERE JUST DISABLED\" << std::endl;\n+  // std::cout << \"NEVERMIND ASSERTS WERE JUST DISABLED\" << std::endl;\n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n"
                },
                {
                    "date": 1648146836328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n     cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n     cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n \n     VisualOdometry vo(projMatrl, projMatrr);\n-    for(int i = 0; i < 100; i++) {\n+    for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n"
                },
                {
                    "date": 1648147494746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,12 +100,16 @@\n     assert(okLocations[i] == ((i % 5) && (i % 7)));\n   }\n }\n \n-void test_rotationMatrixToEulerAngles(){\n+void test_rotationMatrixToEulerAngles() {\n   // Maybe\n }\n \n+void test_circularMatching() {\n+\n+}\n+\n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n   test_bucket_empty();\n   std::cout << \"TEST BUCKET NONEMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648147517068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,8 +119,10 @@\n   std::cout << \"TEST FEATURE SET EDGE\" << std::endl;\n   test_featureset_filter();\n   std::cout << \"TEST FIND UNMOVED POINTS\" << std::endl;\n   test_findUnmovedPoints();\n+  std::cout << \"TEST CIRCULAR MATCHING\" << std::endl;\n+  test_circularMatching();\n   std::cout << \"ALL TESTS PASS\" << std::endl;\n   // assert(false);\n   // std::cout << \"NEVERMIND ASSERTS WERE JUST DISABLED\" << std::endl;\n }\n"
                },
                {
                    "date": 1648147524006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n   // Maybe\n }\n \n void test_circularMatching() {\n-\n+  \n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648147589302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n   // Maybe\n }\n \n void test_circularMatching() {\n-  \n+  std::vector<cv:Point2f>& pl0(0);\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648147598522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n   // Maybe\n }\n \n void test_circularMatching() {\n-  std::vector<cv:Point2f>& pl0(0);\n+  std::vector<cv:Point2f> pl0;\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648147608855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,12 @@\n   // Maybe\n }\n \n void test_circularMatching() {\n-  std::vector<cv:Point2f> pl0;\n+  std::vector<cv::Point2f> pl0;\n+  std::vector<cv::Point2f> pr0;\n+  std::vector<cv::Point2f> pl1;\n+  std::vector<cv::Point2f> pr1;\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648147638097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,8 +109,13 @@\n   std::vector<cv::Point2f> pl0;\n   std::vector<cv::Point2f> pr0;\n   std::vector<cv::Point2f> pl1;\n   std::vector<cv::Point2f> pr1;\n+  cv::Mat iL0 = cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n+  cv::Mat iR0 = cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n+  cv::Mat iL1 = cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n+  cv::Mat iR1 = cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n+\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648147663238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,12 +109,12 @@\n   std::vector<cv::Point2f> pl0;\n   std::vector<cv::Point2f> pr0;\n   std::vector<cv::Point2f> pl1;\n   std::vector<cv::Point2f> pr1;\n-  cv::Mat iL0 = cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n-  cv::Mat iR0 = cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n-  cv::Mat iL1 = cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n-  cv::Mat iR1 = cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n+  cv::Mat iL0 = cv::imread(\"run1images/left/frame000001.png\", cv::IMREAD_GRAYSCALE);\n+  cv::Mat iR0 = cv::imread(\"run1images/right/frame000001.png\", cv::IMREAD_GRAYSCALE);\n+  cv::Mat iL1 = cv::imread(\"run1images/left/frame000004.png\", cv::IMREAD_GRAYSCALE);\n+  cv::Mat iR1 = cv::imread(\"run1images/right/frame000004.png\", cv::IMREAD_GRAYSCALE);\n \n }\n \n void run_tests() {\n"
                },
                {
                    "date": 1648147689884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,8 +109,9 @@\n   std::vector<cv::Point2f> pl0;\n   std::vector<cv::Point2f> pr0;\n   std::vector<cv::Point2f> pl1;\n   std::vector<cv::Point2f> pr1;\n+  std::vector<cv::Point2f> pret;\n   cv::Mat iL0 = cv::imread(\"run1images/left/frame000001.png\", cv::IMREAD_GRAYSCALE);\n   cv::Mat iR0 = cv::imread(\"run1images/right/frame000001.png\", cv::IMREAD_GRAYSCALE);\n   cv::Mat iL1 = cv::imread(\"run1images/left/frame000004.png\", cv::IMREAD_GRAYSCALE);\n   cv::Mat iR1 = cv::imread(\"run1images/right/frame000004.png\", cv::IMREAD_GRAYSCALE);\n"
                },
                {
                    "date": 1648148003336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,11 @@\n   cv::Mat iL0 = cv::imread(\"run1images/left/frame000001.png\", cv::IMREAD_GRAYSCALE);\n   cv::Mat iR0 = cv::imread(\"run1images/right/frame000001.png\", cv::IMREAD_GRAYSCALE);\n   cv::Mat iL1 = cv::imread(\"run1images/left/frame000004.png\", cv::IMREAD_GRAYSCALE);\n   cv::Mat iR1 = cv::imread(\"run1images/right/frame000004.png\", cv::IMREAD_GRAYSCALE);\n-\n+  FeatureSet fs;\n+  fs.appendFeaturesFromImage(iL0);\n+  pl0 = fs.points;\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648148086308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,8 +117,10 @@\n   cv::Mat iR1 = cv::imread(\"run1images/right/frame000004.png\", cv::IMREAD_GRAYSCALE);\n   FeatureSet fs;\n   fs.appendFeaturesFromImage(iL0);\n   pl0 = fs.points;\n+  circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n+  \n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648148102437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,10 +117,10 @@\n   cv::Mat iR1 = cv::imread(\"run1images/right/frame000004.png\", cv::IMREAD_GRAYSCALE);\n   FeatureSet fs;\n   fs.appendFeaturesFromImage(iL0);\n   pl0 = fs.points;\n-  circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n-  \n+  vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n+\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648148134103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,10 +117,12 @@\n   cv::Mat iR1 = cv::imread(\"run1images/right/frame000004.png\", cv::IMREAD_GRAYSCALE);\n   FeatureSet fs;\n   fs.appendFeaturesFromImage(iL0);\n   pl0 = fs.points;\n-  vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n-\n+  std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n+  deleteFeaturesWithFailureStatus(\n+      pl0, pr0, pl1, pr1, pret,\n+      fs, status);\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648148382981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,11 +118,16 @@\n   FeatureSet fs;\n   fs.appendFeaturesFromImage(iL0);\n   pl0 = fs.points;\n   std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n-  deleteFeaturesWithFailureStatus(\n-      pl0, pr0, pl1, pr1, pret,\n-      fs, status);\n+  std::vector<int> okStrengths;\n+  std::vector<cv::Point2f> okPoints;\n+\n+  deleteFeaturesWithFailureStatus(pl0, pr0, pl1, pr1, pret, fs, status);\n+  assert(fs.ages.size() == status.size());\n+  assert(fs.strengths.size() == status.size());\n+  assert(fs.ages.size() == status.size());\n+\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648148395102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n \n   deleteFeaturesWithFailureStatus(pl0, pr0, pl1, pr1, pret, fs, status);\n   assert(fs.ages.size() == status.size());\n   assert(fs.strengths.size() == status.size());\n-  assert(fs.ages.size() == status.size());\n+  assert(fs.points.size() == status.size());\n \n }\n \n void run_tests() {\n"
                },
                {
                    "date": 1648148405239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n   std::vector<int> okStrengths;\n   std::vector<cv::Point2f> okPoints;\n \n   deleteFeaturesWithFailureStatus(pl0, pr0, pl1, pr1, pret, fs, status);\n-  assert(fs.ages.size() == status.size());\n+  assert(fs.ages.size() == okPoints.size());\n   assert(fs.strengths.size() == status.size());\n   assert(fs.points.size() == status.size());\n \n }\n"
                },
                {
                    "date": 1648148410678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,10 +123,10 @@\n   std::vector<cv::Point2f> okPoints;\n \n   deleteFeaturesWithFailureStatus(pl0, pr0, pl1, pr1, pret, fs, status);\n   assert(fs.ages.size() == okPoints.size());\n-  assert(fs.strengths.size() == status.size());\n-  assert(fs.points.size() == status.size());\n+  assert(fs.strengths.size() == okPoints.size());\n+  assert(fs.points.size() == okPoints.size());\n \n }\n \n void run_tests() {\n"
                },
                {
                    "date": 1648148447408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,8 +120,13 @@\n   pl0 = fs.points;\n   std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n   std::vector<int> okStrengths;\n   std::vector<cv::Point2f> okPoints;\n+  for(int i = 0; i < status.size(); i++){\n+      if(status[i]){\n+        \n+      }\n+  }\n \n   deleteFeaturesWithFailureStatus(pl0, pr0, pl1, pr1, pret, fs, status);\n   assert(fs.ages.size() == okPoints.size());\n   assert(fs.strengths.size() == okPoints.size());\n"
                },
                {
                    "date": 1648148489286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,10 @@\n   std::vector<int> okStrengths;\n   std::vector<cv::Point2f> okPoints;\n   for(int i = 0; i < status.size(); i++){\n       if(status[i]){\n-        \n+        okPoints.push_back(fs.points[i]);\n+        okStrengths.push_back(fs.strengths[i]);\n       }\n   }\n \n   deleteFeaturesWithFailureStatus(pl0, pr0, pl1, pr1, pret, fs, status);\n"
                },
                {
                    "date": 1648148494464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,8 @@\n         okPoints.push_back(fs.points[i]);\n         okStrengths.push_back(fs.strengths[i]);\n       }\n   }\n-\n   deleteFeaturesWithFailureStatus(pl0, pr0, pl1, pr1, pret, fs, status);\n   assert(fs.ages.size() == okPoints.size());\n   assert(fs.strengths.size() == okPoints.size());\n   assert(fs.points.size() == okPoints.size());\n"
                },
                {
                    "date": 1648148505516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,8 +126,9 @@\n         okPoints.push_back(fs.points[i]);\n         okStrengths.push_back(fs.strengths[i]);\n       }\n   }\n+  dbg(okPoints.size());\n   deleteFeaturesWithFailureStatus(pl0, pr0, pl1, pr1, pret, fs, status);\n   assert(fs.ages.size() == okPoints.size());\n   assert(fs.strengths.size() == okPoints.size());\n   assert(fs.points.size() == okPoints.size());\n"
                },
                {
                    "date": 1648148518164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n   pl0 = fs.points;\n   std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n   std::vector<int> okStrengths;\n   std::vector<cv::Point2f> okPoints;\n-  for(int i = 0; i < status.size(); i++){\n+  for(unsigned int i = 0; i < status.size(); i++){\n       if(status[i]){\n         okPoints.push_back(fs.points[i]);\n         okStrengths.push_back(fs.strengths[i]);\n       }\n"
                },
                {
                    "date": 1648148538464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,8 +127,9 @@\n         okStrengths.push_back(fs.strengths[i]);\n       }\n   }\n   dbg(okPoints.size());\n+  assert(okPoints.size() == 30);\n   deleteFeaturesWithFailureStatus(pl0, pr0, pl1, pr1, pret, fs, status);\n   assert(fs.ages.size() == okPoints.size());\n   assert(fs.strengths.size() == okPoints.size());\n   assert(fs.points.size() == okPoints.size());\n"
                },
                {
                    "date": 1648148550317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n         okStrengths.push_back(fs.strengths[i]);\n       }\n   }\n   dbg(okPoints.size());\n-  assert(okPoints.size() == 30);\n+  assert(okPoints.size() >= 30); // Got 30 with default settings\n   deleteFeaturesWithFailureStatus(pl0, pr0, pl1, pr1, pret, fs, status);\n   assert(fs.ages.size() == okPoints.size());\n   assert(fs.strengths.size() == okPoints.size());\n   assert(fs.points.size() == okPoints.size());\n"
                },
                {
                    "date": 1648148570940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n         okStrengths.push_back(fs.strengths[i]);\n       }\n   }\n   dbg(okPoints.size());\n-  assert(okPoints.size() >= 30); // Got 30 with default settings\n+  assert(okPoints.size() >= 30); // Got 30 with original branch, want more if possible\n   deleteFeaturesWithFailureStatus(pl0, pr0, pl1, pr1, pret, fs, status);\n   assert(fs.ages.size() == okPoints.size());\n   assert(fs.strengths.size() == okPoints.size());\n   assert(fs.points.size() == okPoints.size());\n"
                },
                {
                    "date": 1648148590915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,14 +126,13 @@\n         okPoints.push_back(fs.points[i]);\n         okStrengths.push_back(fs.strengths[i]);\n       }\n   }\n-  dbg(okPoints.size());\n   assert(okPoints.size() >= 30); // Got 30 with original branch, want more if possible\n   deleteFeaturesWithFailureStatus(pl0, pr0, pl1, pr1, pret, fs, status);\n-  assert(fs.ages.size() == okPoints.size());\n   assert(fs.strengths.size() == okPoints.size());\n   assert(fs.points.size() == okPoints.size());\n+  assert(fs.ages.size() == okPoints.size());\n \n }\n \n void run_tests() {\n"
                },
                {
                    "date": 1648148599182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n       }\n   }\n   assert(okPoints.size() >= 30); // Got 30 with original branch, want more if possible\n   deleteFeaturesWithFailureStatus(pl0, pr0, pl1, pr1, pret, fs, status);\n-  assert(fs.strengths.size() == okPoints.size());\n+  assert(fs.strengths.size() == okPoints.size(), fs.strengths.size());\n   assert(fs.points.size() == okPoints.size());\n   assert(fs.ages.size() == okPoints.size());\n \n }\n"
                },
                {
                    "date": 1648148626812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,10 @@\n       }\n   }\n   assert(okPoints.size() >= 30); // Got 30 with original branch, want more if possible\n   deleteFeaturesWithFailureStatus(pl0, pr0, pl1, pr1, pret, fs, status);\n-  assert(fs.strengths.size() == okPoints.size(), fs.strengths.size());\n+  dbg(fs.strengths.size());\n+  assert(fs.strengths.size() == okPoints.size());\n   assert(fs.points.size() == okPoints.size());\n   assert(fs.ages.size() == okPoints.size());\n \n }\n"
                },
                {
                    "date": 1648148710135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,8 @@\n       }\n   }\n   assert(okPoints.size() >= 30); // Got 30 with original branch, want more if possible\n   deleteFeaturesWithFailureStatus(pl0, pr0, pl1, pr1, pret, fs, status);\n-  dbg(fs.strengths.size());\n   assert(fs.strengths.size() == okPoints.size());\n   assert(fs.points.size() == okPoints.size());\n   assert(fs.ages.size() == okPoints.size());\n \n"
                },
                {
                    "date": 1648148809931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,8 +131,12 @@\n   deleteFeaturesWithFailureStatus(pl0, pr0, pl1, pr1, pret, fs, status);\n   assert(fs.strengths.size() == okPoints.size());\n   assert(fs.points.size() == okPoints.size());\n   assert(fs.ages.size() == okPoints.size());\n+  for(unsigned int i = 0; i < status.size(); i++){\n+    assert(okPoints[i] == fs.points[i]);\n+    assert(okStrengths[i] == fs.strengths[i]);\n+  }\n \n }\n \n void run_tests() {\n"
                },
                {
                    "date": 1648148816475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n   deleteFeaturesWithFailureStatus(pl0, pr0, pl1, pr1, pret, fs, status);\n   assert(fs.strengths.size() == okPoints.size());\n   assert(fs.points.size() == okPoints.size());\n   assert(fs.ages.size() == okPoints.size());\n-  for(unsigned int i = 0; i < status.size(); i++){\n+  for(unsigned int i = 0; i < okPoints.size(); i++){\n     assert(okPoints[i] == fs.points[i]);\n     assert(okStrengths[i] == fs.strengths[i]);\n   }\n \n"
                },
                {
                    "date": 1648148833390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,8 +125,9 @@\n       if(status[i]){\n         okPoints.push_back(fs.points[i]);\n         okStrengths.push_back(fs.strengths[i]);\n       }\n+      fs.ages[i] = i;\n   }\n   assert(okPoints.size() >= 30); // Got 30 with original branch, want more if possible\n   deleteFeaturesWithFailureStatus(pl0, pr0, pl1, pr1, pret, fs, status);\n   assert(fs.strengths.size() == okPoints.size());\n"
                },
                {
                    "date": 1648148843719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,15 +119,17 @@\n   fs.appendFeaturesFromImage(iL0);\n   pl0 = fs.points;\n   std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n   std::vector<int> okStrengths;\n+  std::vector<int> okAges;\n   std::vector<cv::Point2f> okPoints;\n   for(unsigned int i = 0; i < status.size(); i++){\n+      fs.ages[i] = i;\n       if(status[i]){\n         okPoints.push_back(fs.points[i]);\n         okStrengths.push_back(fs.strengths[i]);\n+        okAges.push_back(fs.strengths[i]);\n       }\n-      fs.ages[i] = i;\n   }\n   assert(okPoints.size() >= 30); // Got 30 with original branch, want more if possible\n   deleteFeaturesWithFailureStatus(pl0, pr0, pl1, pr1, pret, fs, status);\n   assert(fs.strengths.size() == okPoints.size());\n"
                },
                {
                    "date": 1648148851381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n       fs.ages[i] = i;\n       if(status[i]){\n         okPoints.push_back(fs.points[i]);\n         okStrengths.push_back(fs.strengths[i]);\n-        okAges.push_back(fs.strengths[i]);\n+        okAges.push_back(fs.ages[i]);\n       }\n   }\n   assert(okPoints.size() >= 30); // Got 30 with original branch, want more if possible\n   deleteFeaturesWithFailureStatus(pl0, pr0, pl1, pr1, pret, fs, status);\n"
                },
                {
                    "date": 1648148864256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,8 +137,9 @@\n   assert(fs.ages.size() == okPoints.size());\n   for(unsigned int i = 0; i < okPoints.size(); i++){\n     assert(okPoints[i] == fs.points[i]);\n     assert(okStrengths[i] == fs.strengths[i]);\n+    assert(okAges[i] == fs.ages[i]);\n   }\n \n }\n \n"
                },
                {
                    "date": 1648148912415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,8 +139,9 @@\n     assert(okPoints[i] == fs.points[i]);\n     assert(okStrengths[i] == fs.strengths[i]);\n     assert(okAges[i] == fs.ages[i]);\n   }\n+  assert(pl0.size() == okPoints.size());\n \n }\n \n void run_tests() {\n"
                },
                {
                    "date": 1648148924805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,8 +140,11 @@\n     assert(okStrengths[i] == fs.strengths[i]);\n     assert(okAges[i] == fs.ages[i]);\n   }\n   assert(pl0.size() == okPoints.size());\n+  assert(pl1.size() == okPoints.size());\n+  assert(pr0.size() == okPoints.size());\n+  assert(pr1.size() == okPoints.size());\n \n }\n \n void run_tests() {\n"
                },
                {
                    "date": 1648148930362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,8 +143,9 @@\n   assert(pl0.size() == okPoints.size());\n   assert(pl1.size() == okPoints.size());\n   assert(pr0.size() == okPoints.size());\n   assert(pr1.size() == okPoints.size());\n+  assert(pret.size() == okPoints.size());\n \n }\n \n void run_tests() {\n"
                },
                {
                    "date": 1648148943951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,8 +118,13 @@\n   FeatureSet fs;\n   fs.appendFeaturesFromImage(iL0);\n   pl0 = fs.points;\n   std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n+  assert(pl0.size() == status.size());\n+  assert(pl1.size() == status.size());\n+  assert(pr0.size() == status.size());\n+  assert(pr1.size() == okPoints.size());\n+  assert(pret.size() == okPoints.size());\n   std::vector<int> okStrengths;\n   std::vector<int> okAges;\n   std::vector<cv::Point2f> okPoints;\n   for(unsigned int i = 0; i < status.size(); i++){\n"
                },
                {
                    "date": 1648148962726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,8 +116,9 @@\n   cv::Mat iL1 = cv::imread(\"run1images/left/frame000004.png\", cv::IMREAD_GRAYSCALE);\n   cv::Mat iR1 = cv::imread(\"run1images/right/frame000004.png\", cv::IMREAD_GRAYSCALE);\n   FeatureSet fs;\n   fs.appendFeaturesFromImage(iL0);\n+  int n_points = fs.points.size();\n   pl0 = fs.points;\n   std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n   assert(pl0.size() == status.size());\n   assert(pl1.size() == status.size());\n"
                },
                {
                    "date": 1648148975302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,10 @@\n   fs.appendFeaturesFromImage(iL0);\n   int n_points = fs.points.size();\n   pl0 = fs.points;\n   std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n-  assert(pl0.size() == status.size());\n+  assert(status.size() == n_points\n+  assert(pl0.size() == n_points);\n   assert(pl1.size() == status.size());\n   assert(pr0.size() == status.size());\n   assert(pr1.size() == okPoints.size());\n   assert(pret.size() == okPoints.size());\n"
                },
                {
                    "date": 1648148989849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,12 +121,12 @@\n   pl0 = fs.points;\n   std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n   assert(status.size() == n_points\n   assert(pl0.size() == n_points);\n-  assert(pl1.size() == status.size());\n-  assert(pr0.size() == status.size());\n-  assert(pr1.size() == okPoints.size());\n-  assert(pret.size() == okPoints.size());\n+  assert(pl1.size() == n_points);\n+  assert(pr0.size() == n_points);\n+  assert(pr1.size() == n_points);\n+  assert(pret.size() == n_points);\n   std::vector<int> okStrengths;\n   std::vector<int> okAges;\n   std::vector<cv::Point2f> okPoints;\n   for(unsigned int i = 0; i < status.size(); i++){\n"
                },
                {
                    "date": 1648149002837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,9 @@\n   fs.appendFeaturesFromImage(iL0);\n   int n_points = fs.points.size();\n   pl0 = fs.points;\n   std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n-  assert(status.size() == n_points\n+  assert(status.size() == n_points);\n   assert(pl0.size() == n_points);\n   assert(pl1.size() == n_points);\n   assert(pr0.size() == n_points);\n   assert(pr1.size() == n_points);\n"
                },
                {
                    "date": 1648149015995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n   cv::Mat iL1 = cv::imread(\"run1images/left/frame000004.png\", cv::IMREAD_GRAYSCALE);\n   cv::Mat iR1 = cv::imread(\"run1images/right/frame000004.png\", cv::IMREAD_GRAYSCALE);\n   FeatureSet fs;\n   fs.appendFeaturesFromImage(iL0);\n-  int n_points = fs.points.size();\n+  unsigned int n_points = fs.points.size();\n   pl0 = fs.points;\n   std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n   assert(status.size() == n_points);\n   assert(pl0.size() == n_points);\n"
                },
                {
                    "date": 1648149086877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,9 +151,8 @@\n   assert(pl1.size() == okPoints.size());\n   assert(pr0.size() == okPoints.size());\n   assert(pr1.size() == okPoints.size());\n   assert(pret.size() == okPoints.size());\n-\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648149124374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,8 +125,10 @@\n   assert(pl1.size() == n_points);\n   assert(pr0.size() == n_points);\n   assert(pr1.size() == n_points);\n   assert(pret.size() == n_points);\n+\n+  // Also test deleteFeaturesWithFailureStatus\n   std::vector<int> okStrengths;\n   std::vector<int> okAges;\n   std::vector<cv::Point2f> okPoints;\n   for(unsigned int i = 0; i < status.size(); i++){\n"
                },
                {
                    "date": 1648149167178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,13 +105,9 @@\n   // Maybe\n }\n \n void test_circularMatching() {\n-  std::vector<cv::Point2f> pl0;\n-  std::vector<cv::Point2f> pr0;\n-  std::vector<cv::Point2f> pl1;\n-  std::vector<cv::Point2f> pr1;\n-  std::vector<cv::Point2f> pret;\n+  std::vector<cv::Point2f> pl0, pr0, pl1, pr1, pret;\n   cv::Mat iL0 = cv::imread(\"run1images/left/frame000001.png\", cv::IMREAD_GRAYSCALE);\n   cv::Mat iR0 = cv::imread(\"run1images/right/frame000001.png\", cv::IMREAD_GRAYSCALE);\n   cv::Mat iL1 = cv::imread(\"run1images/left/frame000004.png\", cv::IMREAD_GRAYSCALE);\n   cv::Mat iR1 = cv::imread(\"run1images/right/frame000004.png\", cv::IMREAD_GRAYSCALE);\n@@ -125,10 +121,20 @@\n   assert(pl1.size() == n_points);\n   assert(pr0.size() == n_points);\n   assert(pr1.size() == n_points);\n   assert(pret.size() == n_points);\n+}\n \n-  // Also test deleteFeaturesWithFailureStatus\n+void test_deleteFeaturesWithFailureStatus() {\n+  std::vector<cv::Point2f> pl0, pr0, pl1, pr1, pret;\n+  cv::Mat iL0 = cv::imread(\"run1images/left/frame000001.png\", cv::IMREAD_GRAYSCALE);\n+  cv::Mat iR0 = cv::imread(\"run1images/right/frame000001.png\", cv::IMREAD_GRAYSCALE);\n+  cv::Mat iL1 = cv::imread(\"run1images/left/frame000004.png\", cv::IMREAD_GRAYSCALE);\n+  cv::Mat iR1 = cv::imread(\"run1images/right/frame000004.png\", cv::IMREAD_GRAYSCALE);\n+  FeatureSet fs;\n+  fs.appendFeaturesFromImage(iL0);\n+  unsigned int n_points = fs.points.size();\n+  std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n   std::vector<int> okStrengths;\n   std::vector<int> okAges;\n   std::vector<cv::Point2f> okPoints;\n   for(unsigned int i = 0; i < status.size(); i++){\n"
                },
                {
                    "date": 1648149184396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,10 +133,9 @@\n   FeatureSet fs;\n   fs.appendFeaturesFromImage(iL0);\n   unsigned int n_points = fs.points.size();\n   std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n-  std::vector<int> okStrengths;\n-  std::vector<int> okAges;\n+  std::vector<int> okStrengths, okAges;\n   std::vector<cv::Point2f> okPoints;\n   for(unsigned int i = 0; i < status.size(); i++){\n       fs.ages[i] = i;\n       if(status[i]){\n"
                },
                {
                    "date": 1648149209189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,8 +121,9 @@\n   assert(pl1.size() == n_points);\n   assert(pr0.size() == n_points);\n   assert(pr1.size() == n_points);\n   assert(pret.size() == n_points);\n+  assert(okPoints.size() >= 30); // Got 30 with original branch, want more if possible\n }\n \n void test_deleteFeaturesWithFailureStatus() {\n   std::vector<cv::Point2f> pl0, pr0, pl1, pr1, pret;\n@@ -143,9 +144,8 @@\n         okStrengths.push_back(fs.strengths[i]);\n         okAges.push_back(fs.ages[i]);\n       }\n   }\n-  assert(okPoints.size() >= 30); // Got 30 with original branch, want more if possible\n   deleteFeaturesWithFailureStatus(pl0, pr0, pl1, pr1, pret, fs, status);\n   assert(fs.strengths.size() == okPoints.size());\n   assert(fs.points.size() == okPoints.size());\n   assert(fs.ages.size() == okPoints.size());\n"
                },
                {
                    "date": 1648149230297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,15 @@\n   assert(pl1.size() == n_points);\n   assert(pr0.size() == n_points);\n   assert(pr1.size() == n_points);\n   assert(pret.size() == n_points);\n-  assert(okPoints.size() >= 30); // Got 30 with original branch, want more if possible\n+  int ok = 0;\n+  for(int i = 0; i < status.size(); i++){\n+    if(status[i]){\n+      ok++;\n+    }\n+  }\n+  assert(ok >= 30); // Got 30 with original branch, want more if possible\n }\n \n void test_deleteFeaturesWithFailureStatus() {\n   std::vector<cv::Point2f> pl0, pr0, pl1, pr1, pret;\n"
                },
                {
                    "date": 1648149273081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,8 +179,10 @@\n   std::cout << \"TEST FIND UNMOVED POINTS\" << std::endl;\n   test_findUnmovedPoints();\n   std::cout << \"TEST CIRCULAR MATCHING\" << std::endl;\n   test_circularMatching();\n+  std::cout << \"TEST DELETE FEATURES\" << std::endl;\n+  test_deleteFeaturesWithFailureStatus();\n   std::cout << \"ALL TESTS PASS\" << std::endl;\n   // assert(false);\n   // std::cout << \"NEVERMIND ASSERTS WERE JUST DISABLED\" << std::endl;\n }\n"
                },
                {
                    "date": 1648149445310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,8 +186,17 @@\n   // assert(false);\n   // std::cout << \"NEVERMIND ASSERTS WERE JUST DISABLED\" << std::endl;\n }\n \n+bool isRotationMatrix(const cv::Mat &R)\n+{\n+    cv::Mat Rt;\n+    transpose(R, Rt);\n+    cv::Mat shouldBeIdentity = Rt * R;\n+    cv::Mat I = cv::Mat::eye(3,3, shouldBeIdentity.type());\n+     \n+    return  norm(I, shouldBeIdentity) < 1e-6;\n+}\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n     run_tests();\n     std::string folderName = \"run1images\";\n@@ -215,8 +224,9 @@\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         // std::cout << cur_img_l << std::endl;\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         vo.stereo_callback(cur_img_l, cur_img_r);\n+        assert(isRotationMatrix(vo.rotation));\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n"
                },
                {
                    "date": 1648149799004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -223,9 +223,10 @@\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         // std::cout << cur_img_l << std::endl;\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n-        vo.stereo_callback(cur_img_l, cur_img_r);\n+        std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n+        cv::Mat rotation = out[1]\n         assert(isRotationMatrix(vo.rotation));\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1648149804166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,9 +224,10 @@\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         // std::cout << cur_img_l << std::endl;\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n-        cv::Mat rotation = out[1]\n+        cv::Mat translation = out[1];\n+        cv::Mat rotation = out[1];\n         assert(isRotationMatrix(vo.rotation));\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1648149813729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,10 +224,10 @@\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         // std::cout << cur_img_l << std::endl;\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n-        cv::Mat translation = out[1];\n-        cv::Mat rotation = out[1];\n+        cv::Mat translation = out.first;\n+        cv::Mat rotation = out.second;\n         assert(isRotationMatrix(vo.rotation));\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1648149820826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n         cv::Mat translation = out.first;\n         cv::Mat rotation = out.second;\n-        assert(isRotationMatrix(vo.rotation));\n+        assert(isRotationMatrix(rotation));\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n"
                },
                {
                    "date": 1648149995408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,8 +195,32 @@\n     cv::Mat I = cv::Mat::eye(3,3, shouldBeIdentity.type());\n      \n     return  norm(I, shouldBeIdentity) < 1e-6;\n }\n+\n+void visual_odometry::integrateOdometryStereo(cv::Mat &frame_pose, const cv::Mat &rotation,\n+                              const cv::Mat &translation_stereo) {\n+  cv::Mat rigid_body_transformation;\n+\n+  cv::Mat addup = (cv::Mat_<double>(1, 4) << 0, 0, 0, 1);\n+\n+  cv::hconcat(rotation, translation_stereo, rigid_body_transformation);\n+  cv::vconcat(rigid_body_transformation, addup, rigid_body_transformation);\n+\n+  const double scale = sqrt(\n+    (translation_stereo.at<double>(0) * translation_stereo.at<double>(0)) +\n+    (translation_stereo.at<double>(1) * translation_stereo.at<double>(1)) +\n+    (translation_stereo.at<double>(2) * translation_stereo.at<double>(2)));\n+\n+  rigid_body_transformation = rigid_body_transformation.inv();\n+  if (scale > 0.001 && scale < 10) // WHY DO WE NEED THIS\n+  {\n+    frame_pose = frame_pose * rigid_body_transformation;\n+  } else {\n+    std::cout << \"[WARNING] scale below 0.1, or incorrect translation\"\n+              << std::endl;\n+  }\n+}\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n     run_tests();\n     std::string folderName = \"run1images\";\n"
                },
                {
                    "date": 1648150019106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,9 +196,20 @@\n      \n     return  norm(I, shouldBeIdentity) < 1e-6;\n }\n \n-void visual_odometry::integrateOdometryStereo(cv::Mat &frame_pose, const cv::Mat &rotation,\n+/**\n+ * @brief Compute the next pose from the current one\n+ * given the rotation and translation in the frame.\n+ * Essentially a multiplication of homogeneous transforms.\n+ * \n+ * @param frame_pose The original position of the robot, will be modified.\n+ *\n+ * @param rotation The rotation to go through.\n+ *\n+ * @param translation_stereo The translation to go through.\n+ */\n+void integrateOdometryStereo(cv::Mat &frame_pose, const cv::Mat &rotation,\n                               const cv::Mat &translation_stereo) {\n   cv::Mat rigid_body_transformation;\n \n   cv::Mat addup = (cv::Mat_<double>(1, 4) << 0, 0, 0, 1);\n"
                },
                {
                    "date": 1648150026506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,8 +230,9 @@\n     std::cout << \"[WARNING] scale below 0.1, or incorrect translation\"\n               << std::endl;\n   }\n }\n+\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n     run_tests();\n     std::string folderName = \"run1images\";\n"
                },
                {
                    "date": 1648150449816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,43 +196,8 @@\n      \n     return  norm(I, shouldBeIdentity) < 1e-6;\n }\n \n-/**\n- * @brief Compute the next pose from the current one\n- * given the rotation and translation in the frame.\n- * Essentially a multiplication of homogeneous transforms.\n- * \n- * @param frame_pose The original position of the robot, will be modified.\n- *\n- * @param rotation The rotation to go through.\n- *\n- * @param translation_stereo The translation to go through.\n- */\n-void integrateOdometryStereo(cv::Mat &frame_pose, const cv::Mat &rotation,\n-                              const cv::Mat &translation_stereo) {\n-  cv::Mat rigid_body_transformation;\n-\n-  cv::Mat addup = (cv::Mat_<double>(1, 4) << 0, 0, 0, 1);\n-\n-  cv::hconcat(rotation, translation_stereo, rigid_body_transformation);\n-  cv::vconcat(rigid_body_transformation, addup, rigid_body_transformation);\n-\n-  const double scale = sqrt(\n-    (translation_stereo.at<double>(0) * translation_stereo.at<double>(0)) +\n-    (translation_stereo.at<double>(1) * translation_stereo.at<double>(1)) +\n-    (translation_stereo.at<double>(2) * translation_stereo.at<double>(2)));\n-\n-  rigid_body_transformation = rigid_body_transformation.inv();\n-  if (scale > 0.001 && scale < 10) // WHY DO WE NEED THIS\n-  {\n-    frame_pose = frame_pose * rigid_body_transformation;\n-  } else {\n-    std::cout << \"[WARNING] scale below 0.1, or incorrect translation\"\n-              << std::endl;\n-  }\n-}\n-\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n     run_tests();\n     std::string folderName = \"run1images\";\n@@ -262,8 +227,9 @@\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n         cv::Mat translation = out.first;\n         cv::Mat rotation = out.second;\n+        std::cout << xyz.at<double>(0);\n         assert(isRotationMatrix(rotation));\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1648150471270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,9 +227,9 @@\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n         cv::Mat translation = out.first;\n         cv::Mat rotation = out.second;\n-        std::cout << xyz.at<double>(0);\n+        std::cout << translation.at<double>(0) << translation.at<double>(0) << translation.at<double>(0) << \")\" << endl\n         assert(isRotationMatrix(rotation));\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1648150481251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,9 +227,9 @@\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n         cv::Mat translation = out.first;\n         cv::Mat rotation = out.second;\n-        std::cout << translation.at<double>(0) << translation.at<double>(0) << translation.at<double>(0) << \")\" << endl\n+        std::cout << translation.at<double>(0) << translation.at<double>(0) << \", \" << translation.at<double>(0) << \")\" << \"\\n\";\n         assert(isRotationMatrix(rotation));\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1648150498254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,9 +227,9 @@\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n         cv::Mat translation = out.first;\n         cv::Mat rotation = out.second;\n-        std::cout << translation.at<double>(0) << translation.at<double>(0) << \", \" << translation.at<double>(0) << \")\" << \"\\n\";\n+        std::cout << \"(\" << translation.at<double>(0) << \", \" << translation.at<double>(1) << \", \" << translation.at<double>(2) << \")\" << \"\\n\";\n         assert(isRotationMatrix(rotation));\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1648150505577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,9 +227,10 @@\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n         cv::Mat translation = out.first;\n         cv::Mat rotation = out.second;\n-        std::cout << \"(\" << translation.at<double>(0) << \", \" << translation.at<double>(1) << \", \" << translation.at<double>(2) << \")\" << \"\\n\";\n+        std::cout << \"(\" << translation.at<double>(0) << \", \" << translation.at<double>(1)\n+                << \", \" << translation.at<double>(2) << \")\" << \"\\n\";\n         assert(isRotationMatrix(rotation));\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1648150511251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -228,9 +228,9 @@\n         std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n         cv::Mat translation = out.first;\n         cv::Mat rotation = out.second;\n         std::cout << \"(\" << translation.at<double>(0) << \", \" << translation.at<double>(1)\n-                << \", \" << translation.at<double>(2) << \")\" << \"\\n\";\n+                << \", \" << translation.at<double>(2) << \")\\n\";\n         assert(isRotationMatrix(rotation));\n     }\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1648150517581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,8 +231,9 @@\n         std::cout << \"(\" << translation.at<double>(0) << \", \" << translation.at<double>(1)\n                 << \", \" << translation.at<double>(2) << \")\\n\";\n         assert(isRotationMatrix(rotation));\n     }\n+    std::cout << endl;\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n }\n"
                },
                {
                    "date": 1648150596598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,11 +229,17 @@\n         cv::Mat translation = out.first;\n         cv::Mat rotation = out.second;\n         std::cout << \"(\" << translation.at<double>(0) << \", \" << translation.at<double>(1)\n                 << \", \" << translation.at<double>(2) << \")\\n\";\n+        std::cout << \"[\\n\";\n+        for(int i = 0; i < 3; i++){\n+        std::cout << \"[\" << rotation.at<double>(i,0) << \", \" << translation.at<double>(i,1)\n+                << \", \" << translation.at<double>(i,2) << \"]\\n\";\n+        }\n+        std::cout << \"]\\n\";\n         assert(isRotationMatrix(rotation));\n     }\n-    std::cout << endl;\n+    std::cout << std::endl;\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n }\n"
                },
                {
                    "date": 1648150625907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n   assert(pr0.size() == n_points);\n   assert(pr1.size() == n_points);\n   assert(pret.size() == n_points);\n   int ok = 0;\n-  for(int i = 0; i < status.size(); i++){\n+  for(unsigned int i = 0; i < status.size(); i++){\n     if(status[i]){\n       ok++;\n     }\n   }\n@@ -138,9 +138,8 @@\n   cv::Mat iL1 = cv::imread(\"run1images/left/frame000004.png\", cv::IMREAD_GRAYSCALE);\n   cv::Mat iR1 = cv::imread(\"run1images/right/frame000004.png\", cv::IMREAD_GRAYSCALE);\n   FeatureSet fs;\n   fs.appendFeaturesFromImage(iL0);\n-  unsigned int n_points = fs.points.size();\n   std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n   std::vector<int> okStrengths, okAges;\n   std::vector<cv::Point2f> okPoints;\n   for(unsigned int i = 0; i < status.size(); i++){\n"
                },
                {
                    "date": 1648150879426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,8 +138,9 @@\n   cv::Mat iL1 = cv::imread(\"run1images/left/frame000004.png\", cv::IMREAD_GRAYSCALE);\n   cv::Mat iR1 = cv::imread(\"run1images/right/frame000004.png\", cv::IMREAD_GRAYSCALE);\n   FeatureSet fs;\n   fs.appendFeaturesFromImage(iL0);\n+  pl0 = fs.points;\n   std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n   std::vector<int> okStrengths, okAges;\n   std::vector<cv::Point2f> okPoints;\n   for(unsigned int i = 0; i < status.size(); i++){\n"
                },
                {
                    "date": 1648150903368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,10 +113,12 @@\n   cv::Mat iR1 = cv::imread(\"run1images/right/frame000004.png\", cv::IMREAD_GRAYSCALE);\n   FeatureSet fs;\n   fs.appendFeaturesFromImage(iL0);\n   unsigned int n_points = fs.points.size();\n+  std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n+  assert(status.size() == 0);\n+  status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n   pl0 = fs.points;\n-  std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n   assert(status.size() == n_points);\n   assert(pl0.size() == n_points);\n   assert(pl1.size() == n_points);\n   assert(pr0.size() == n_points);\n"
                },
                {
                    "date": 1648151033415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,10 +115,10 @@\n   fs.appendFeaturesFromImage(iL0);\n   unsigned int n_points = fs.points.size();\n   std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n   assert(status.size() == 0);\n+  pl0 = fs.points;\n   status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n-  pl0 = fs.points;\n   assert(status.size() == n_points);\n   assert(pl0.size() == n_points);\n   assert(pl1.size() == n_points);\n   assert(pr0.size() == n_points);\n"
                },
                {
                    "date": 1648151052549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,8 +115,10 @@\n   fs.appendFeaturesFromImage(iL0);\n   unsigned int n_points = fs.points.size();\n   std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n   assert(status.size() == 0);\n+  pl0.push_back(fs.points[0]);\n+  status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n   pl0 = fs.points;\n   status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n   assert(status.size() == n_points);\n   assert(pl0.size() == n_points);\n"
                },
                {
                    "date": 1648151073265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,12 +113,15 @@\n   cv::Mat iR1 = cv::imread(\"run1images/right/frame000004.png\", cv::IMREAD_GRAYSCALE);\n   FeatureSet fs;\n   fs.appendFeaturesFromImage(iL0);\n   unsigned int n_points = fs.points.size();\n+  // Check that it doesn't crash on boundary conditions\n   std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n   assert(status.size() == 0);\n   pl0.push_back(fs.points[0]);\n   status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n+  assert(status.size() == 1);\n+\n   pl0 = fs.points;\n   status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n   assert(status.size() == n_points);\n   assert(pl0.size() == n_points);\n"
                },
                {
                    "date": 1648151127657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,9 @@\n   assert(status.size() == 0);\n   pl0.push_back(fs.points[0]);\n   status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n   assert(status.size() == 1);\n-\n+  // run\n   pl0 = fs.points;\n   status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n   assert(status.size() == n_points);\n   assert(pl0.size() == n_points);\n@@ -238,10 +238,10 @@\n         std::cout << \"(\" << translation.at<double>(0) << \", \" << translation.at<double>(1)\n                 << \", \" << translation.at<double>(2) << \")\\n\";\n         std::cout << \"[\\n\";\n         for(int i = 0; i < 3; i++){\n-        std::cout << \"[\" << rotation.at<double>(i,0) << \", \" << translation.at<double>(i,1)\n-                << \", \" << translation.at<double>(i,2) << \"]\\n\";\n+          std::cout << \"[\" << rotation.at<double>(i,0) << \", \" << translation.at<double>(i,1)\n+                  << \", \" << translation.at<double>(i,2) << \"]\\n\";\n         }\n         std::cout << \"]\\n\";\n         assert(isRotationMatrix(rotation));\n     }\n"
                },
                {
                    "date": 1648151233854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,10 +238,10 @@\n         std::cout << \"(\" << translation.at<double>(0) << \", \" << translation.at<double>(1)\n                 << \", \" << translation.at<double>(2) << \")\\n\";\n         std::cout << \"[\\n\";\n         for(int i = 0; i < 3; i++){\n-          std::cout << \"[\" << rotation.at<double>(i,0) << \", \" << translation.at<double>(i,1)\n-                  << \", \" << translation.at<double>(i,2) << \"]\\n\";\n+          std::cout << \"[\" << rotation.at<double>(i,0) << \", \" << rotation.at<double>(i,1)\n+                  << \", \" << rotation.at<double>(i,2) << \"]\\n\";\n         }\n         std::cout << \"]\\n\";\n         assert(isRotationMatrix(rotation));\n     }\n"
                },
                {
                    "date": 1648151393976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,16 +234,19 @@\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n         cv::Mat translation = out.first;\n         cv::Mat rotation = out.second;\n-        std::cout << \"(\" << translation.at<double>(0) << \", \" << translation.at<double>(1)\n-                << \", \" << translation.at<double>(2) << \")\\n\";\n-        std::cout << \"[\\n\";\n-        for(int i = 0; i < 3; i++){\n-          std::cout << \"[\" << rotation.at<double>(i,0) << \", \" << rotation.at<double>(i,1)\n-                  << \", \" << rotation.at<double>(i,2) << \"]\\n\";\n+        // if there was any update, translation[0] will almost surely have moved by epsilon\n+        if(translation.at<double>(0) != 0){ \n+          std::cout << \"(\" << translation.at<double>(0) << \", \" << translation.at<double>(1)\n+                  << \", \" << translation.at<double>(2) << \")\\n\";\n+          std::cout << \"[\\n\";\n+          for(int i = 0; i < 3; i++){\n+            std::cout << \"[\" << rotation.at<double>(i,0) << \", \" << rotation.at<double>(i,1)\n+                    << \", \" << rotation.at<double>(i,2) << \"]\\n\";\n+          }\n+          std::cout << \"]\\n\";\n         }\n-        std::cout << \"]\\n\";\n         assert(isRotationMatrix(rotation));\n     }\n     std::cout << std::endl;\n     \n"
                },
                {
                    "date": 1648151406175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,10 @@\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n         cv::Mat translation = out.first;\n         cv::Mat rotation = out.second;\n-        // if there was any update, translation[0] will almost surely have moved by epsilon\n+        // If there was any update, translation[0] will almost surely have moved by epsilon,\n+        // otherwise no need to print\n         if(translation.at<double>(0) != 0){ \n           std::cout << \"(\" << translation.at<double>(0) << \", \" << translation.at<double>(1)\n                   << \", \" << translation.at<double>(2) << \")\\n\";\n           std::cout << \"[\\n\";\n"
                },
                {
                    "date": 1648151528400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,10 +232,10 @@\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         // std::cout << cur_img_l << std::endl;\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n-        cv::Mat translation = out.first;\n-        cv::Mat rotation = out.second;\n+        cv::Mat d_translation = out.first;\n+        cv::Mat d_rotation = out.second;\n         // If there was any update, translation[0] will almost surely have moved by epsilon,\n         // otherwise no need to print\n         if(translation.at<double>(0) != 0){ \n           std::cout << \"(\" << translation.at<double>(0) << \", \" << translation.at<double>(1)\n"
                },
                {
                    "date": 1648151542293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,8 +221,10 @@\n     cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n     cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n \n     VisualOdometry vo(projMatrl, projMatrr);\n+    cv::Mat total_translation = out.first;\n+    cv::Mat total_rotation = out.second;\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n@@ -232,10 +234,10 @@\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         // std::cout << cur_img_l << std::endl;\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n-        cv::Mat d_translation = out.first;\n-        cv::Mat d_rotation = out.second;\n+        cv::Mat translation = out.first;\n+        cv::Mat rotation = out.second;\n         // If there was any update, translation[0] will almost surely have moved by epsilon,\n         // otherwise no need to print\n         if(translation.at<double>(0) != 0){ \n           std::cout << \"(\" << translation.at<double>(0) << \", \" << translation.at<double>(1)\n"
                },
                {
                    "date": 1648151576668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,10 +221,10 @@\n     cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n     cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n \n     VisualOdometry vo(projMatrl, projMatrr);\n-    cv::Mat total_translation = out.first;\n-    cv::Mat total_rotation = out.second;\n+    cv::Mat total_rotation = cv::Mat::eye(3, 3, CV_64F);\n+    cv::Mat total_translation = cv::Mat::zeros(3, 1, CV_64F);\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n"
                },
                {
                    "date": 1648151642196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -223,8 +223,9 @@\n \n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat total_rotation = cv::Mat::eye(3, 3, CV_64F);\n     cv::Mat total_translation = cv::Mat::zeros(3, 1, CV_64F);\n+  cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n"
                },
                {
                    "date": 1648151686341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -223,9 +223,9 @@\n \n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat total_rotation = cv::Mat::eye(3, 3, CV_64F);\n     cv::Mat total_translation = cv::Mat::zeros(3, 1, CV_64F);\n-  cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n+    cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n@@ -250,8 +250,9 @@\n           }\n           std::cout << \"]\\n\";\n         }\n         assert(isRotationMatrix(rotation));\n+        visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n     }\n     std::cout << std::endl;\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1648151838404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,10 +221,8 @@\n     cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n     cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n \n     VisualOdometry vo(projMatrl, projMatrr);\n-    cv::Mat total_rotation = cv::Mat::eye(3, 3, CV_64F);\n-    cv::Mat total_translation = cv::Mat::zeros(3, 1, CV_64F);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 128; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n"
                },
                {
                    "date": 1648152016448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,12 +100,8 @@\n     assert(okLocations[i] == ((i % 5) && (i % 7)));\n   }\n }\n \n-void test_rotationMatrixToEulerAngles() {\n-  // Maybe\n-}\n-\n void test_circularMatching() {\n   std::vector<cv::Point2f> pl0, pr0, pl1, pr1, pret;\n   cv::Mat iL0 = cv::imread(\"run1images/left/frame000001.png\", cv::IMREAD_GRAYSCALE);\n   cv::Mat iR0 = cv::imread(\"run1images/right/frame000001.png\", cv::IMREAD_GRAYSCALE);\n"
                },
                {
                    "date": 1648152104788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,8 +184,11 @@\n   std::cout << \"TEST CIRCULAR MATCHING\" << std::endl;\n   test_circularMatching();\n   std::cout << \"TEST DELETE FEATURES\" << std::endl;\n   test_deleteFeaturesWithFailureStatus();\n+\n+  // TODO: Cameratoworld, matchingFeatures maybe (mostly tested)? \n+\n   std::cout << \"ALL TESTS PASS\" << std::endl;\n   // assert(false);\n   // std::cout << \"NEVERMIND ASSERTS WERE JUST DISABLED\" << std::endl;\n }\n"
                },
                {
                    "date": 1648152173875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,9 +184,10 @@\n   std::cout << \"TEST CIRCULAR MATCHING\" << std::endl;\n   test_circularMatching();\n   std::cout << \"TEST DELETE FEATURES\" << std::endl;\n   test_deleteFeaturesWithFailureStatus();\n-\n+  std::cout << \"TEST CAMERA TO WORLD\" << std::endl;\n+  test_cameraToWorld();\n   // TODO: Cameratoworld, matchingFeatures maybe (mostly tested)? \n \n   std::cout << \"ALL TESTS PASS\" << std::endl;\n   // assert(false);\n"
                },
                {
                    "date": 1648152189082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,12 @@\n   assert(pr0.size() == okPoints.size());\n   assert(pr1.size() == okPoints.size());\n   assert(pret.size() == okPoints.size());\n }\n+void test_cameraToWorld() {\n \n+}\n+\n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n   test_bucket_empty();\n   std::cout << \"TEST BUCKET NONEMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648152616747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,12 @@\n   assert(pr1.size() == okPoints.size());\n   assert(pret.size() == okPoints.size());\n }\n void test_cameraToWorld() {\n+  for(unsigned int i = -1; i <= 1; i++){\n+    for(unsigned int j = -1; j <= 1; j++){\n \n+  }\n }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n"
                },
                {
                    "date": 1648152633467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,8 +172,9 @@\n void test_cameraToWorld() {\n   for(unsigned int i = -1; i <= 1; i++){\n     for(unsigned int j = -1; j <= 1; j++){\n \n+    }\n   }\n }\n \n void run_tests() {\n"
                },
                {
                    "date": 1648152672627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,8 +169,9 @@\n   assert(pr1.size() == okPoints.size());\n   assert(pret.size() == okPoints.size());\n }\n void test_cameraToWorld() {\n+  std::vector<cv::Point3f> world_points;\n   for(unsigned int i = -1; i <= 1; i++){\n     for(unsigned int j = -1; j <= 1; j++){\n \n     }\n"
                },
                {
                    "date": 1648153244115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,9 +230,9 @@\n     cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n \n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n-    for(int i = 0; i < 128; i++) {\n+    for(int i = 0; i < 3; i++) {\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n"
                },
                {
                    "date": 1648154556481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n   assert(pr1.size() == okPoints.size());\n   assert(pret.size() == okPoints.size());\n }\n void test_cameraToWorld() {\n-  std::vector<cv::Point3f> world_points;\n+  std::vector<cv::Mat> world_points;\n   for(unsigned int i = -1; i <= 1; i++){\n     for(unsigned int j = -1; j <= 1; j++){\n \n     }\n"
                },
                {
                    "date": 1648154562603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n   assert(pr1.size() == okPoints.size());\n   assert(pret.size() == okPoints.size());\n }\n void test_cameraToWorld() {\n-  std::vector<cv::Mat> world_points;\n+  std::vector<cv::Mat> world_points_channels;\n   for(unsigned int i = -1; i <= 1; i++){\n     for(unsigned int j = -1; j <= 1; j++){\n \n     }\n"
                },
                {
                    "date": 1648154619347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n   assert(pr1.size() == okPoints.size());\n   assert(pret.size() == okPoints.size());\n }\n void test_cameraToWorld() {\n-  std::vector<cv::Mat> world_points_channels;\n+  std::vector<cv::Mat> world_points(9, 3);\n   for(unsigned int i = -1; i <= 1; i++){\n     for(unsigned int j = -1; j <= 1; j++){\n \n     }\n"
                },
                {
                    "date": 1648154663038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,12 +169,14 @@\n   assert(pr1.size() == okPoints.size());\n   assert(pret.size() == okPoints.size());\n }\n void test_cameraToWorld() {\n-  std::vector<cv::Mat> world_points(9, 3);\n+  std::vector<cv::Mat> world_points();\n   for(unsigned int i = -1; i <= 1; i++){\n     for(unsigned int j = -1; j <= 1; j++){\n-\n+      for(unsigned int k = -1; k <= 1; k++){\n+        world_points.push_back(());\n+      }\n     }\n   }\n }\n \n"
                },
                {
                    "date": 1648154671976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,13 +169,13 @@\n   assert(pr1.size() == okPoints.size());\n   assert(pret.size() == okPoints.size());\n }\n void test_cameraToWorld() {\n-  std::vector<cv::Mat> world_points();\n+  std::vector<cv::Mat> world_points(3);\n   for(unsigned int i = -1; i <= 1; i++){\n     for(unsigned int j = -1; j <= 1; j++){\n       for(unsigned int k = -1; k <= 1; k++){\n-        world_points.push_back(());\n+        world_points.push_back((i, j, k));\n       }\n     }\n   }\n }\n"
                },
                {
                    "date": 1648154689993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n   std::vector<cv::Mat> world_points(3);\n   for(unsigned int i = -1; i <= 1; i++){\n     for(unsigned int j = -1; j <= 1; j++){\n       for(unsigned int k = -1; k <= 1; k++){\n-        world_points.push_back((i, j, k));\n+        world_points[0].push_back(i);\n       }\n     }\n   }\n }\n"
                },
                {
                    "date": 1648154707060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n   assert(pr1.size() == okPoints.size());\n   assert(pret.size() == okPoints.size());\n }\n void test_cameraToWorld() {\n-  std::vector<cv::Mat> world_points(3);\n+  std::vector<cv::Mat> world_points(3, cv::Mat(0, 27));\n   for(unsigned int i = -1; i <= 1; i++){\n     for(unsigned int j = -1; j <= 1; j++){\n       for(unsigned int k = -1; k <= 1; k++){\n         world_points[0].push_back(i);\n"
                },
                {
                    "date": 1648525238269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,9 +229,37 @@\n     cv::Mat_<int16_t> disparity16;\n \n     cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n     cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n-\n+    // float left_K[3][3] = {\n+    //     {312.69895, 0., 329.4498}, {0., 315.80576, 174.64982}, {0., 0., 1.}};\n+    // // Left Rectification Matrix\n+    // float left_R[3][3] = {{0.99997362, -0.00725539, -0.0003528},\n+    //                       {0.00725548, 0.99997365, 0.00025699},\n+    //                       {0.00035093, -0.00025954, 0.9999999}};\n+    // // Left Perspective Matrix\n+    // float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n+    //                       {0.0, 322.11376, 176.33722, 0.0},\n+    //                       {0.0, 0.0, 1.0, 0.0}};\n+    // // Left Distortion Parameters\n+    // float left_D[5] = {\n+    //     0.006077, -0.005817, 0.000336, -0.000403, 0.000000,\n+    // };\n+    // // Right Intrinsic Matrix\n+    // float right_K[3][3] = {\n+    //     {312.19765, 0., 324.32079}, {0., 315.39023, 178.21339}, {0., 0., 1.}};\n+    // // Right Rectification Matrix\n+    // float right_R[3][3] = {{0.99997866, -0.00651671, -0.00046144},\n+    //                        {0.00651659, 0.99997873, -0.00025977},\n+    //                        {0.00046313, 0.00025676, 0.99999986}};\n+    // // Right Perspective Matrix\n+    // float right_P[3][4] = {{322.11376, 0.0, 327.47336, -22.5428},\n+    //                        {0.0, 322.11376, 176.33722, 0.0},\n+    //                        {0.0, 0.0, 1.0, 0.0}};\n+    // // Right Distortion Parameters\n+    // float right_D[5] = {\n+    //     0.005766, -0.005878, -0.000538, 0.000578, 0.000000,\n+    // };\n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 3; i++) {\n         std::stringstream lFileName;\n"
                },
                {
                    "date": 1648525419100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,9 +216,9 @@\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n     run_tests();\n-    std::string folderName = \"run1images\";\n+    std::string folderName = \"run1\";\n \n     float fx= 220.44908;\n     float fy= 220.44908;\n     float cx= 222.01352;\n"
                },
                {
                    "date": 1648525528922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,37 +229,8 @@\n     cv::Mat_<int16_t> disparity16;\n \n     cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n     cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n-    // float left_K[3][3] = {\n-    //     {312.69895, 0., 329.4498}, {0., 315.80576, 174.64982}, {0., 0., 1.}};\n-    // // Left Rectification Matrix\n-    // float left_R[3][3] = {{0.99997362, -0.00725539, -0.0003528},\n-    //                       {0.00725548, 0.99997365, 0.00025699},\n-    //                       {0.00035093, -0.00025954, 0.9999999}};\n-    // // Left Perspective Matrix\n-    // float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n-    //                       {0.0, 322.11376, 176.33722, 0.0},\n-    //                       {0.0, 0.0, 1.0, 0.0}};\n-    // // Left Distortion Parameters\n-    // float left_D[5] = {\n-    //     0.006077, -0.005817, 0.000336, -0.000403, 0.000000,\n-    // };\n-    // // Right Intrinsic Matrix\n-    // float right_K[3][3] = {\n-    //     {312.19765, 0., 324.32079}, {0., 315.39023, 178.21339}, {0., 0., 1.}};\n-    // // Right Rectification Matrix\n-    // float right_R[3][3] = {{0.99997866, -0.00651671, -0.00046144},\n-    //                        {0.00651659, 0.99997873, -0.00025977},\n-    //                        {0.00046313, 0.00025676, 0.99999986}};\n-    // // Right Perspective Matrix\n-    // float right_P[3][4] = {{322.11376, 0.0, 327.47336, -22.5428},\n-    //                        {0.0, 322.11376, 176.33722, 0.0},\n-    //                        {0.0, 0.0, 1.0, 0.0}};\n-    // // Right Distortion Parameters\n-    // float right_D[5] = {\n-    //     0.005766, -0.005878, -0.000538, 0.000578, 0.000000,\n-    // };\n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 3; i++) {\n         std::stringstream lFileName;\n@@ -293,4 +264,34 @@\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n }\n+\n+    // float left_K[3][3] = {\n+    //     {312.69895, 0., 329.4498}, {0., 315.80576, 174.64982}, {0., 0., 1.}};\n+    // // Left Rectification Matrix\n+    // float left_R[3][3] = {{0.99997362, -0.00725539, -0.0003528},\n+    //                       {0.00725548, 0.99997365, 0.00025699},\n+    //                       {0.00035093, -0.00025954, 0.9999999}};\n+    // // Left Perspective Matrix\n+    // float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n+    //                       {0.0, 322.11376, 176.33722, 0.0},\n+    //                       {0.0, 0.0, 1.0, 0.0}};\n+    // // Left Distortion Parameters\n+    // float left_D[5] = {\n+    //     0.006077, -0.005817, 0.000336, -0.000403, 0.000000,\n+    // };\n+    // // Right Intrinsic Matrix\n+    // float right_K[3][3] = {\n+    //     {312.19765, 0., 324.32079}, {0., 315.39023, 178.21339}, {0., 0., 1.}};\n+    // // Right Rectification Matrix\n+    // float right_R[3][3] = {{0.99997866, -0.00651671, -0.00046144},\n+    //                        {0.00651659, 0.99997873, -0.00025977},\n+    //                        {0.00046313, 0.00025676, 0.99999986}};\n+    // // Right Perspective Matrix\n+    // float right_P[3][4] = {{322.11376, 0.0, 327.47336, -22.5428},\n+    //                        {0.0, 322.11376, 176.33722, 0.0},\n+    //                        {0.0, 0.0, 1.0, 0.0}};\n+    // // Right Distortion Parameters\n+    // float right_D[5] = {\n+    //     0.005766, -0.005878, -0.000538, 0.000578, 0.000000,\n+    // };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1648525613044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,19 +218,23 @@\n int main(int argc, char** argv) {\n     run_tests();\n     std::string folderName = \"run1\";\n \n-    float fx= 220.44908;\n-    float fy= 220.44908;\n-    float cx= 222.01352;\n-    float cy= 146.41498;\n-    float bf= -10.97633;\n+    // float fx= 220.44908;\n+    // float fy= 220.44908;\n+    // float cx= 222.01352;\n+    // float cy= 146.41498;\n+    // float bf= -10.97633;\n+    // cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n+    // cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n \n-    // Disparity image data stucture\n-    cv::Mat_<int16_t> disparity16;\n \n-    cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n-    cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n+    float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n+                          {0.0, 322.11376, 176.33722, 0.0},\n+                          {0.0, 0.0, 1.0, 0.0}};\n+    float right_P[3][4] = {{322.11376, 0.0, 327.47336, -22.5428},\n+                           {0.0, 322.11376, 176.33722, 0.0},\n+                           {0.0, 0.0, 1.0, 0.0}};\n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 3; i++) {\n         std::stringstream lFileName;\n"
                },
                {
                    "date": 1648525699897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,8 +233,10 @@\n                           {0.0, 0.0, 1.0, 0.0}};\n     float right_P[3][4] = {{322.11376, 0.0, 327.47336, -22.5428},\n                            {0.0, 322.11376, 176.33722, 0.0},\n                            {0.0, 0.0, 1.0, 0.0}};\n+    cv::Mat projMatrl = cv::Mat(3, 4, left_P);\n+    cv::Mat projMatrr = cv::Mat(3, 4, right_P);\n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 3; i++) {\n         std::stringstream lFileName;\n"
                },
                {
                    "date": 1648525712953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,10 +233,10 @@\n                           {0.0, 0.0, 1.0, 0.0}};\n     float right_P[3][4] = {{322.11376, 0.0, 327.47336, -22.5428},\n                            {0.0, 322.11376, 176.33722, 0.0},\n                            {0.0, 0.0, 1.0, 0.0}};\n-    cv::Mat projMatrl = cv::Mat(3, 4, left_P);\n-    cv::Mat projMatrr = cv::Mat(3, 4, right_P);\n+    cv::Mat projMatrl(3, 4, left_P);\n+    cv::Mat projMatrr(3, 4, right_P);\n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 3; i++) {\n         std::stringstream lFileName;\n"
                },
                {
                    "date": 1648525759038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,10 +233,10 @@\n                           {0.0, 0.0, 1.0, 0.0}};\n     float right_P[3][4] = {{322.11376, 0.0, 327.47336, -22.5428},\n                            {0.0, 322.11376, 176.33722, 0.0},\n                            {0.0, 0.0, 1.0, 0.0}};\n-    cv::Mat projMatrl(3, 4, left_P);\n-    cv::Mat projMatrr(3, 4, right_P);\n+    cv::Mat projMatrl(3, 4, CV_32FC1, left_P);\n+    cv::Mat projMatrr(3, 4, CV_32FC1, right_P);\n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 3; i++) {\n         std::stringstream lFileName;\n"
                },
                {
                    "date": 1648525778715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,10 +233,10 @@\n                           {0.0, 0.0, 1.0, 0.0}};\n     float right_P[3][4] = {{322.11376, 0.0, 327.47336, -22.5428},\n                            {0.0, 322.11376, 176.33722, 0.0},\n                            {0.0, 0.0, 1.0, 0.0}};\n-    cv::Mat projMatrl(3, 4, CV_32FC1, left_P);\n-    cv::Mat projMatrr(3, 4, CV_32FC1, right_P);\n+    cv::Mat projMatrl(3, 4, CV_32F, left_P);\n+    cv::Mat projMatrr(3, 4, CV_32F, right_P);\n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 3; i++) {\n         std::stringstream lFileName;\n"
                },
                {
                    "date": 1648525947137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,8 +217,10 @@\n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n     run_tests();\n     std::string folderName = \"run1\";\n+    std::ifstream ground_truth;\n+    ground_truth.open(\"gt.csv\");\n \n     // float fx= 220.44908;\n     // float fy= 220.44908;\n     // float cx= 222.01352;\n"
                },
                {
                    "date": 1648525977850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,15 +220,8 @@\n     std::string folderName = \"run1\";\n     std::ifstream ground_truth;\n     ground_truth.open(\"gt.csv\");\n \n-    // float fx= 220.44908;\n-    // float fy= 220.44908;\n-    // float cx= 222.01352;\n-    // float cy= 146.41498;\n-    // float bf= -10.97633;\n-    // cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n-    // cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n \n \n     float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n                           {0.0, 322.11376, 176.33722, 0.0},\n@@ -301,5 +294,14 @@\n     //                        {0.0, 0.0, 1.0, 0.0}};\n     // // Right Distortion Parameters\n     // float right_D[5] = {\n     //     0.005766, -0.005878, -0.000538, 0.000578, 0.000000,\n-    // };\n\\ No newline at end of file\n+    // };\n+\n+    // Original\n+    // float fx= 220.44908;\n+    // float fy= 220.44908;\n+    // float cx= 222.01352;\n+    // float cy= 146.41498;\n+    // float bf= -10.97633;\n+    // cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n+    // cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1648525984704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,10 +220,8 @@\n     std::string folderName = \"run1\";\n     std::ifstream ground_truth;\n     ground_truth.open(\"gt.csv\");\n \n-\n-\n     float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n                           {0.0, 322.11376, 176.33722, 0.0},\n                           {0.0, 0.0, 1.0, 0.0}};\n     float right_P[3][4] = {{322.11376, 0.0, 327.47336, -22.5428},\n"
                },
                {
                    "date": 1648526015558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n #include \"vo.h\"\n+#define N_FRAMES 128\n using namespace visual_odometry;\n \n \n void test_bucket_empty() {\n@@ -219,8 +220,10 @@\n     run_tests();\n     std::string folderName = \"run1\";\n     std::ifstream ground_truth;\n     ground_truth.open(\"gt.csv\");\n+    for i in range(128):\n+      getline(ground_truth)\n \n     float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n                           {0.0, 322.11376, 176.33722, 0.0},\n                           {0.0, 0.0, 1.0, 0.0}};\n"
                },
                {
                    "date": 1648526106838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,10 +220,13 @@\n     run_tests();\n     std::string folderName = \"run1\";\n     std::ifstream ground_truth;\n     ground_truth.open(\"gt.csv\");\n-    for i in range(128):\n-      getline(ground_truth)\n+    std::string lastline;\n+    std::getline(ground_truth);\n+    for(int i = 0; i < N_FRAMES; i++){\n+      getline(ground_truth);\n+    }\n \n     float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n                           {0.0, 322.11376, 176.33722, 0.0},\n                           {0.0, 0.0, 1.0, 0.0}};\n"
                },
                {
                    "date": 1648526112622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,9 +221,9 @@\n     std::string folderName = \"run1\";\n     std::ifstream ground_truth;\n     ground_truth.open(\"gt.csv\");\n     std::string lastline;\n-    std::getline(ground_truth);\n+    std::getline(ground_truth, lastline);\n     for(int i = 0; i < N_FRAMES; i++){\n       getline(ground_truth);\n     }\n \n"
                },
                {
                    "date": 1648526151852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,11 +222,8 @@\n     std::ifstream ground_truth;\n     ground_truth.open(\"gt.csv\");\n     std::string lastline;\n     std::getline(ground_truth, lastline);\n-    for(int i = 0; i < N_FRAMES; i++){\n-      getline(ground_truth);\n-    }\n \n     float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n                           {0.0, 322.11376, 176.33722, 0.0},\n                           {0.0, 0.0, 1.0, 0.0}};\n@@ -237,8 +234,11 @@\n     cv::Mat projMatrr(3, 4, CV_32F, right_P);\n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 3; i++) {\n+        std::getline(ground_truth, lastline);\n+        double time, x, y, dx, dy;\n+        lastline << time << x << y << dx << dy;\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n"
                },
                {
                    "date": 1648526240544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,8 +235,9 @@\n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 3; i++) {\n         std::getline(ground_truth, lastline);\n+        std::stringstream ss (lastline);\n         double time, x, y, dx, dy;\n         lastline << time << x << y << dx << dy;\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n"
                },
                {
                    "date": 1648526311700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -237,9 +237,13 @@\n     for(int i = 0; i < 3; i++) {\n         std::getline(ground_truth, lastline);\n         std::stringstream ss (lastline);\n         double time, x, y, dx, dy;\n-        lastline << time << x << y << dx << dy;\n+        std::getline(ss, time, ',');\n+        std::getline(ss, x, ',');\n+        std::getline(ss, y, ',');\n+        std::getline(ss, dx, ',');\n+        std::getline(ss, dy, ',');\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n"
                },
                {
                    "date": 1648526350943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,15 +235,14 @@\n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 3; i++) {\n         std::getline(ground_truth, lastline);\n-        std::stringstream ss (lastline);\n         double time, x, y, dx, dy;\n-        std::getline(ss, time, ',');\n-        std::getline(ss, x, ',');\n-        std::getline(ss, y, ',');\n-        std::getline(ss, dx, ',');\n-        std::getline(ss, dy, ',');\n+        std::getline(ground_truth, time, ',');\n+        std::getline(ground_truth, x, ',');\n+        std::getline(ground_truth, y, ',');\n+        std::getline(ground_truth, dx, ',');\n+        std::getline(ground_truth, dy, ',');\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n"
                },
                {
                    "date": 1648526423765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,8 +220,12 @@\n     run_tests();\n     std::string folderName = \"run1\";\n     std::ifstream ground_truth;\n     ground_truth.open(\"gt.csv\");\n+    std::stringstream buffer;\n+    buffer << file.rdbuf();\n+    file.close();\n+\n     std::string lastline;\n     std::getline(ground_truth, lastline);\n \n     float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n"
                },
                {
                    "date": 1648526435560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,10 +221,10 @@\n     std::string folderName = \"run1\";\n     std::ifstream ground_truth;\n     ground_truth.open(\"gt.csv\");\n     std::stringstream buffer;\n-    buffer << file.rdbuf();\n-    file.close();\n+    buffer << ground_truth.rdbuf();\n+    ground_truth.close();\n \n     std::string lastline;\n     std::getline(ground_truth, lastline);\n \n"
                },
                {
                    "date": 1648526453760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,9 +225,9 @@\n     buffer << ground_truth.rdbuf();\n     ground_truth.close();\n \n     std::string lastline;\n-    std::getline(ground_truth, lastline);\n+    std::getline(buffer, lastline);\n \n     float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n                           {0.0, 322.11376, 176.33722, 0.0},\n                           {0.0, 0.0, 1.0, 0.0}};\n@@ -238,15 +238,14 @@\n     cv::Mat projMatrr(3, 4, CV_32F, right_P);\n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 3; i++) {\n-        std::getline(ground_truth, lastline);\n         double time, x, y, dx, dy;\n-        std::getline(ground_truth, time, ',');\n-        std::getline(ground_truth, x, ',');\n-        std::getline(ground_truth, y, ',');\n-        std::getline(ground_truth, dx, ',');\n-        std::getline(ground_truth, dy, ',');\n+        std::getline(buffer, time, ',');\n+        std::getline(buffer, x, ',');\n+        std::getline(buffer, y, ',');\n+        std::getline(buffer, dx, ',');\n+        std::getline(buffer, dy, ',');\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n"
                },
                {
                    "date": 1648526506159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,9 @@\n     cv::Mat projMatrr(3, 4, CV_32F, right_P);\n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 3; i++) {\n-        double time, x, y, dx, dy;\n+        string timestr, xstr, ystr, dxstr, dystr;\n         std::getline(buffer, time, ',');\n         std::getline(buffer, x, ',');\n         std::getline(buffer, y, ',');\n         std::getline(buffer, dx, ',');\n"
                },
                {
                    "date": 1648526512702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,9 @@\n     cv::Mat projMatrr(3, 4, CV_32F, right_P);\n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 3; i++) {\n-        string timestr, xstr, ystr, dxstr, dystr;\n+        std::string timestr, xstr, ystr, dxstr, dystr;\n         std::getline(buffer, time, ',');\n         std::getline(buffer, x, ',');\n         std::getline(buffer, y, ',');\n         std::getline(buffer, dx, ',');\n"
                },
                {
                    "date": 1648526525346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,13 +239,13 @@\n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 3; i++) {\n         std::string timestr, xstr, ystr, dxstr, dystr;\n-        std::getline(buffer, time, ',');\n-        std::getline(buffer, x, ',');\n-        std::getline(buffer, y, ',');\n-        std::getline(buffer, dx, ',');\n-        std::getline(buffer, dy, ',');\n+        std::getline(buffer, timestr, ',');\n+        std::getline(buffer, xstr, ',');\n+        std::getline(buffer, ystr, ',');\n+        std::getline(buffer, dxstr, ',');\n+        std::getline(buffer, dystr, ',');\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n"
                },
                {
                    "date": 1648526554524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,8 +244,10 @@\n         std::getline(buffer, xstr, ',');\n         std::getline(buffer, ystr, ',');\n         std::getline(buffer, dxstr, ',');\n         std::getline(buffer, dystr, ',');\n+        double dx = std::stod(dxstr);\n+        double dy = std::stod(dystr);\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n"
                },
                {
                    "date": 1648526721163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,18 +169,18 @@\n   assert(pr0.size() == okPoints.size());\n   assert(pr1.size() == okPoints.size());\n   assert(pret.size() == okPoints.size());\n }\n-void test_cameraToWorld() {\n-  std::vector<cv::Mat> world_points(3, cv::Mat(0, 27));\n-  for(unsigned int i = -1; i <= 1; i++){\n-    for(unsigned int j = -1; j <= 1; j++){\n-      for(unsigned int k = -1; k <= 1; k++){\n-        world_points[0].push_back(i);\n-      }\n-    }\n-  }\n-}\n+// void test_cameraToWorld() {\n+//   std::vector<cv::Mat> world_points(3, cv::Mat(0, 27));\n+//   for(unsigned int i = -1; i <= 1; i++){\n+//     for(unsigned int j = -1; j <= 1; j++){\n+//       for(unsigned int k = -1; k <= 1; k++){\n+//         world_points[0].push_back(i);\n+//       }\n+//     }\n+//   }\n+// }\n \n void run_tests() {\n   std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n   test_bucket_empty();\n"
                },
                {
                    "date": 1648526730628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,10 +195,10 @@\n   std::cout << \"TEST CIRCULAR MATCHING\" << std::endl;\n   test_circularMatching();\n   std::cout << \"TEST DELETE FEATURES\" << std::endl;\n   test_deleteFeaturesWithFailureStatus();\n-  std::cout << \"TEST CAMERA TO WORLD\" << std::endl;\n-  test_cameraToWorld();\n+  // std::cout << \"TEST CAMERA TO WORLD\" << std::endl;\n+  // test_cameraToWorld();\n   // TODO: Cameratoworld, matchingFeatures maybe (mostly tested)? \n \n   std::cout << \"ALL TESTS PASS\" << std::endl;\n   // assert(false);\n"
                },
                {
                    "date": 1648526793849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,10 +244,10 @@\n         std::getline(buffer, xstr, ',');\n         std::getline(buffer, ystr, ',');\n         std::getline(buffer, dxstr, ',');\n         std::getline(buffer, dystr, ',');\n-        double dx = std::stod(dxstr);\n-        double dy = std::stod(dystr);\n+        double x = std::stod(xstr);\n+        double y = std::stod(ystr);\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n"
                },
                {
                    "date": 1648526833714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,10 +244,10 @@\n         std::getline(buffer, xstr, ',');\n         std::getline(buffer, ystr, ',');\n         std::getline(buffer, dxstr, ',');\n         std::getline(buffer, dystr, ',');\n-        double x = std::stod(xstr);\n-        double y = std::stod(ystr);\n+        double gtx = std::stod(xstr);\n+        double gty = std::stod(ystr);\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n"
                },
                {
                    "date": 1648526882216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,10 +261,11 @@\n         cv::Mat rotation = out.second;\n         // If there was any update, translation[0] will almost surely have moved by epsilon,\n         // otherwise no need to print\n         if(translation.at<double>(0) != 0){ \n-          std::cout << \"(\" << translation.at<double>(0) << \", \" << translation.at<double>(1)\n-                  << \", \" << translation.at<double>(2) << \")\\n\";\n+          double dx = translation.at<double>(0);\n+          double dy = translation.at<double>(1);\n+          std::cout << \"(\" << dx  << \", \" << dy << \", \" << translation.at<double>(2) << \")\\n\";\n           std::cout << \"[\\n\";\n           for(int i = 0; i < 3; i++){\n             std::cout << \"[\" << rotation.at<double>(i,0) << \", \" << rotation.at<double>(i,1)\n                     << \", \" << rotation.at<double>(i,2) << \"]\\n\";\n"
                },
                {
                    "date": 1648526940898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,14 +264,15 @@\n         if(translation.at<double>(0) != 0){ \n           double dx = translation.at<double>(0);\n           double dy = translation.at<double>(1);\n           std::cout << \"(\" << dx  << \", \" << dy << \", \" << translation.at<double>(2) << \")\\n\";\n-          std::cout << \"[\\n\";\n-          for(int i = 0; i < 3; i++){\n-            std::cout << \"[\" << rotation.at<double>(i,0) << \", \" << rotation.at<double>(i,1)\n-                    << \", \" << rotation.at<double>(i,2) << \"]\\n\";\n-          }\n-          std::cout << \"]\\n\";\n+          // std::cout << \"[\\n\";\n+          // for(int i = 0; i < 3; i++){\n+          //   std::cout << \"[\" << rotation.at<double>(i,0) << \", \" << rotation.at<double>(i,1)\n+          //           << \", \" << rotation.at<double>(i,2) << \"]\\n\";\n+          // }\n+          // std::cout << \"]\\n\";\n+          std::cout << dx << dtdx << dy << gtdy << \"\\n\";\n         }\n         assert(isRotationMatrix(rotation));\n         visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n     }\n"
                },
                {
                    "date": 1648526958678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,10 +244,10 @@\n         std::getline(buffer, xstr, ',');\n         std::getline(buffer, ystr, ',');\n         std::getline(buffer, dxstr, ',');\n         std::getline(buffer, dystr, ',');\n-        double gtx = std::stod(xstr);\n-        double gty = std::stod(ystr);\n+        double gtdx = std::stod(dxstr);\n+        double gtdy = std::stod(dystr);\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n@@ -263,9 +263,9 @@\n         // otherwise no need to print\n         if(translation.at<double>(0) != 0){ \n           double dx = translation.at<double>(0);\n           double dy = translation.at<double>(1);\n-          std::cout << \"(\" << dx  << \", \" << dy << \", \" << translation.at<double>(2) << \")\\n\";\n+          // std::cout << \"(\" << dx  << \", \" << dy << \", \" << translation.at<double>(2) << \")\\n\";\n           // std::cout << \"[\\n\";\n           // for(int i = 0; i < 3; i++){\n           //   std::cout << \"[\" << rotation.at<double>(i,0) << \", \" << rotation.at<double>(i,1)\n           //           << \", \" << rotation.at<double>(i,2) << \"]\\n\";\n"
                },
                {
                    "date": 1648526966257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,9 +270,9 @@\n           //   std::cout << \"[\" << rotation.at<double>(i,0) << \", \" << rotation.at<double>(i,1)\n           //           << \", \" << rotation.at<double>(i,2) << \"]\\n\";\n           // }\n           // std::cout << \"]\\n\";\n-          std::cout << dx << dtdx << dy << gtdy << \"\\n\";\n+          std::cout << dx << gtdx << dy << gtdy << \"\\n\";\n         }\n         assert(isRotationMatrix(rotation));\n         visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n     }\n"
                },
                {
                    "date": 1648526979012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -237,9 +237,9 @@\n     cv::Mat projMatrl(3, 4, CV_32F, left_P);\n     cv::Mat projMatrr(3, 4, CV_32F, right_P);\n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n-    for(int i = 0; i < 3; i++) {\n+    for(int i = 0; i < 5; i++) {\n         std::string timestr, xstr, ystr, dxstr, dystr;\n         std::getline(buffer, timestr, ',');\n         std::getline(buffer, xstr, ',');\n         std::getline(buffer, ystr, ',');\n@@ -258,10 +258,9 @@\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n         cv::Mat translation = out.first;\n         cv::Mat rotation = out.second;\n-        // If there was any update, translation[0] will almost surely have moved by epsilon,\n-        // otherwise no need to print\n+        // If there was any update,\n         if(translation.at<double>(0) != 0){ \n           double dx = translation.at<double>(0);\n           double dy = translation.at<double>(1);\n           // std::cout << \"(\" << dx  << \", \" << dy << \", \" << translation.at<double>(2) << \")\\n\";\n"
                },
                {
                    "date": 1648527012638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,9 @@\n   for(int strength: fs.strengths){\n     assert(strength >= FAST_THRESHOLD);\n     assert(strength <= 100);\n   }\n+  print(fs.size())\n   assert(fs.size() >= 100); /* Should detect quite a few points, I got 125 */\n   fs.filterByBucketLocationInternal(sample_image, 1, 1, 0, 77); /* Put it all in one bucket */\n   assert(fs.size() == 77);\n }\n"
                },
                {
                    "date": 1648527018686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n   for(int strength: fs.strengths){\n     assert(strength >= FAST_THRESHOLD);\n     assert(strength <= 100);\n   }\n-  print(fs.size())\n+  dbg(fs.size())\n   assert(fs.size() >= 100); /* Should detect quite a few points, I got 125 */\n   fs.filterByBucketLocationInternal(sample_image, 1, 1, 0, 77); /* Put it all in one bucket */\n   assert(fs.size() == 77);\n }\n"
                },
                {
                    "date": 1648527065564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n }\n \n void test_featureset() {\n   FeatureSet fs;\n-  const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n+  const cv::Mat sample_image =  cv::imread(\"run1/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n   assert(fs.size() == 0);\n   fs.appendFeaturesFromImage(sample_image);\n   for(int age: fs.ages){\n     assert(age == 0);\n@@ -51,16 +51,15 @@\n   for(int strength: fs.strengths){\n     assert(strength >= FAST_THRESHOLD);\n     assert(strength <= 100);\n   }\n-  dbg(fs.size())\n   assert(fs.size() >= 100); /* Should detect quite a few points, I got 125 */\n   fs.filterByBucketLocationInternal(sample_image, 1, 1, 0, 77); /* Put it all in one bucket */\n   assert(fs.size() == 77);\n }\n void test_featureset_filter() {\n   FeatureSet fs;\n-  const cv::Mat sample_image =  cv::imread(\"run1images/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n+  const cv::Mat sample_image =  cv::imread(\"run1/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n   const int image_rows = sample_image.rows;\n   const int image_cols = sample_image.cols;\n   const int bucket_height = (image_rows +  1) / 2;\n   // Note rows and cols appear 'flipped' because of how images are read in opencv\n@@ -104,12 +103,12 @@\n }\n \n void test_circularMatching() {\n   std::vector<cv::Point2f> pl0, pr0, pl1, pr1, pret;\n-  cv::Mat iL0 = cv::imread(\"run1images/left/frame000001.png\", cv::IMREAD_GRAYSCALE);\n-  cv::Mat iR0 = cv::imread(\"run1images/right/frame000001.png\", cv::IMREAD_GRAYSCALE);\n-  cv::Mat iL1 = cv::imread(\"run1images/left/frame000004.png\", cv::IMREAD_GRAYSCALE);\n-  cv::Mat iR1 = cv::imread(\"run1images/right/frame000004.png\", cv::IMREAD_GRAYSCALE);\n+  cv::Mat iL0 = cv::imread(\"run1/left/frame000001.png\", cv::IMREAD_GRAYSCALE);\n+  cv::Mat iR0 = cv::imread(\"run1/right/frame000001.png\", cv::IMREAD_GRAYSCALE);\n+  cv::Mat iL1 = cv::imread(\"run1/left/frame000004.png\", cv::IMREAD_GRAYSCALE);\n+  cv::Mat iR1 = cv::imread(\"run1/right/frame000004.png\", cv::IMREAD_GRAYSCALE);\n   FeatureSet fs;\n   fs.appendFeaturesFromImage(iL0);\n   unsigned int n_points = fs.points.size();\n   // Check that it doesn't crash on boundary conditions\n@@ -137,12 +136,12 @@\n }\n \n void test_deleteFeaturesWithFailureStatus() {\n   std::vector<cv::Point2f> pl0, pr0, pl1, pr1, pret;\n-  cv::Mat iL0 = cv::imread(\"run1images/left/frame000001.png\", cv::IMREAD_GRAYSCALE);\n-  cv::Mat iR0 = cv::imread(\"run1images/right/frame000001.png\", cv::IMREAD_GRAYSCALE);\n-  cv::Mat iL1 = cv::imread(\"run1images/left/frame000004.png\", cv::IMREAD_GRAYSCALE);\n-  cv::Mat iR1 = cv::imread(\"run1images/right/frame000004.png\", cv::IMREAD_GRAYSCALE);\n+  cv::Mat iL0 = cv::imread(\"run1/left/frame000001.png\", cv::IMREAD_GRAYSCALE);\n+  cv::Mat iR0 = cv::imread(\"run1/right/frame000001.png\", cv::IMREAD_GRAYSCALE);\n+  cv::Mat iL1 = cv::imread(\"run1/left/frame000004.png\", cv::IMREAD_GRAYSCALE);\n+  cv::Mat iR1 = cv::imread(\"run1/right/frame000004.png\", cv::IMREAD_GRAYSCALE);\n   FeatureSet fs;\n   fs.appendFeaturesFromImage(iL0);\n   pl0 = fs.points;\n   std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n"
                },
                {
                    "date": 1648527142251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,9 +244,11 @@\n         std::getline(buffer, xstr, ',');\n         std::getline(buffer, ystr, ',');\n         std::getline(buffer, dxstr, ',');\n         std::getline(buffer, dystr, ',');\n+        dbg(dxstr);\n         double gtdx = std::stod(dxstr);\n+        dbg(gtdx);\n         double gtdy = std::stod(dystr);\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n"
                },
                {
                    "date": 1648527174974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,8 +240,9 @@\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 5; i++) {\n         std::string timestr, xstr, ystr, dxstr, dystr;\n         std::getline(buffer, timestr, ',');\n+        dbg(timestr);\n         std::getline(buffer, xstr, ',');\n         std::getline(buffer, ystr, ',');\n         std::getline(buffer, dxstr, ',');\n         std::getline(buffer, dystr, ',');\n"
                },
                {
                    "date": 1648527204248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,12 +222,15 @@\n     std::ifstream ground_truth;\n     ground_truth.open(\"gt.csv\");\n     std::stringstream buffer;\n     buffer << ground_truth.rdbuf();\n-    ground_truth.close();\n \n     std::string lastline;\n     std::getline(buffer, lastline);\n+    dbg(lastline);\n+    ground_truth.close();\n+    std::getline(buffer, lastline);\n+    dbg(lastline);\n \n     float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n                           {0.0, 322.11376, 176.33722, 0.0},\n                           {0.0, 0.0, 1.0, 0.0}};\n"
                },
                {
                    "date": 1648527224909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,13 +222,13 @@\n     std::ifstream ground_truth;\n     ground_truth.open(\"gt.csv\");\n     std::stringstream buffer;\n     buffer << ground_truth.rdbuf();\n+    ground_truth.close();\n \n     std::string lastline;\n     std::getline(buffer, lastline);\n     dbg(lastline);\n-    ground_truth.close();\n     std::getline(buffer, lastline);\n     dbg(lastline);\n \n     float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n"
                },
                {
                    "date": 1648527232079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,9 +219,9 @@\n int main(int argc, char** argv) {\n     run_tests();\n     std::string folderName = \"run1\";\n     std::ifstream ground_truth;\n-    ground_truth.open(\"gt.csv\");\n+    ground_truth.open(folderName + \"/gt.csv\");\n     std::stringstream buffer;\n     buffer << ground_truth.rdbuf();\n     ground_truth.close();\n \n"
                },
                {
                    "date": 1648527255863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,11 +226,8 @@\n     ground_truth.close();\n \n     std::string lastline;\n     std::getline(buffer, lastline);\n-    dbg(lastline);\n-    std::getline(buffer, lastline);\n-    dbg(lastline);\n \n     float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n                           {0.0, 322.11376, 176.33722, 0.0},\n                           {0.0, 0.0, 1.0, 0.0}};\n"
                },
                {
                    "date": 1648527288776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,16 +240,13 @@\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 5; i++) {\n         std::string timestr, xstr, ystr, dxstr, dystr;\n         std::getline(buffer, timestr, ',');\n-        dbg(timestr);\n         std::getline(buffer, xstr, ',');\n         std::getline(buffer, ystr, ',');\n         std::getline(buffer, dxstr, ',');\n         std::getline(buffer, dystr, ',');\n-        dbg(dxstr);\n         double gtdx = std::stod(dxstr);\n-        dbg(gtdx);\n         double gtdy = std::stod(dystr);\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n"
                },
                {
                    "date": 1648527364447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,9 +269,9 @@\n           //   std::cout << \"[\" << rotation.at<double>(i,0) << \", \" << rotation.at<double>(i,1)\n           //           << \", \" << rotation.at<double>(i,2) << \"]\\n\";\n           // }\n           // std::cout << \"]\\n\";\n-          std::cout << dx << gtdx << dy << gtdy << \"\\n\";\n+          std::cout << \"dx: \" << dx << \" (\" << gtdx << \") dy:\" <<  dy << \" (\" gtdy << \")\\n\";\n         }\n         assert(isRotationMatrix(rotation));\n         visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n     }\n"
                },
                {
                    "date": 1648527373575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,9 +269,9 @@\n           //   std::cout << \"[\" << rotation.at<double>(i,0) << \", \" << rotation.at<double>(i,1)\n           //           << \", \" << rotation.at<double>(i,2) << \"]\\n\";\n           // }\n           // std::cout << \"]\\n\";\n-          std::cout << \"dx: \" << dx << \" (\" << gtdx << \") dy:\" <<  dy << \" (\" gtdy << \")\\n\";\n+          std::cout << \"dx: \" << dx << \" (\" << gtdx << \") dy:\" <<  dy << \" (\" << gtdy << \")\\n\";\n         }\n         assert(isRotationMatrix(rotation));\n         visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n     }\n"
                },
                {
                    "date": 1648527491192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,12 +240,17 @@\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 5; i++) {\n         std::string timestr, xstr, ystr, dxstr, dystr;\n         std::getline(buffer, timestr, ',');\n+        dbg(timestr);\n         std::getline(buffer, xstr, ',');\n+        dbg(xstr);\n         std::getline(buffer, ystr, ',');\n+        dbg(ystr);\n         std::getline(buffer, dxstr, ',');\n+        dbg(dxstr);\n         std::getline(buffer, dystr, ',');\n+        dbg(dystr);\n         double gtdx = std::stod(dxstr);\n         double gtdy = std::stod(dystr);\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n"
                },
                {
                    "date": 1648527595626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,10 +239,8 @@\n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 5; i++) {\n         std::string timestr, xstr, ystr, dxstr, dystr;\n-        std::getline(buffer, timestr, ',');\n-        dbg(timestr);\n         std::getline(buffer, xstr, ',');\n         dbg(xstr);\n         std::getline(buffer, ystr, ',');\n         dbg(ystr);\n"
                },
                {
                    "date": 1648527622492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,10 @@\n     cv::Mat projMatrr(3, 4, CV_32F, right_P);\n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 5; i++) {\n-        std::string timestr, xstr, ystr, dxstr, dystr;\n+        std::string xstr, ystr, dxstr, dystr;\n+        // apparently we just don't read the time ?\n         std::getline(buffer, xstr, ',');\n         dbg(xstr);\n         std::getline(buffer, ystr, ',');\n         dbg(ystr);\n"
                },
                {
                    "date": 1648527640041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 5; i++) {\n         std::string xstr, ystr, dxstr, dystr;\n-        // apparently we just don't read the time ?\n+        // apparently we this just doesn't read the first col of the csv\n         std::getline(buffer, xstr, ',');\n         dbg(xstr);\n         std::getline(buffer, ystr, ',');\n         dbg(ystr);\n"
                },
                {
                    "date": 1648527683252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,8 +226,9 @@\n     ground_truth.close();\n \n     std::string lastline;\n     std::getline(buffer, lastline);\n+    std::getline(buffer, lastline, ',');\n \n     float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n                           {0.0, 322.11376, 176.33722, 0.0},\n                           {0.0, 0.0, 1.0, 0.0}};\n"
                },
                {
                    "date": 1648527700729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,9 +240,9 @@\n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < 5; i++) {\n         std::string xstr, ystr, dxstr, dystr;\n-        // apparently we this just doesn't read the first col of the csv\n+        // apparently we just doesn't read the first col of the csv\n         std::getline(buffer, xstr, ',');\n         dbg(xstr);\n         std::getline(buffer, ystr, ',');\n         dbg(ystr);\n"
                },
                {
                    "date": 1648527722151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,15 +242,11 @@\n     for(int i = 0; i < 5; i++) {\n         std::string xstr, ystr, dxstr, dystr;\n         // apparently we just doesn't read the first col of the csv\n         std::getline(buffer, xstr, ',');\n-        dbg(xstr);\n         std::getline(buffer, ystr, ',');\n-        dbg(ystr);\n         std::getline(buffer, dxstr, ',');\n-        dbg(dxstr);\n         std::getline(buffer, dystr, ',');\n-        dbg(dystr);\n         double gtdx = std::stod(dxstr);\n         double gtdy = std::stod(dystr);\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n"
                },
                {
                    "date": 1648527884076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -259,9 +259,9 @@\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n         cv::Mat translation = out.first;\n         cv::Mat rotation = out.second;\n-        // If there was any update,\n+        // If there was any update, \n         if(translation.at<double>(0) != 0){ \n           double dx = translation.at<double>(0);\n           double dy = translation.at<double>(1);\n           // std::cout << \"(\" << dx  << \", \" << dy << \", \" << translation.at<double>(2) << \")\\n\";\n"
                },
                {
                    "date": 1648527903566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -259,9 +259,9 @@\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n         cv::Mat translation = out.first;\n         cv::Mat rotation = out.second;\n-        // If there was any update, \n+        // If there was any update\n         if(translation.at<double>(0) != 0){ \n           double dx = translation.at<double>(0);\n           double dy = translation.at<double>(1);\n           // std::cout << \"(\" << dx  << \", \" << dy << \", \" << translation.at<double>(2) << \")\\n\";\n"
                },
                {
                    "date": 1648527940508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,8 +274,13 @@\n           std::cout << \"dx: \" << dx << \" (\" << gtdx << \") dy:\" <<  dy << \" (\" << gtdy << \")\\n\";\n         }\n         assert(isRotationMatrix(rotation));\n         visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n+\n+        float last_dx = dx;\n+        float last_dy = dy;\n+        float last_gtdx = dx;\n+        float last_gtdy = dy;\n     }\n     std::cout << std::endl;\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1648528211995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,13 +274,8 @@\n           std::cout << \"dx: \" << dx << \" (\" << gtdx << \") dy:\" <<  dy << \" (\" << gtdy << \")\\n\";\n         }\n         assert(isRotationMatrix(rotation));\n         visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n-\n-        float last_dx = dx;\n-        float last_dy = dy;\n-        float last_gtdx = dx;\n-        float last_gtdy = dy;\n     }\n     std::cout << std::endl;\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1648528259642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,9 @@\n     cv::Mat projMatrl(3, 4, CV_32F, left_P);\n     cv::Mat projMatrr(3, 4, CV_32F, right_P);\n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n-    for(int i = 0; i < 5; i++) {\n+    for(int i = 0; i < N_FRAMES; i++) {\n         std::string xstr, ystr, dxstr, dystr;\n         // apparently we just doesn't read the first col of the csv\n         std::getline(buffer, xstr, ',');\n         std::getline(buffer, ystr, ',');\n"
                },
                {
                    "date": 1648528279275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,9 +270,9 @@\n           //   std::cout << \"[\" << rotation.at<double>(i,0) << \", \" << rotation.at<double>(i,1)\n           //           << \", \" << rotation.at<double>(i,2) << \"]\\n\";\n           // }\n           // std::cout << \"]\\n\";\n-          std::cout << \"dx: \" << dx << \" (\" << gtdx << \") dy:\" <<  dy << \" (\" << gtdy << \")\\n\";\n+          std::cout << \"dx: \" << dx << \" (\" << gtdx << \")\\tdy:\" <<  dy << \" (\" << gtdy << \")\\n\";\n         }\n         assert(isRotationMatrix(rotation));\n         visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n     }\n"
                },
                {
                    "date": 1648528528040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,8 +227,10 @@\n \n     std::string lastline;\n     std::getline(buffer, lastline);\n     std::getline(buffer, lastline, ',');\n+    std::ofstream resultbuffer;\n+    resultbuffer.open (\"out.csv\");\n \n     float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n                           {0.0, 322.11376, 176.33722, 0.0},\n                           {0.0, 0.0, 1.0, 0.0}};\n"
                },
                {
                    "date": 1648528535783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -228,9 +228,9 @@\n     std::string lastline;\n     std::getline(buffer, lastline);\n     std::getline(buffer, lastline, ',');\n     std::ofstream resultbuffer;\n-    resultbuffer.open (\"out.csv\");\n+    resultbuffer.open (\"run1.csv\");\n \n     float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n                           {0.0, 322.11376, 176.33722, 0.0},\n                           {0.0, 0.0, 1.0, 0.0}};\n"
                },
                {
                    "date": 1648528544034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -228,9 +228,9 @@\n     std::string lastline;\n     std::getline(buffer, lastline);\n     std::getline(buffer, lastline, ',');\n     std::ofstream resultbuffer;\n-    resultbuffer.open (\"run1.csv\");\n+    resultbuffer.open (foldername + \"result.csv\");\n \n     float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n                           {0.0, 322.11376, 176.33722, 0.0},\n                           {0.0, 0.0, 1.0, 0.0}};\n"
                },
                {
                    "date": 1648576873216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -228,9 +228,9 @@\n     std::string lastline;\n     std::getline(buffer, lastline);\n     std::getline(buffer, lastline, ',');\n     std::ofstream resultbuffer;\n-    resultbuffer.open (foldername + \"result.csv\");\n+    resultbuffer.open (folderName + \"/result.csv\");\n \n     float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n                           {0.0, 322.11376, 176.33722, 0.0},\n                           {0.0, 0.0, 1.0, 0.0}};\n@@ -247,10 +247,10 @@\n         std::getline(buffer, xstr, ',');\n         std::getline(buffer, ystr, ',');\n         std::getline(buffer, dxstr, ',');\n         std::getline(buffer, dystr, ',');\n-        double gtdx = std::stod(dxstr);\n-        double gtdy = std::stod(dystr);\n+        double gtx = std::stod(xstr);\n+        double gty = std::stod(ystr);\n         std::stringstream lFileName;\n         std::stringstream rFileName;\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n"
                },
                {
                    "date": 1648576885806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,9 +272,9 @@\n           //   std::cout << \"[\" << rotation.at<double>(i,0) << \", \" << rotation.at<double>(i,1)\n           //           << \", \" << rotation.at<double>(i,2) << \"]\\n\";\n           // }\n           // std::cout << \"]\\n\";\n-          std::cout << \"dx: \" << dx << \" (\" << gtdx << \")\\tdy:\" <<  dy << \" (\" << gtdy << \")\\n\";\n+          std::cout << \"dx: \" << x << \" (\" << gtx << \")\\tdy:\" <<  y << \" (\" << gty << \")\\n\";\n         }\n         assert(isRotationMatrix(rotation));\n         visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n     }\n"
                },
                {
                    "date": 1648576904456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,12 +272,12 @@\n           //   std::cout << \"[\" << rotation.at<double>(i,0) << \", \" << rotation.at<double>(i,1)\n           //           << \", \" << rotation.at<double>(i,2) << \"]\\n\";\n           // }\n           // std::cout << \"]\\n\";\n-          std::cout << \"dx: \" << x << \" (\" << gtx << \")\\tdy:\" <<  y << \" (\" << gty << \")\\n\";\n         }\n         assert(isRotationMatrix(rotation));\n         visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n+        std::cout << \"dx: \" << translation.at<double>(0) << \" (\" << gtx << \")\\tdy:\" <<  translation.at<double>(1) << \" (\" << gty << \")\\n\";\n     }\n     std::cout << std::endl;\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1648576937750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,10 +263,10 @@\n         cv::Mat translation = out.first;\n         cv::Mat rotation = out.second;\n         // If there was any update\n         if(translation.at<double>(0) != 0){ \n-          double dx = translation.at<double>(0);\n-          double dy = translation.at<double>(1);\n+          // double dx = translation.at<double>(0);\n+          // double dy = translation.at<double>(1);\n           // std::cout << \"(\" << dx  << \", \" << dy << \", \" << translation.at<double>(2) << \")\\n\";\n           // std::cout << \"[\\n\";\n           // for(int i = 0; i < 3; i++){\n           //   std::cout << \"[\" << rotation.at<double>(i,0) << \", \" << rotation.at<double>(i,1)\n"
                },
                {
                    "date": 1648576996674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,8 +229,9 @@\n     std::getline(buffer, lastline);\n     std::getline(buffer, lastline, ',');\n     std::ofstream resultbuffer;\n     resultbuffer.open (folderName + \"/result.csv\");\n+    resultbuffer << \"x\" << \"y\" << \"gtx\" << \"gty\";\n \n     float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n                           {0.0, 322.11376, 176.33722, 0.0},\n                           {0.0, 0.0, 1.0, 0.0}};\n"
                },
                {
                    "date": 1648577003002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,9 +229,9 @@\n     std::getline(buffer, lastline);\n     std::getline(buffer, lastline, ',');\n     std::ofstream resultbuffer;\n     resultbuffer.open (folderName + \"/result.csv\");\n-    resultbuffer << \"x\" << \"y\" << \"gtx\" << \"gty\";\n+    resultbuffer << \"x,\" << \"y,\" << \"gtx,\" << \"gty\";\n \n     float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n                           {0.0, 322.11376, 176.33722, 0.0},\n                           {0.0, 0.0, 1.0, 0.0}};\n"
                },
                {
                    "date": 1648577033894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,9 +276,12 @@\n           // std::cout << \"]\\n\";\n         }\n         assert(isRotationMatrix(rotation));\n         visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n-        std::cout << \"dx: \" << translation.at<double>(0) << \" (\" << gtx << \")\\tdy:\" <<  translation.at<double>(1) << \" (\" << gty << \")\\n\";\n+        double x = translation.at<double>(0);\n+        double y = translation.at<double>(1);\n+        std::cout << \"x: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \")\\n\";\n+        resultbuffer << \"x,\" << \"y,\" << \"gtx,\" << \"gty\";\n     }\n     std::cout << std::endl;\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1648577050090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,9 +279,9 @@\n         visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n         double x = translation.at<double>(0);\n         double y = translation.at<double>(1);\n         std::cout << \"x: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \")\\n\";\n-        resultbuffer << \"x,\" << \"y,\" << \"gtx,\" << \"gty\";\n+        resultbuffer << x << \",\" << y << \" \",\" << gtx << \",\" << \"ty;\n     }\n     std::cout << std::endl;\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1648577061937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,9 +279,9 @@\n         visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n         double x = translation.at<double>(0);\n         double y = translation.at<double>(1);\n         std::cout << \"x: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \")\\n\";\n-        resultbuffer << x << \",\" << y << \" \",\" << gtx << \",\" << \"ty;\n+        resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n     }\n     std::cout << std::endl;\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1648577067997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,9 +229,9 @@\n     std::getline(buffer, lastline);\n     std::getline(buffer, lastline, ',');\n     std::ofstream resultbuffer;\n     resultbuffer.open (folderName + \"/result.csv\");\n-    resultbuffer << \"x,\" << \"y,\" << \"gtx,\" << \"gty\";\n+    resultbuffer << \"x,\" << \"y,\" << \"gtx,\" << \"gty\" << \"\\n\";\n \n     float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n                           {0.0, 322.11376, 176.33722, 0.0},\n                           {0.0, 0.0, 1.0, 0.0}};\n"
                },
                {
                    "date": 1648577167906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,10 +276,11 @@\n           // std::cout << \"]\\n\";\n         }\n         assert(isRotationMatrix(rotation));\n         visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n-        double x = translation.at<double>(0);\n-        double y = translation.at<double>(1);\n+        double dx = translation.at<double>(0);\n+        double dy = translation.at<double>(1);\n+        double x = frame_pose.col(3).at<double>(0);\n         std::cout << \"x: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \")\\n\";\n         resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n     }\n     std::cout << std::endl;\n"
                },
                {
                    "date": 1648577173083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,8 +279,9 @@\n         visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n         double dx = translation.at<double>(0);\n         double dy = translation.at<double>(1);\n         double x = frame_pose.col(3).at<double>(0);\n+        double y = frame_pose.col(3).at<double>(1);\n         std::cout << \"x: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \")\\n\";\n         resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n     }\n     std::cout << std::endl;\n"
                },
                {
                    "date": 1648577181890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,10 +276,10 @@\n           // std::cout << \"]\\n\";\n         }\n         assert(isRotationMatrix(rotation));\n         visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n-        double dx = translation.at<double>(0);\n-        double dy = translation.at<double>(1);\n+        // double dx = translation.at<double>(0);\n+        // double dy = translation.at<double>(1);\n         double x = frame_pose.col(3).at<double>(0);\n         double y = frame_pose.col(3).at<double>(1);\n         std::cout << \"x: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \")\\n\";\n         resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n"
                },
                {
                    "date": 1648577190205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,10 +276,8 @@\n           // std::cout << \"]\\n\";\n         }\n         assert(isRotationMatrix(rotation));\n         visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n-        // double dx = translation.at<double>(0);\n-        // double dy = translation.at<double>(1);\n         double x = frame_pose.col(3).at<double>(0);\n         double y = frame_pose.col(3).at<double>(1);\n         std::cout << \"x: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \")\\n\";\n         resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n"
                },
                {
                    "date": 1648581360950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,9 +275,15 @@\n           // }\n           // std::cout << \"]\\n\";\n         }\n         assert(isRotationMatrix(rotation));\n+\n+      cv::Vec3f rotation_euler = rotationMatrixToEulerAngles(rotation);\n+      // Don't perform an update if the output is unusually large, indicates a error elsewhere.\n+      if (abs(rotation_euler[1]) < 0.1 && abs(rotation_euler[0]) < 0.1 &&\n+          abs(rotation_euler[2]) < 0.1) {\n         visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n+          }\n         double x = frame_pose.col(3).at<double>(0);\n         double y = frame_pose.col(3).at<double>(1);\n         std::cout << \"x: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \")\\n\";\n         resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n"
                },
                {
                    "date": 1648581465839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,26 +263,17 @@\n         std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n         cv::Mat translation = out.first;\n         cv::Mat rotation = out.second;\n         // If there was any update\n-        if(translation.at<double>(0) != 0){ \n-          // double dx = translation.at<double>(0);\n-          // double dy = translation.at<double>(1);\n-          // std::cout << \"(\" << dx  << \", \" << dy << \", \" << translation.at<double>(2) << \")\\n\";\n-          // std::cout << \"[\\n\";\n-          // for(int i = 0; i < 3; i++){\n-          //   std::cout << \"[\" << rotation.at<double>(i,0) << \", \" << rotation.at<double>(i,1)\n-          //           << \", \" << rotation.at<double>(i,2) << \"]\\n\";\n-          // }\n-          // std::cout << \"]\\n\";\n-        }\n         assert(isRotationMatrix(rotation));\n \n       cv::Vec3f rotation_euler = rotationMatrixToEulerAngles(rotation);\n       // Don't perform an update if the output is unusually large, indicates a error elsewhere.\n-      if (abs(rotation_euler[1]) < 0.1 && abs(rotation_euler[0]) < 0.1 &&\n-          abs(rotation_euler[2]) < 0.1) {\n-        visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n+        if (abs(rotation_euler[1]) < 0.1 && abs(rotation_euler[0]) < 0.1 &&\n+            abs(rotation_euler[2]) < 0.1) {\n+          visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n+          }else{\n+            std::cout << \"Rotation too big, skipping update\\n\"\n           }\n         double x = frame_pose.col(3).at<double>(0);\n         double y = frame_pose.col(3).at<double>(1);\n         std::cout << \"x: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \")\\n\";\n"
                },
                {
                    "date": 1648581482112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -267,18 +267,18 @@\n         assert(isRotationMatrix(rotation));\n \n       cv::Vec3f rotation_euler = rotationMatrixToEulerAngles(rotation);\n       // Don't perform an update if the output is unusually large, indicates a error elsewhere.\n-        if (abs(rotation_euler[1]) < 0.1 && abs(rotation_euler[0]) < 0.1 &&\n-            abs(rotation_euler[2]) < 0.1) {\n-          visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n-          }else{\n-            std::cout << \"Rotation too big, skipping update\\n\"\n-          }\n-        double x = frame_pose.col(3).at<double>(0);\n-        double y = frame_pose.col(3).at<double>(1);\n-        std::cout << \"x: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \")\\n\";\n-        resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n+      if (abs(rotation_euler[1]) < 0.1 && abs(rotation_euler[0]) < 0.1 &&\n+          abs(rotation_euler[2]) < 0.1) {\n+        visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n+      }else{\n+        std::cout << \"Rotation too big, skipping update\\n\";\n+      }\n+      double x = frame_pose.col(3).at<double>(0);\n+      double y = frame_pose.col(3).at<double>(1);\n+      std::cout << \"x: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \")\\n\";\n+      resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n     }\n     std::cout << std::endl;\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n"
                },
                {
                    "date": 1648581796019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,8 +256,10 @@\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n+        if i % 5 !=0:\n+          continue;\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         // std::cout << cur_img_l << std::endl;\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n"
                },
                {
                    "date": 1648581803960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n-        if i % 5 !=0:\n+        if(i % 5 !=0):\n           continue;\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         // std::cout << cur_img_l << std::endl;\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n"
                },
                {
                    "date": 1648581811227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,10 +256,9 @@\n         lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n         const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n         const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n-        if(i % 5 !=0):\n-          continue;\n+        if (i % 5 !=0) continue;\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n         // std::cout << cur_img_l << std::endl;\n         // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n         std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n"
                },
                {
                    "date": 1648581986925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,31 +242,31 @@\n     cv::Mat projMatrr(3, 4, CV_32F, right_P);\n     VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < N_FRAMES; i++) {\n-        std::string xstr, ystr, dxstr, dystr;\n-        // apparently we just doesn't read the first col of the csv\n-        std::getline(buffer, xstr, ',');\n-        std::getline(buffer, ystr, ',');\n-        std::getline(buffer, dxstr, ',');\n-        std::getline(buffer, dystr, ',');\n-        double gtx = std::stod(xstr);\n-        double gty = std::stod(ystr);\n-        std::stringstream lFileName;\n-        std::stringstream rFileName;\n-        lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n-        rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n-        const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n-        const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n-        if (i % 5 !=0) continue;\n-        // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n-        // std::cout << cur_img_l << std::endl;\n-        // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n-        std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n-        cv::Mat translation = out.first;\n-        cv::Mat rotation = out.second;\n-        // If there was any update\n-        assert(isRotationMatrix(rotation));\n+      std::string xstr, ystr, dxstr, dystr;\n+      // apparently we just doesn't read the first col of the csv\n+      std::getline(buffer, xstr, ',');\n+      std::getline(buffer, ystr, ',');\n+      std::getline(buffer, dxstr, ',');\n+      std::getline(buffer, dystr, ',');\n+      double gtx = std::stod(xstr);\n+      double gty = std::stod(ystr);\n+      std::stringstream lFileName;\n+      std::stringstream rFileName;\n+      lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n+      rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n+      const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n+      const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n+      if (i % 5 !=0) continue;\n+      // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n+      // std::cout << cur_img_l << std::endl;\n+      // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n+      std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n+      cv::Mat translation = out.first;\n+      cv::Mat rotation = out.second;\n+      // If there was any update\n+      assert(isRotationMatrix(rotation));\n \n       cv::Vec3f rotation_euler = rotationMatrixToEulerAngles(rotation);\n       // Don't perform an update if the output is unusually large, indicates a error elsewhere.\n       if (abs(rotation_euler[1]) < 0.1 && abs(rotation_euler[0]) < 0.1 &&\n"
                },
                {
                    "date": 1648582000783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,8 @@\n       lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n       rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n       const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n       const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n-      if (i % 5 !=0) continue;\n       // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n       // std::cout << cur_img_l << std::endl;\n       // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n       std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n"
                },
                {
                    "date": 1648582056099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,8 +256,9 @@\n       lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n       rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n       const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n       const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n+      if (i % 2 !=0) continue;\n       // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n       // std::cout << cur_img_l << std::endl;\n       // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n       std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n@@ -275,9 +276,9 @@\n         std::cout << \"Rotation too big, skipping update\\n\";\n       }\n       double x = frame_pose.col(3).at<double>(0);\n       double y = frame_pose.col(3).at<double>(1);\n-      std::cout << \"x: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \")\\n\";\n+      std::cout << \"\\nx: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \") \";\n       resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n     }\n     std::cout << std::endl;\n     \n"
                },
                {
                    "date": 1648582782798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n       lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n       rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n       const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n       const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n-      if (i % 2 !=0) continue;\n+      // if (i % 2 !=0) continue;\n       // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n       // std::cout << cur_img_l << std::endl;\n       // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n       std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n"
                },
                {
                    "date": 1648585733982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n #include \"vo.h\"\n-#define N_FRAMES 128\n+#define N_FRAMES 6\n using namespace visual_odometry;\n \n \n void test_bucket_empty() {\n@@ -280,8 +280,9 @@\n       std::cout << \"\\nx: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \") \";\n       resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n     }\n     std::cout << std::endl;\n+    resultbuffer.close();\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n }\n"
                },
                {
                    "date": 1648586213874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,9 +216,9 @@\n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n-    run_tests();\n+    // run_tests();\n     std::string folderName = \"run1\";\n     std::ifstream ground_truth;\n     ground_truth.open(folderName + \"/gt.csv\");\n     std::stringstream buffer;\n"
                },
                {
                    "date": 1648586254617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,9 +216,9 @@\n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n-    // run_tests();\n+    run_tests();\n     std::string folderName = \"run1\";\n     std::ifstream ground_truth;\n     ground_truth.open(folderName + \"/gt.csv\");\n     std::stringstream buffer;\n@@ -260,26 +260,26 @@\n       // if (i % 2 !=0) continue;\n       // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n       // std::cout << cur_img_l << std::endl;\n       // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n-      std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n-      cv::Mat translation = out.first;\n-      cv::Mat rotation = out.second;\n-      // If there was any update\n-      assert(isRotationMatrix(rotation));\n+      // std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n+      // cv::Mat translation = out.first;\n+      // cv::Mat rotation = out.second;\n+      // // If there was any update\n+      // assert(isRotationMatrix(rotation));\n \n-      cv::Vec3f rotation_euler = rotationMatrixToEulerAngles(rotation);\n-      // Don't perform an update if the output is unusually large, indicates a error elsewhere.\n-      if (abs(rotation_euler[1]) < 0.1 && abs(rotation_euler[0]) < 0.1 &&\n-          abs(rotation_euler[2]) < 0.1) {\n-        visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n-      }else{\n-        std::cout << \"Rotation too big, skipping update\\n\";\n-      }\n-      double x = frame_pose.col(3).at<double>(0);\n-      double y = frame_pose.col(3).at<double>(1);\n-      std::cout << \"\\nx: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \") \";\n-      resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n+      // cv::Vec3f rotation_euler = rotationMatrixToEulerAngles(rotation);\n+      // // Don't perform an update if the output is unusually large, indicates a error elsewhere.\n+      // if (abs(rotation_euler[1]) < 0.1 && abs(rotation_euler[0]) < 0.1 &&\n+      //     abs(rotation_euler[2]) < 0.1) {\n+      //   visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n+      // }else{\n+      //   std::cout << \"Rotation too big, skipping update\\n\";\n+      // }\n+      // double x = frame_pose.col(3).at<double>(0);\n+      // double y = frame_pose.col(3).at<double>(1);\n+      // std::cout << \"\\nx: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \") \";\n+      // resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n     }\n     std::cout << std::endl;\n     resultbuffer.close();\n     \n"
                },
                {
                    "date": 1648586331132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,8 +278,10 @@\n       // double x = frame_pose.col(3).at<double>(0);\n       // double y = frame_pose.col(3).at<double>(1);\n       // std::cout << \"\\nx: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \") \";\n       // resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n+      cur_img_l.release();\n+      cur_img_r.release();\n     }\n     std::cout << std::endl;\n     resultbuffer.close();\n     \n"
                },
                {
                    "date": 1648586397068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,12 +278,14 @@\n       // double x = frame_pose.col(3).at<double>(0);\n       // double y = frame_pose.col(3).at<double>(1);\n       // std::cout << \"\\nx: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \") \";\n       // resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n-      cur_img_l.release();\n-      cur_img_r.release();\n     }\n     std::cout << std::endl;\n+    projMatrl.release();\n+    projMatrr.release();\n+    delete [] left_P;\n+    delete [] right_P;\n     resultbuffer.close();\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n"
                },
                {
                    "date": 1648586416807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -282,10 +282,10 @@\n     }\n     std::cout << std::endl;\n     projMatrl.release();\n     projMatrr.release();\n-    delete [] left_P;\n-    delete [] right_P;\n+    delete [][] left_P;\n+    delete [][] right_P;\n     resultbuffer.close();\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n"
                },
                {
                    "date": 1648586423775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -282,10 +282,10 @@\n     }\n     std::cout << std::endl;\n     projMatrl.release();\n     projMatrr.release();\n-    delete [][] left_P;\n-    delete [][] right_P;\n+    delete left_P;\n+    delete right_P;\n     resultbuffer.close();\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n"
                },
                {
                    "date": 1648586432398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -282,10 +282,8 @@\n     }\n     std::cout << std::endl;\n     projMatrl.release();\n     projMatrr.release();\n-    delete left_P;\n-    delete right_P;\n     resultbuffer.close();\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n"
                },
                {
                    "date": 1648586470537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,10 +254,10 @@\n       std::stringstream lFileName;\n       std::stringstream rFileName;\n       lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n       rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n-      const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n-      const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n+      cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n+      cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n       // if (i % 2 !=0) continue;\n       // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n       // std::cout << cur_img_l << std::endl;\n       // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n@@ -278,8 +278,10 @@\n       // double x = frame_pose.col(3).at<double>(0);\n       // double y = frame_pose.col(3).at<double>(1);\n       // std::cout << \"\\nx: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \") \";\n       // resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n+    cur_img_l.release();\n+    cur_img_r.release();\n     }\n     std::cout << std::endl;\n     projMatrl.release();\n     projMatrr.release();\n"
                },
                {
                    "date": 1648586544913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,20 +244,20 @@\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < N_FRAMES; i++) {\n       std::string xstr, ystr, dxstr, dystr;\n       // apparently we just doesn't read the first col of the csv\n-      std::getline(buffer, xstr, ',');\n-      std::getline(buffer, ystr, ',');\n-      std::getline(buffer, dxstr, ',');\n-      std::getline(buffer, dystr, ',');\n-      double gtx = std::stod(xstr);\n-      double gty = std::stod(ystr);\n-      std::stringstream lFileName;\n-      std::stringstream rFileName;\n-      lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n-      rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n-      cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n-      cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n+      // std::getline(buffer, xstr, ',');\n+      // std::getline(buffer, ystr, ',');\n+      // std::getline(buffer, dxstr, ',');\n+      // std::getline(buffer, dystr, ',');\n+      // double gtx = std::stod(xstr);\n+      // double gty = std::stod(ystr);\n+      // std::stringstream lFileName;\n+      // std::stringstream rFileName;\n+      // lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n+      // rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n+      // cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n+      // cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n       // if (i % 2 !=0) continue;\n       // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n       // std::cout << cur_img_l << std::endl;\n       // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n@@ -278,14 +278,10 @@\n       // double x = frame_pose.col(3).at<double>(0);\n       // double y = frame_pose.col(3).at<double>(1);\n       // std::cout << \"\\nx: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \") \";\n       // resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n-    cur_img_l.release();\n-    cur_img_r.release();\n     }\n     std::cout << std::endl;\n-    projMatrl.release();\n-    projMatrr.release();\n     resultbuffer.close();\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n"
                },
                {
                    "date": 1648586564265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n                            {0.0, 322.11376, 176.33722, 0.0},\n                            {0.0, 0.0, 1.0, 0.0}};\n     cv::Mat projMatrl(3, 4, CV_32F, left_P);\n     cv::Mat projMatrr(3, 4, CV_32F, right_P);\n-    VisualOdometry vo(projMatrl, projMatrr);\n+    // VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < N_FRAMES; i++) {\n       std::string xstr, ystr, dxstr, dystr;\n       // apparently we just doesn't read the first col of the csv\n"
                },
                {
                    "date": 1648586625588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,47 +239,47 @@\n                            {0.0, 322.11376, 176.33722, 0.0},\n                            {0.0, 0.0, 1.0, 0.0}};\n     cv::Mat projMatrl(3, 4, CV_32F, left_P);\n     cv::Mat projMatrr(3, 4, CV_32F, right_P);\n-    // VisualOdometry vo(projMatrl, projMatrr);\n+    VisualOdometry vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < N_FRAMES; i++) {\n       std::string xstr, ystr, dxstr, dystr;\n       // apparently we just doesn't read the first col of the csv\n-      // std::getline(buffer, xstr, ',');\n-      // std::getline(buffer, ystr, ',');\n-      // std::getline(buffer, dxstr, ',');\n-      // std::getline(buffer, dystr, ',');\n-      // double gtx = std::stod(xstr);\n-      // double gty = std::stod(ystr);\n-      // std::stringstream lFileName;\n-      // std::stringstream rFileName;\n-      // lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n-      // rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n-      // cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n-      // cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n+      std::getline(buffer, xstr, ',');\n+      std::getline(buffer, ystr, ',');\n+      std::getline(buffer, dxstr, ',');\n+      std::getline(buffer, dystr, ',');\n+      double gtx = std::stod(xstr);\n+      double gty = std::stod(ystr);\n+      std::stringstream lFileName;\n+      std::stringstream rFileName;\n+      lFileName << folderName << \"/left/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n+      rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n+      const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n+      const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n       // if (i % 2 !=0) continue;\n       // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n       // std::cout << cur_img_l << std::endl;\n       // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n-      // std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n-      // cv::Mat translation = out.first;\n-      // cv::Mat rotation = out.second;\n-      // // If there was any update\n-      // assert(isRotationMatrix(rotation));\n+      std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n+      cv::Mat translation = out.first;\n+      cv::Mat rotation = out.second;\n+      // If there was any update\n+      assert(isRotationMatrix(rotation));\n \n-      // cv::Vec3f rotation_euler = rotationMatrixToEulerAngles(rotation);\n-      // // Don't perform an update if the output is unusually large, indicates a error elsewhere.\n-      // if (abs(rotation_euler[1]) < 0.1 && abs(rotation_euler[0]) < 0.1 &&\n-      //     abs(rotation_euler[2]) < 0.1) {\n-      //   visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n-      // }else{\n-      //   std::cout << \"Rotation too big, skipping update\\n\";\n-      // }\n-      // double x = frame_pose.col(3).at<double>(0);\n-      // double y = frame_pose.col(3).at<double>(1);\n-      // std::cout << \"\\nx: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \") \";\n-      // resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n+      cv::Vec3f rotation_euler = rotationMatrixToEulerAngles(rotation);\n+      // Don't perform an update if the output is unusually large, indicates a error elsewhere.\n+      if (abs(rotation_euler[1]) < 0.1 && abs(rotation_euler[0]) < 0.1 &&\n+          abs(rotation_euler[2]) < 0.1) {\n+        visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n+      }else{\n+        std::cout << \"Rotation too big, skipping update\\n\";\n+      }\n+      double x = frame_pose.col(3).at<double>(0);\n+      double y = frame_pose.col(3).at<double>(1);\n+      std::cout << \"\\nx: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \") \";\n+      resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n     }\n     std::cout << std::endl;\n     resultbuffer.close();\n     \n"
                },
                {
                    "date": 1648586637100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n #include \"vo.h\"\n-#define N_FRAMES 6\n+#define N_FRAMES 128\n using namespace visual_odometry;\n \n \n void test_bucket_empty() {\n"
                },
                {
                    "date": 1648587390098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -285,39 +285,8 @@\n     \n     //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n     return 0;\n }\n-\n-    // float left_K[3][3] = {\n-    //     {312.69895, 0., 329.4498}, {0., 315.80576, 174.64982}, {0., 0., 1.}};\n-    // // Left Rectification Matrix\n-    // float left_R[3][3] = {{0.99997362, -0.00725539, -0.0003528},\n-    //                       {0.00725548, 0.99997365, 0.00025699},\n-    //                       {0.00035093, -0.00025954, 0.9999999}};\n-    // // Left Perspective Matrix\n-    // float left_P[3][4] = {{322.11376, 0.0, 327.47336, 0.0},\n-    //                       {0.0, 322.11376, 176.33722, 0.0},\n-    //                       {0.0, 0.0, 1.0, 0.0}};\n-    // // Left Distortion Parameters\n-    // float left_D[5] = {\n-    //     0.006077, -0.005817, 0.000336, -0.000403, 0.000000,\n-    // };\n-    // // Right Intrinsic Matrix\n-    // float right_K[3][3] = {\n-    //     {312.19765, 0., 324.32079}, {0., 315.39023, 178.21339}, {0., 0., 1.}};\n-    // // Right Rectification Matrix\n-    // float right_R[3][3] = {{0.99997866, -0.00651671, -0.00046144},\n-    //                        {0.00651659, 0.99997873, -0.00025977},\n-    //                        {0.00046313, 0.00025676, 0.99999986}};\n-    // // Right Perspective Matrix\n-    // float right_P[3][4] = {{322.11376, 0.0, 327.47336, -22.5428},\n-    //                        {0.0, 322.11376, 176.33722, 0.0},\n-    //                        {0.0, 0.0, 1.0, 0.0}};\n-    // // Right Distortion Parameters\n-    // float right_D[5] = {\n-    //     0.005766, -0.005878, -0.000538, 0.000578, 0.000000,\n-    // };\n-\n     // Original\n     // float fx= 220.44908;\n     // float fy= 220.44908;\n     // float cx= 222.01352;\n"
                },
                {
                    "date": 1648587407235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -257,11 +257,8 @@\n       rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n       const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n       const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n       // if (i % 2 !=0) continue;\n-      // std::cout << cur_img_l.channels() << \" \" << cur_img_l.rows << \" \" << cur_img_l.cols << std::endl;\n-      // std::cout << cur_img_l << std::endl;\n-      // std::cout << cur_img_l.channels() << \" \" << cur_img_r.rows << \" \" << cur_img_r.cols << std::endl;\n       std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n       cv::Mat translation = out.first;\n       cv::Mat rotation = out.second;\n       // If there was any update\n"
                },
                {
                    "date": 1648602427791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,204 +8,8 @@\n #include \"vo.h\"\n #define N_FRAMES 128\n using namespace visual_odometry;\n \n-\n-void test_bucket_empty() {\n-  Bucket b(0);\n-  std::vector<cv::Point2f> points(5, {1, 1});\n-  std::vector<int> ages = {6, 2, 3, 4, 5};\n-  std::vector<int> strengths = {60, 20, 30, 40, 50};\n-  for(int i = 0; i < 5; i++){\n-    b.add_feature(points[i], ages[i], strengths[i]);\n-  }\n-  assert(b.max_size == 0);\n-  assert(b.features.size() == 0);\n-}\n-\n-void test_bucket_nonempty() {\n-  Bucket b(3);\n-  std::vector<cv::Point2f> points(5, {1, 1});\n-  std::vector<int> ages = {6, 2, 3, 4, 5};\n-  std::vector<int> strengths = {60, 20, 30, 40, 50};\n-  for(int i = 0; i < 5; i++){\n-    b.add_feature(points[i], ages[i], strengths[i]);\n-  }\n-  assert(b.max_size == 3);\n-  assert(b.features.size() == 3);\n-  assert(b.features.ages[0] == 6);\n-  assert(b.features.ages[1] == 4);\n-  assert(b.features.ages[2] == 5);\n-  assert(b.features.strengths[0] == 60);\n-  assert(b.features.strengths[1] == 40);\n-  assert(b.features.strengths[2] == 50);\n-}\n-\n-void test_featureset() {\n-  FeatureSet fs;\n-  const cv::Mat sample_image =  cv::imread(\"run1/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n-  assert(fs.size() == 0);\n-  fs.appendFeaturesFromImage(sample_image);\n-  for(int age: fs.ages){\n-    assert(age == 0);\n-  }\n-  for(int strength: fs.strengths){\n-    assert(strength >= FAST_THRESHOLD);\n-    assert(strength <= 100);\n-  }\n-  assert(fs.size() >= 100); /* Should detect quite a few points, I got 125 */\n-  fs.filterByBucketLocationInternal(sample_image, 1, 1, 0, 77); /* Put it all in one bucket */\n-  assert(fs.size() == 77);\n-}\n-void test_featureset_filter() {\n-  FeatureSet fs;\n-  const cv::Mat sample_image =  cv::imread(\"run1/left/frame000000.png\", cv::IMREAD_GRAYSCALE);\n-  const int image_rows = sample_image.rows;\n-  const int image_cols = sample_image.cols;\n-  const int bucket_height = (image_rows +  1) / 2;\n-  // Note rows and cols appear 'flipped' because of how images are read in opencv\n-  for(int i = 0; i < 15; i++){\n-    fs.points.push_back({ image_cols - 1.f, image_rows - 1.f});\n-    fs.ages.push_back(0);\n-    fs.strengths.push_back(40);\n-  }\n-  for(int i = 0; i < 10; i++){\n-    fs.points.push_back({image_cols - 1.f, 0.f});\n-    fs.ages.push_back(0);\n-    fs.strengths.push_back(40);\n-  }\n-  for(int i = 0; i < 5; i++){\n-    fs.points.push_back({0.f, float(bucket_height)});\n-    fs.ages.push_back(0);\n-    fs.strengths.push_back(40);\n-  }\n-\n-  assert(fs.size() == 30);\n-  fs.filterByBucketLocationInternal(sample_image, 2, 2, 0, 11); \n-  FeatureSet fs_copy = fs;\n-  assert(fs.size() == 26);\n-  fs.filterByBucketLocationInternal(sample_image, 2, 1, 0, 11); \n-  assert(fs.size() == 21);\n-  fs_copy.filterByBucketLocationInternal(sample_image, 1, 2, 0, 11); \n-  assert(fs_copy.size() == 16);\n-}\n-\n-void test_findUnmovedPoints(){\n-  std::vector<cv::Point2f> points1;\n-  std::vector<cv::Point2f> points2;\n-  for(int i = 0; i < 35; i++){\n-    points1.push_back({ float(i), float(i)});\n-    points2.push_back({ float(i) + !(i % 5), float(i) + !(i % 7)});\n-  }\n-  std::vector<bool> okLocations = findUnmovedPoints(points1, points2, .5);\n-  for(int i = 0; i < 35; i++){\n-    assert(okLocations[i] == ((i % 5) && (i % 7)));\n-  }\n-}\n-\n-void test_circularMatching() {\n-  std::vector<cv::Point2f> pl0, pr0, pl1, pr1, pret;\n-  cv::Mat iL0 = cv::imread(\"run1/left/frame000001.png\", cv::IMREAD_GRAYSCALE);\n-  cv::Mat iR0 = cv::imread(\"run1/right/frame000001.png\", cv::IMREAD_GRAYSCALE);\n-  cv::Mat iL1 = cv::imread(\"run1/left/frame000004.png\", cv::IMREAD_GRAYSCALE);\n-  cv::Mat iR1 = cv::imread(\"run1/right/frame000004.png\", cv::IMREAD_GRAYSCALE);\n-  FeatureSet fs;\n-  fs.appendFeaturesFromImage(iL0);\n-  unsigned int n_points = fs.points.size();\n-  // Check that it doesn't crash on boundary conditions\n-  std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n-  assert(status.size() == 0);\n-  pl0.push_back(fs.points[0]);\n-  status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n-  assert(status.size() == 1);\n-  // run\n-  pl0 = fs.points;\n-  status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n-  assert(status.size() == n_points);\n-  assert(pl0.size() == n_points);\n-  assert(pl1.size() == n_points);\n-  assert(pr0.size() == n_points);\n-  assert(pr1.size() == n_points);\n-  assert(pret.size() == n_points);\n-  int ok = 0;\n-  for(unsigned int i = 0; i < status.size(); i++){\n-    if(status[i]){\n-      ok++;\n-    }\n-  }\n-  assert(ok >= 30); // Got 30 with original branch, want more if possible\n-}\n-\n-void test_deleteFeaturesWithFailureStatus() {\n-  std::vector<cv::Point2f> pl0, pr0, pl1, pr1, pret;\n-  cv::Mat iL0 = cv::imread(\"run1/left/frame000001.png\", cv::IMREAD_GRAYSCALE);\n-  cv::Mat iR0 = cv::imread(\"run1/right/frame000001.png\", cv::IMREAD_GRAYSCALE);\n-  cv::Mat iL1 = cv::imread(\"run1/left/frame000004.png\", cv::IMREAD_GRAYSCALE);\n-  cv::Mat iR1 = cv::imread(\"run1/right/frame000004.png\", cv::IMREAD_GRAYSCALE);\n-  FeatureSet fs;\n-  fs.appendFeaturesFromImage(iL0);\n-  pl0 = fs.points;\n-  std::vector<bool> status = circularMatching(iL0, iR0, iL1, iR1, pl0, pr0, pl1, pr1, pret);\n-  std::vector<int> okStrengths, okAges;\n-  std::vector<cv::Point2f> okPoints;\n-  for(unsigned int i = 0; i < status.size(); i++){\n-      fs.ages[i] = i;\n-      if(status[i]){\n-        okPoints.push_back(fs.points[i]);\n-        okStrengths.push_back(fs.strengths[i]);\n-        okAges.push_back(fs.ages[i]);\n-      }\n-  }\n-  deleteFeaturesWithFailureStatus(pl0, pr0, pl1, pr1, pret, fs, status);\n-  assert(fs.strengths.size() == okPoints.size());\n-  assert(fs.points.size() == okPoints.size());\n-  assert(fs.ages.size() == okPoints.size());\n-  for(unsigned int i = 0; i < okPoints.size(); i++){\n-    assert(okPoints[i] == fs.points[i]);\n-    assert(okStrengths[i] == fs.strengths[i]);\n-    assert(okAges[i] == fs.ages[i]);\n-  }\n-  assert(pl0.size() == okPoints.size());\n-  assert(pl1.size() == okPoints.size());\n-  assert(pr0.size() == okPoints.size());\n-  assert(pr1.size() == okPoints.size());\n-  assert(pret.size() == okPoints.size());\n-}\n-// void test_cameraToWorld() {\n-//   std::vector<cv::Mat> world_points(3, cv::Mat(0, 27));\n-//   for(unsigned int i = -1; i <= 1; i++){\n-//     for(unsigned int j = -1; j <= 1; j++){\n-//       for(unsigned int k = -1; k <= 1; k++){\n-//         world_points[0].push_back(i);\n-//       }\n-//     }\n-//   }\n-// }\n-\n-void run_tests() {\n-  std::cout << \"TEST BUCKET EMPTY\" << std::endl;\n-  test_bucket_empty();\n-  std::cout << \"TEST BUCKET NONEMPTY\" << std::endl;\n-  test_bucket_nonempty();\n-  std::cout << \"TEST FEATURE SET\" << std::endl;\n-  test_featureset();\n-  std::cout << \"TEST FEATURE SET EDGE\" << std::endl;\n-  test_featureset_filter();\n-  std::cout << \"TEST FIND UNMOVED POINTS\" << std::endl;\n-  test_findUnmovedPoints();\n-  std::cout << \"TEST CIRCULAR MATCHING\" << std::endl;\n-  test_circularMatching();\n-  std::cout << \"TEST DELETE FEATURES\" << std::endl;\n-  test_deleteFeaturesWithFailureStatus();\n-  // std::cout << \"TEST CAMERA TO WORLD\" << std::endl;\n-  // test_cameraToWorld();\n-  // TODO: Cameratoworld, matchingFeatures maybe (mostly tested)? \n-\n-  std::cout << \"ALL TESTS PASS\" << std::endl;\n-  // assert(false);\n-  // std::cout << \"NEVERMIND ASSERTS WERE JUST DISABLED\" << std::endl;\n-}\n-\n bool isRotationMatrix(const cv::Mat &R)\n {\n     cv::Mat Rt;\n     transpose(R, Rt);\n@@ -216,9 +20,8 @@\n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n-    run_tests();\n     std::string folderName = \"run1\";\n     std::ifstream ground_truth;\n     ground_truth.open(folderName + \"/gt.csv\");\n     std::stringstream buffer;\n"
                },
                {
                    "date": 1648602610398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n #include \"vo.h\"\n #define N_FRAMES 128\n using namespace visual_odometry;\n \n+\n bool isRotationMatrix(const cv::Mat &R)\n {\n     cv::Mat Rt;\n     transpose(R, Rt);\n@@ -20,8 +21,9 @@\n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n+    run_tests();\n     std::string folderName = \"run1\";\n     std::ifstream ground_truth;\n     ground_truth.open(folderName + \"/gt.csv\");\n     std::stringstream buffer;\n"
                },
                {
                    "date": 1648602615569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,8 @@\n }\n \n // /usr/bin/clang++ -fdiagnostics-color=always -g /home/alex/git/stereo_visual_odometry/src/main.cpp -o /home/alex/git/stereo_visual_odometry/src/main `pkg-config opencv --cflags --libs` -v\n int main(int argc, char** argv) {\n-    run_tests();\n     std::string folderName = \"run1\";\n     std::ifstream ground_truth;\n     ground_truth.open(folderName + \"/gt.csv\");\n     std::stringstream buffer;\n"
                },
                {
                    "date": 1648602871111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n       cv::Vec3f rotation_euler = rotationMatrixToEulerAngles(rotation);\n       // Don't perform an update if the output is unusually large, indicates a error elsewhere.\n       if (abs(rotation_euler[1]) < 0.1 && abs(rotation_euler[0]) < 0.1 &&\n           abs(rotation_euler[2]) < 0.1) {\n-        visual_odometry::integrateOdometryStereo(frame_pose, rotation, translation);\n+        integrateOdometryStereo(frame_pose, rotation, translation);\n       }else{\n         std::cout << \"Rotation too big, skipping update\\n\";\n       }\n       double x = frame_pose.col(3).at<double>(0);\n"
                },
                {
                    "date": 1648602908003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n #include <sstream>\n #include <iomanip>\n #include \"vo.h\"\n #define N_FRAMES 128\n-using namespace visual_odometry;\n \n \n bool isRotationMatrix(const cv::Mat &R)\n {\n"
                },
                {
                    "date": 1648602934876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n       cv::Vec3f rotation_euler = rotationMatrixToEulerAngles(rotation);\n       // Don't perform an update if the output is unusually large, indicates a error elsewhere.\n       if (abs(rotation_euler[1]) < 0.1 && abs(rotation_euler[0]) < 0.1 &&\n           abs(rotation_euler[2]) < 0.1) {\n-        integrateOdometryStereo(frame_pose, rotation, translation);\n+        integrateOdometryStereo(i, frame_pose, rotation, translation);\n       }else{\n         std::cout << \"Rotation too big, skipping update\\n\";\n       }\n       double x = frame_pose.col(3).at<double>(0);\n"
                },
                {
                    "date": 1648602976405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n                            {0.0, 322.11376, 176.33722, 0.0},\n                            {0.0, 0.0, 1.0, 0.0}};\n     cv::Mat projMatrl(3, 4, CV_32F, left_P);\n     cv::Mat projMatrr(3, 4, CV_32F, right_P);\n-    VisualOdometry vo(projMatrl, projMatrr);\n+    PoseEstimator vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < N_FRAMES; i++) {\n       std::string xstr, ystr, dxstr, dystr;\n       // apparently we just doesn't read the first col of the csv\n"
                },
                {
                    "date": 1648602985380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n                            {0.0, 322.11376, 176.33722, 0.0},\n                            {0.0, 0.0, 1.0, 0.0}};\n     cv::Mat projMatrl(3, 4, CV_32F, left_P);\n     cv::Mat projMatrr(3, 4, CV_32F, right_P);\n-    PoseEstimator vo(projMatrl, projMatrr);\n+    PoseEstimator::PoseEstimator vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < N_FRAMES; i++) {\n       std::string xstr, ystr, dxstr, dystr;\n       // apparently we just doesn't read the first col of the csv\n"
                },
                {
                    "date": 1648602996508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n #include <iostream>\n #include <sstream>\n #include <iomanip>\n #include \"vo.h\"\n+#include \"pose_estimation_node.h\"\n #define N_FRAMES 128\n \n \n bool isRotationMatrix(const cv::Mat &R)\n"
                },
                {
                    "date": 1648603608089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n                            {0.0, 322.11376, 176.33722, 0.0},\n                            {0.0, 0.0, 1.0, 0.0}};\n     cv::Mat projMatrl(3, 4, CV_32F, left_P);\n     cv::Mat projMatrr(3, 4, CV_32F, right_P);\n-    PoseEstimator::PoseEstimator vo(projMatrl, projMatrr);\n+    PoseEstimator vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n     for(int i = 0; i < N_FRAMES; i++) {\n       std::string xstr, ystr, dxstr, dystr;\n       // apparently we just doesn't read the first col of the csv\n"
                },
                {
                    "date": 1648603630332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,10 @@\n       rFileName << folderName << \"/right/frame\" << std::setw(6) << std::setfill('0') << i << \".png\";\n       const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n       const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n       // if (i % 2 !=0) continue;\n-      std::pair<cv::Mat, cv::Mat> out =  vo.stereo_callback(cur_img_l, cur_img_r);\n+      // std::pair<cv::Mat, cv::Mat> out = \n+      vo.stereo_callback(cur_img_l, cur_img_r);\n       cv::Mat translation = out.first;\n       cv::Mat rotation = out.second;\n       // If there was any update\n       assert(isRotationMatrix(rotation));\n"
                },
                {
                    "date": 1648603642767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n       const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n       const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n       // if (i % 2 !=0) continue;\n       // std::pair<cv::Mat, cv::Mat> out = \n-      vo.stereo_callback(cur_img_l, cur_img_r);\n+       vo.stereo_callback(cur_img_l, cur_img_r);\n       cv::Mat translation = out.first;\n       cv::Mat rotation = out.second;\n       // If there was any update\n       assert(isRotationMatrix(rotation));\n"
                },
                {
                    "date": 1648603675258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,25 +63,26 @@\n       const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n       // if (i % 2 !=0) continue;\n       // std::pair<cv::Mat, cv::Mat> out = \n        vo.stereo_callback(cur_img_l, cur_img_r);\n-      cv::Mat translation = out.first;\n-      cv::Mat rotation = out.second;\n+      // cv::Mat translation = out.first;\n+      // cv::Mat rotation = out.second;\n       // If there was any update\n-      assert(isRotationMatrix(rotation));\n+      // assert(isRotationMatrix(rotation));\n \n-      cv::Vec3f rotation_euler = rotationMatrixToEulerAngles(rotation);\n-      // Don't perform an update if the output is unusually large, indicates a error elsewhere.\n-      if (abs(rotation_euler[1]) < 0.1 && abs(rotation_euler[0]) < 0.1 &&\n-          abs(rotation_euler[2]) < 0.1) {\n-        integrateOdometryStereo(i, frame_pose, rotation, translation);\n-      }else{\n-        std::cout << \"Rotation too big, skipping update\\n\";\n-      }\n-      double x = frame_pose.col(3).at<double>(0);\n-      double y = frame_pose.col(3).at<double>(1);\n-      std::cout << \"\\nx: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \") \";\n-      resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n+      // cv::Vec3f rotation_euler = rotationMatrixToEulerAngles(rotation);\n+      // // Don't perform an update if the output is unusually large, indicates a error elsewhere.\n+      // if (abs(rotation_euler[1]) < 0.1 && abs(rotation_euler[0]) < 0.1 &&\n+      //     abs(rotation_euler[2]) < 0.1) {\n+      //   integrateOdometryStereo(i, frame_pose, rotation, translation);\n+      // }else{\n+      //   std::cout << \"Rotation too big, skipping update\\n\";\n+      // }\n+      // double x = frame_pose.col(3).at<double>(0);\n+      // double y = frame_pose.col(3).at<double>(1);\n+       std::cout << \"\\ngtx: \"<< gtx << \" gty:\" << gty << \" \";\n+      // std::cout << \"\\nx: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \") \";\n+      // resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n     }\n     std::cout << std::endl;\n     resultbuffer.close();\n     \n"
                },
                {
                    "date": 1648604626367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,11 +62,13 @@\n       const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n       const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n       // if (i % 2 !=0) continue;\n       // std::pair<cv::Mat, cv::Mat> out = \n-       vo.stereo_callback(cur_img_l, cur_img_r);\n+      std::pair<double, double> out = vo.stereo_callback(cur_img_l, cur_img_r);\n       // cv::Mat translation = out.first;\n       // cv::Mat rotation = out.second;\n+      double x = out.first;\n+      double y = out.second;\n       // If there was any update\n       // assert(isRotationMatrix(rotation));\n \n       // cv::Vec3f rotation_euler = rotationMatrixToEulerAngles(rotation);\n"
                },
                {
                    "date": 1648604641453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,10 +80,9 @@\n       //   std::cout << \"Rotation too big, skipping update\\n\";\n       // }\n       // double x = frame_pose.col(3).at<double>(0);\n       // double y = frame_pose.col(3).at<double>(1);\n-       std::cout << \"\\ngtx: \"<< gtx << \" gty:\" << gty << \" \";\n-      // std::cout << \"\\nx: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \") \";\n+      std::cout << \"\\nx: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \") \";\n       // resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n     }\n     std::cout << std::endl;\n     resultbuffer.close();\n"
                },
                {
                    "date": 1648604765852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,10 @@\n     cv::Mat projMatrl(3, 4, CV_32F, left_P);\n     cv::Mat projMatrr(3, 4, CV_32F, right_P);\n     PoseEstimator vo(projMatrl, projMatrr);\n     cv::Mat frame_pose = cv::Mat::eye(4, 4, CV_64F);\n+    double x =0;\n+    double y =0;\n     for(int i = 0; i < N_FRAMES; i++) {\n       std::string xstr, ystr, dxstr, dystr;\n       // apparently we just doesn't read the first col of the csv\n       std::getline(buffer, xstr, ',');\n@@ -65,10 +67,12 @@\n       // std::pair<cv::Mat, cv::Mat> out = \n       std::pair<double, double> out = vo.stereo_callback(cur_img_l, cur_img_r);\n       // cv::Mat translation = out.first;\n       // cv::Mat rotation = out.second;\n-      double x = out.first;\n-      double y = out.second;\n+      double dx = out.first;\n+      double dy = out.second;\n+      x += dx;\n+      y += dy;\n       // If there was any update\n       // assert(isRotationMatrix(rotation));\n \n       // cv::Vec3f rotation_euler = rotationMatrixToEulerAngles(rotation);\n@@ -81,9 +85,9 @@\n       // }\n       // double x = frame_pose.col(3).at<double>(0);\n       // double y = frame_pose.col(3).at<double>(1);\n       std::cout << \"\\nx: \" << x << \" (\" << gtx << \")\\ty:\" <<  y << \" (\" << gty << \") \";\n-      // resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n+      resultbuffer << x << \",\" << y << \",\" << gtx << \",\" << gty << \"\\n\";\n     }\n     std::cout << std::endl;\n     resultbuffer.close();\n     \n"
                }
            ],
            "date": 1647548807643,
            "name": "Commit-0",
            "content": "#include <opencv2/core.hpp>\n#include <opencv2/imgcodecs.hpp>\n#include <opencv2/highgui.hpp>\n#include <opencv2/calib3d/calib3d.hpp>\n#include <iostream>\n#include <sstream>\n#include <iomanip>\n#include \"../include/vo.h\"\n#include \"vo.c\"\n\nnamespace visual_odometry {\n\nint main(int argc, char** argv) {\n\n    if(argc < 5) {\n      std::cout << \"Too few arguments\" << std::endl;\n      return -1;\n    }\n    \n    // Disparity image data stucture\n    cv::Mat_<int16_t> disparity16;\n\n    // Image paths\n    std::string prev_img_l_path = argv[1];\n    std::string prev_img_r_path = argv[2];\n    std::string cur_img_l_path = argv[1];\n    std::string cur_img_r_path = argv[2];\n    std::string folderName = \"run1images\";\n\n    float fx= 282.06762;\n    float fy= 282.06762;\n    float cx= 290.79884;\n    float cy= 182.52132;\n    float bf= -16.61097;\n\n    cv::Mat projMatrl = (cv::Mat_<float>(3, 4) << fx, 0., cx, 0., 0., fy, cy, 0., 0,  0., 1., 0.);\n    cv::Mat projMatrr = (cv::Mat_<float>(3, 4) << fx, 0., cx, bf, 0., fy, cy, 0., 0,  0., 1., 0.);\n\n    VisualOdometry vo(projMatrl, projMatrr);\n    for(int i = 0; i < 128; i++) {\n        std::stringstream lFileName;\n        std::stringstream rFileName;\n        lFileName << folderName << \"/left/\" << std::setw(4) << i << \".jpg\";\n        rFileName << folderName << \"/right/\" << std::setw(4) << i << \".jpg\";\n        const cv::Mat cur_img_l =  cv::imread(lFileName.str(), cv::IMREAD_GRAYSCALE);\n        const cv::Mat cur_img_r =  cv::imread(rFileName.str(), cv::IMREAD_GRAYSCALE);\n        vo.stereo_callback(cur_img_l, cur_img_r);\n    }\n    \n    //cv::imwrite(\"./disparity.png\",  (cv::Mat) disp_image);\n    return 0;\n}\n\n} // namespace visual_odometry"
        }
    ]
}